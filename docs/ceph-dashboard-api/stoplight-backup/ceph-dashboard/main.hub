{
  "title": "Ceph dashbord API",
  "logo": "https://next.stoplight.io/images/mark-light-bg.png",
  "header": {
    "nav": {
      "left": [
        {
          "title": "CODE",
          "path": "https://github.com/ceph/ceph/tree/master/src/pybind/mgr/dashboard"
        },
        {
          "title": "FKA",
          "path": "https://www.openattic.org/"
        },
        {
          "title": "DOC",
          "path": "http://docs.ceph.com/docs/mimic/mgr/dashboard/"
        }
      ],
      "right": []
    }
  },
  "pages": {
    "/": {
      "title": "Welcome",
      "data": {
        "blocks": [
          {
            "type": "text",
            "data": "## Welcome to Ceph dashboard API documentation!\n\n#### Ceph dashboard overview\n\nCeph dashboard is an ongoing project to add a native web based monitoring and administration application to Ceph Manager, which make it easier to administer Ceph for users that prefer a WebUI over using the command line.\n\nThe architecture and functionality of this module are derived from and inspired by the openATTIC Ceph management and monitoring tool. The development is actively driven by the team behind openATTIC at SUSE. You can check out the 'FKA' or [this link](https://www.openattic.org/) for more details about openATTIC.\n\n#### All about Ceph dashboard\n\nYou can check [the official documentation](http://docs.ceph.com/docs/mimic/mgr/dashboard/) for how to set up the Ceph dashboard module for your use.\n\nAnd also the source code is given [here](https://github.com/ceph/ceph/tree/master/src/pybind/mgr/dashboard) for purpose of development.\n\nFor you convinience, a development guide and a 'short' introduction are given (see **'*CEPH DASHBOARD DEVELOPMENT GUIDE*'** and **'*CEPH DASHBOARD API IN A NUTSHELL*'** sections on the right side) to help you build a development environment, and better understand the documentation and test the API.\n\n\n#### API detail\n\nClick **'*CEPH DASHBOARD API REFERENCE*'** section on the right side for API details.\n\n"
          }
        ],
        "children": [
          {
            "title": "Ceph dashboard Development Guide",
            "route": {
              "path": "/ceph-dashboard-dev"
            },
            "data": {
              "blocks": [
                {
                  "type": "text",
                  "data": "## Build a development environment\n\n### using docker technology\n\nBuilding a ceph cluster takes several steps, one by one, and also needs manual configration afterwards. If we can just complete that by just typing several lines of command, it would be great. And yes, there is one solution, by using docker images.\n\nThere is already such one docker image to help you build a local ceph development environment, you can check for more details [here](https://github.com/ricardoasmarques/ceph-dev-docker), and knowledges about docker at the [official documentation](https://docs.docker.com/get-started/) if you are new to it.\n\nBut please allow me to points out serveral steps which I think is easy to follow and sufficient to build the development environment:\n\n```sh\n## build docker image\ngit clone git@github.com:ricardoasmarques/ceph-dev-docker.git\ndocker build --network=host -t ceph-dev-docker .\n\ncd <workdir>\ngit clone git@github.com:ceph/ceph.git\ncd ceph\n\ndocker run -it \\\n  -v $PWD:/ceph \\\n  -v ~/.ccache:/root/.ccache \\\n  --net=host \\\n  --name=ceph-dev \\\n  --hostname=ceph-dev \\\n  --add-host=ceph-dev:127.0.0.1 \\\n  ceph-dev-docker \\\n  /bin/bash\n\n\t\n## you are now inside docker container\n## and below are all commands for bash of container\ncd ~/bin\n## build ceph source code\n## be patient, it takes time (5h~7h)\n./setup-ceph.sh\n\n## start a ceph cluster\n./start-ceph.sh \n\n## build frontend and start server\n./npm-start.sh\n```\n\nAfter running all these commands step by step, you can now see the ceph dashboard by surfing http://localhost:4200 with your browser.\n\nIf you made any changes to the source code, just running following commands (inside the running container):\n\n```sh\ncd ~/bin\n\n## if any changes to backend python files\n./reload-dashboard.sh\n\n## rebuild the front\n./npm-start.sh\n```\n\n### building from source\n\nOf course, you can build without docker, but it would be relatively more complicated. The building steps are in fact same with what the docker building steps do. You can checkout the [official ceph documentation](https://github.com/ceph/ceph) for helps on building  and running a ceph cluster.\n\nAfter you successfully run a cluster, checkout [ceph dashboard documentation](http://docs.ceph.com/docs/master/mgr/dashboard/) for help on enabling the ceph dashboard.\n\n```markdown\n**Benifits**:\nThe ceph project evolves fast, you could always get/test the newest features/updates by building from source.\n```\n\n### using package of distribution\n\nYou can also test the Ceph dashboad by installing well supported SUSE products: SLES15 and SES6 (SUSE Entreprise Storage 6, which is now available only for testing inside company).\n\nFollowing the installation steps given in [this quick start guide](https://openattic.readthedocs.io/en/latest/install_guides/quick_start_guide.html) of delpoying a Ceph cluster, and you can then just enable the Ceph dashbord following the [ceph dashboard documentation](http://docs.ceph.com/docs/master/mgr/dashboard/) which is already referenced in the previous section, or read following simplified steps:\n\n1, Enable the dashboard module:\n\n```sh\nceph mgr module enable dashboard\n```\n\n2, Create self-signed certificate for SSL/TLS support\n\n```sh\nceph dashboard create-self-signed-cert\n```\n\nOr you can just disable SSL:\n\n```sh\nceph config set mgr mgr/dashboard/ssl false\nceph mgr module disable dashboard\nceph mgr module enable dashboard\n```\n\n3, Obtain the URL for accessing the dashboard\n\n```sh\n## Look for the 'dashboard' key\nceph mgr services  \n```\n\n4, Create a user account for login\n\n```sh\nceph dashboard ac-user-create <username> <password> administrator\n```\n\n5, Enable object gateway management\n\n```sh\n### Obtain login credentials of an existing user\n### Take note of the keys access_key and secret_key\nradosgw-admin user info --uid=<user_id>\n\n### if you don't have such a user, create one\nradosgw-admin user create --uid=<user_id> --display-name=<display_name> --system\n\n### provide the credentials to the dashboard\nceph dashboard set-rgw-api-access-key <access_key>\nceph dashboard set-rgw-api-secret-key <secret_key>\n\n### disable certificate verification if using self-signed cert\nceph dashboard set-rgw-api-ssl-verify False\n```\n\n6, Enable grafana dashboard\n\nEnable the Ceph Exporter:\n\n```sh\nceph mgr module enable prometheus\n```\n\nAdd following configuration to prometheus:\n\n```txt\nglobal:\n  scrape_interval: 5s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n  - job_name: 'ceph'\n    static_configs:\n      - targets: ['localhost:9283']\n  - job_name: 'node-exporter'\n    static_configs:\n      - targets: ['localhost:9100']\n```\n\nAdd Prometheus as data source to Grafana.\n\nInstall the vonage-status-panel and grafana-piechart-panel plugins:\n\n```sh\ngrafana-cli plugins install vonage-status-panel\ngrafana-cli plugins install grafana-piechart-panel\n```\n\nAdd the Dashboards to Grafana by using downloaded json files: (all json files are [here](https://github.com/ceph/ceph/tree/master/monitoring/grafana/dashboards))\n\n```sh\nwget https://raw.githubusercontent.com/ceph/ceph/master/monitoring/grafana/dashboards/<Dashboard-name>.json\n```\n\nConfigure Grafana in /etc/grafana/grafana.ini:\n\n```txt\n[auth.anonymous]\nenabled = true\norg_name = Main Org.\norg_role = Viewer\n```\n\nTell the dashboard on which url Grafana instance is running/deployed:\n\n```sh\n### The format of url is : <protocol>:<IP-address>:<port>\nceph dashboard set-grafana-api-url <grafana-server-url>  # default: ''\n```"
                },
                {
                  "type": "text",
                  "data": "---\n\n## 搭建开发环境\n\n### 使用docker\n\n使用现有的docker image来快速搭建本地的ceph开发环境，具体细节可以参考[这里](https://github.com/ricardoasmarques/ceph-dev-docker)。如果你对docker是初次了解，可以在[此处](https://docs.docker.com/get-started/)参考官方文档。\n\n下面将给出一些简要的步骤来帮助你搭建开发环境：\n\n```sh\n## 创建 docker image\ngit clone git@github.com:ricardoasmarques/ceph-dev-docker.git\ndocker build --network=host -t ceph-dev-docker .\n\ncd <workdir>\ngit clone git@github.com:ceph/ceph.git\ncd ceph\n\ndocker run -it \\\n  -v $PWD:/ceph \\\n  -v ~/.ccache:/root/.ccache \\\n  --net=host \\\n  --name=ceph-dev \\\n  --hostname=ceph-dev \\\n  --add-host=ceph-dev:127.0.0.1 \\\n  ceph-dev-docker \\\n  /bin/bash\n\n\t\n## 此时已经在docker container中\ncd ~/bin\n\n## 编译ceph源码，大概需要花费5～7小时（第一次）\n./setup-ceph.sh\n\n## 部署ceph集群\n./start-ceph.sh \n\n## 编译前端并启动web服务\n./npm-start.sh\n```\n\n运行以上命令后就可以在浏览器中访问http://localhost:4200\n,此时就能够进入ceph dashboard界面了。\n\n如果对源码做了改动，可以运行以下命令来重新测试：\n\n```sh\ncd ~/bin\n\n## 如果对后端python文件做了改动\n./reload-dashboard.sh\n\n## 重新编译前端\n./npm-start.sh\n```\n\n### 从源码开始搭建\n\n源码搭建的步骤其实与docker的步骤是一样的，只不过使用docker时有了相应的脚本帮助你快速的一步到位。所以如果要从源码开始，可以参考ceph的[官方文档](https://github.com/ceph/ceph)。\n\n成功启动一个测试集群后，参考[ceph dashboard文档](http://docs.ceph.com/docs/master/mgr/dashboard/) 以启动dashboard模块。\n\n```markdown\n**优势**:\nceph项目迭代更新很快，要想测试新的特性或更新，从源码编译是最好的办法。（虽然第一次编译花费时间较长，但之后的编译借助于ccache会更加快速）\n```\n\n### 使用发行版本安装包\n\nCeph dashboard已经集成在SUSE最新的SUSE Entreprise Storage 6（目前还只限于内部测试）中，安装SLES15和SES6即可体验dashboard功能。\n\n安装部署ceph集群的步骤可以从参考[这篇快速开始导引](https://openattic.readthedocs.io/en/latest/install_guides/quick_start_guide.html)，并参考之前提到的[ceph dashboard官方文档](http://docs.ceph.com/docs/master/mgr/dashboard/) 启动dashboard模块。为了简便，也可以参考以下一些必要的步骤：\n\n1, 启动ceph dashboard模块:\n\n```sh\nceph mgr module enable dashboard\n```\n\n2, 创建自签名证书以提供SSL/TLS支持\n\n```sh\nceph dashboard create-self-signed-cert\n```\n\n或者也可以直接禁止SSL验证:\n\n```sh\nceph config set mgr mgr/dashboard/ssl false\nceph mgr module disable dashboard\nceph mgr module enable dashboard\n```\n\n3, 获取dashboard服务的URL地址：\n\n```sh\n## 寻找dashboard的相关键\nceph mgr services  \n```\n\n4, 创建一个登录帐号\n\n```sh\nceph dashboard ac-user-create <username> <password> administrator\n```\n\n5, 启用object gateway管理功能\n\n```sh\n## 获取已有用户的登录验证密钥，记录access_key和secret_key\nradosgw-admin user info --uid=<user_id>\n\n## 如果没有相应的用户，则需要创建一个\nradosgw-admin user create --uid=<user_id> --display-name=<display_name> --system\n\n### 将验证密钥提供给dashboard\nceph dashboard set-rgw-api-access-key <access_key>\nceph dashboard set-rgw-api-secret-key <secret_key>\n\n### 如果使用了自签名的证书，需要禁止证书验证\nceph dashboard set-rgw-api-ssl-verify False\n```\n\n6, 启动 grafana dashboard\n\n启动 Ceph Exporter:\n\n```sh\nceph mgr module enable prometheus\n```\n\n为prometheus添加以下设置：\n\n```txt\nglobal:\n  scrape_interval: 5s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n  - job_name: 'ceph'\n    static_configs:\n      - targets: ['localhost:9283']\n  - job_name: 'node-exporter'\n    static_configs:\n      - targets: ['localhost:9100']\n```\n\n为Grafana添加Prometheus源。\n\n安装插件vonage-status-panel 和 grafana-piechart-panel：\n\n```sh\ngrafana-cli plugins install vonage-status-panel\ngrafana-cli plugins install grafana-piechart-panel\n```\n\n为Grafana添加以下dashboard，使用下载的json文件（可以从以下链接下载：https://github.com/ceph/ceph/tree/master/monitoring/grafana/dashboards） ：\n\n```sh\nwget https://raw.githubusercontent.com/ceph/ceph/master/monitoring/grafana/dashboards/<Dashboard-name>.json\n```\n\n配置Grafana文件（/etc/grafana/grafana.ini）:\n\n```txt\n[auth.anonymous]\nenabled = true\norg_name = Main Org.\norg_role = Viewer\n```\n\n提供Grafana的url信息给dashboard：\n\n```sh\n### The format of url is : <protocol>:<IP-address>:<port>\nceph dashboard set-grafana-api-url <grafana-server-url>  # default: ''\n```"
                }
              ],
              "children": [
                {
                  "title": "Example - Add multi-language support",
                  "route": {
                    "path": "/add-multi-language-support"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "text",
                        "data": "## Add multi language support for Ceph dashboard\n\nIf you want to add support of chinese language in ceph dashboard, I'll give you a guideline here. (The complete documentation for the i18n step in Angular project is given [here](https://angular.io/guide/i18n).)\n\nThe concerned files are listed below (suppose that root path of source code is 'ceph/src/pybind/mgr/dashboard'):\n\n##### I. add 'Chinese' entries in the two following files:\n- /frontend/src/app/locale.helper.ts\n- /frontend/src/app/shared/components/language-selector/supported-languages.enum.ts\n\n\nNote: \nYou should give the right local identifier, for example, 'zh-CN' but not 'cn-CN' (for Chinese language).\n\n> A Unicode locale identifier is composed of a Unicode language identifier and (optionally) the character - followed by a locale extension. (For historical reasons the character _ is supported as an alternative to -.) For example, in the locale id fr-CA the fr refers to the French language identifier, and the CA refers to the locale extension Canada.\n\nFor a complete list of locales supported by Angular, see the [Angular repository](https://github.com/angular/angular/tree/master/packages/common/locales).\n\n\n##### II. add 'messages.zh-CN.xlf' file under this directory:\n- /frontend/src/locale\n\n```txt\nNote: \n'messages.<local-id>.xlf' is the translation source file, you can download the source file of your language or help translation via [this website](https://www.transifex.com/ceph/ceph-dashboard).\n```\n\n\nWhen you have updated these files, you should rebuild the frontend of dashboard to view the changes, simply run:\n\n```sh\ncd ~/bin\n\n## build frontend and start server\n./npm-start.sh\n```"
                      },
                      {
                        "type": "text",
                        "data": "---\n\n## 为Ceph dashboard添加多语言支持\n\n语言支持涉及的相关文件有以下（假设源码根路径为'/ceph/src/pybind/mgr/dashboard'）：\n\n##### I. 在以下两个文件中添加中文入口:\n- /frontend/src/app/locale.helper.ts\n- /frontend/src/app/shared/components/language-selector/supported-languages.enum.ts\n\n注意 local id 的命名不能随意，比如对于中文可以为‘zh-CN’，但是'cn-CN'就会在编译时导致出错，遵循的规则应为 ‘语言标识-地区’。示例：fr-CA，en-US等。\n\nAngular支持的具体列表可见[此仓库](https://github.com/angular/angular/tree/master/packages/common/locales)。\n\n##### II. 在以下目录中加入中文翻译源文件'messages.zh-CN.xlf':\n- /frontend/src/locale\n\n\n其中'messages.<local-id>.xlf' 是翻译的源文件，可以在[以下网站](https://www.transifex.com/ceph/ceph-dashboard)中下载各语言版本，或者也可以在此帮助翻译。\n\n\n更新完以上文件后，需要重新编译前端，可以运行以下命令：\n\n```sh\ncd ~/bin\n\n## build frontend and start server\n./npm-start.sh\n```"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Ceph dashboard API in a nutshell",
            "route": {
              "path": "/ceph-dashboard-api-short"
            },
            "data": {
              "blocks": [
                {
                  "type": "text",
                  "data": "## API Reference in a nutshull\n\n### The first step – auth/login\n\nIn this request, you need to fullfill request body with ‘username’ and ‘password’ (default: “admin”/\"admin), and you will get a token returned in the response body. The token here is very important, and better to be noted down, since it’s used in all the other API requests for the authorization. That means you need to add ‘Authorization’ request header in all the other API request (the format is “Bearer #token_returned#”).\n\n### The most important request header – Authorization\n\nAs said in the previous section, except for the request of auth login, every api request should be sent with the ‘Authorization’ header.\n\n### About the ‘host’\n\nChange the api host to your mgr host ip address. Here, in my case, it’s just the localhost (127.0.0.1) with port 4200, so the host url is “http://127.0.0.1:4200/api”."
                },
                {
                  "type": "text",
                  "data": "---\n\n## API文档帮助说明\n\n### 第一步：验证/登录\n\n在这个api请求中，需要在request body中提供‘username’和‘password’(默认均为‘admin’），并且会在response中返回一个token。这个token非常重要，最好记录下来，因为在之后所有其他的api请求中，你都需要将其添加到“Authorization”的request header（格式为“Bearer #token#”）。\n\n### 最重要的request header - Authorization\n\n如上所述，除了登录的api，其他api请求中你都需要发送一个名为‘Authorization’ 的 request header作为验证方式。\n\n### 关于‘host’\n\n将api host改为相应的mgr host ip地址。在此处的例子中，为“http://127.0.0.1:4200/api” 。"
                }
              ],
              "children": [
                {
                  "title": "How to test API",
                  "route": {
                    "path": "/how-to-test-api"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "text",
                        "data": "## How to test an API\n\nUse any kind of API client, or programming languages, such as curl, python, etc. You just need to give API path with the corresponding request method.The API path format is 'host url'+'api relative path'. \n\nFor example, for login api, the complete api path is 'http://localhost:4200/api/login'. The 'host url' is 'http://localhost:4200/api' , and the 'api relative path' is '/api'. The request method here is 'POST'.\n\nAnd then, you should notice that you need to add two request parameters for the login api:\n- Content-Type: \"application/json\"\n- Body: {\"username\": \"admin\", \"password\": \"admin\"}\n\nIn the end, if you want to send api request using curl, then the command is:\n\n```sh\ncurl -X POST \"http://127.0.0.1:4200/api/auth\" \\\n\t\t-H  \"accept: application/json\" \\\n\t\t-H  \"Content-Type: application/json\" \\\n\t\t-d \"{\\\"username\\\":\\\"admin\\\",\\\"password\\\":\\\"admin\\\"}\"\n```\n\nIf using python:\n\n```python\nimport requests\nurl = 'http://localhost:4200/api/auth'\npayload = \"{\\\"username\\\":\\\"admin\\\",\\\"password\\\":\\\"admin\\\"}\"\nheaders = {\n  'Content-Type': 'application/json'\n}\nresponse = requests.request('POST', url, headers = headers, data = payload, allow_redirects=False, timeout=undefined, allow_redirects=false)\nprint(response.text)\n```\n\nYou should now be able to test any APIs following the same way.\n\n**OR!** You may notice that there is a test module under each API request page:\n\n![Test](https://raw.githubusercontent.com/kristol07/source-store/master/Screenshot-SPOTLIGHT-Test-API-module.png)\n\n\nBut please don’t except it would work. However you can use it to generate code of different languages. It’s proved that you can use these generated codes for the API testing."
                      },
                      {
                        "type": "text",
                        "data": "---\n\n## 如何测试API\n\n使用任意的API client或者编程语言，例如curl，python都可以用来对api进行测试，只需要给定相应的api path和请求方法，并附上需要的header或者body（具体每个api要求参考相应的api reference）（api path由api根路径和相对路径组成）。\n\n举个例子，对于login api，完整的api path 是'http://localhost:4200/api/login' （其中api根路径是 'http://localhost:4200/api' , 而api相对路径是 '/api'。请求方法是'POST'。\n\n然后，注意到还需要添加两个请求参数:\n- Content-Type: \"application/json\"\n- Body: {\"username\": \"admin\", \"password\": \"admin\"}\n\n最后，如果使用curl，api请求命令如下：\n\n```sh\ncurl -X POST \"http://127.0.0.1:4200/api/auth\" \\\n\t\t-H  \"accept: application/json\" \\\n\t\t-H  \"Content-Type: application/json\" \\\n\t\t-d \"{\\\"username\\\":\\\"admin\\\",\\\"password\\\":\\\"admin\\\"}\"\n```\n\n如果使用python：\n\n```python\nimport requests\nurl = 'http://localhost:4200/api/auth'\npayload = \"{\\\"username\\\":\\\"admin\\\",\\\"password\\\":\\\"admin\\\"}\"\nheaders = {\n  'Content-Type': 'application/json'\n}\nresponse = requests.request('POST', url, headers = headers, data = payload, allow_redirects=False, timeout=undefined, allow_redirects=false)\nprint(response.text)\n```\n\n对于测试其他api也是类似的方法。\n\n**OR!** 你也许注意到，对于每个api页，最下方都有一个测试模块：\n\n![Test](https://raw.githubusercontent.com/kristol07/source-store/master/Screenshot-SPOTLIGHT-Test-API-module.png)\n\n但是在此处并不能用于测试。不过可以用它生成相应的代码（有多种语言,curl,python,go等）来进行线下测试。"
                      }
                    ]
                  }
                },
                {
                  "title": "API in source code",
                  "route": {
                    "path": "/api-in-source-code"
                  },
                  "data": {
                    "blocks": [
                      {
                        "type": "text",
                        "data": "## Find API paths in the source code\n\nObviously, you can find all the API paths in the source code, under this directory:\n\n```sh\n/ceph/src/pybind/mgr/dashboard/frontend/src/app/shared/api\n```\n\nYou can use some searching tools of linux, such as 'ag', 'ack' or 'grep' to quickly find these api paths in those source files. \n\nFor example, "
                      },
                      {
                        "type": "code",
                        "data": "$ ag api *.service.ts\n\n---output---\n### almost all the API paths are listed\nauth.service.ts:8:import { ApiModule } from './api.module';\nauth.service.ts:11:  providedIn: ApiModule\nauth.service.ts:21:    return this.http.post('api/auth/check', { token: token });\nauth.service.ts:26:      .post('api/auth', credentials)\nauth.service.ts:34:    return this.http.post('api/auth/logout', null).subscribe((resp: any) => {\ncephfs.service.ts:4:import { ApiModule } from './api.module';\ncephfs.service.ts:7:  providedIn: ApiModule\ncephfs.service.ts:10:  baseURL = 'api/cephfs';\nconfiguration.service.ts:5:import { ApiModule } from './api.module';\nconfiguration.service.ts:8:  providedIn: ApiModule\nconfiguration.service.ts:14:    return this.http.get('api/cluster_conf/');\nconfiguration.service.ts:18:    return this.http.get(`api/cluster_conf/${configOption}`);\nconfiguration.service.ts:22:    return this.http.post('api/cluster_conf/', configOption);\nerasure-code-profile.service.ts:7:import { ApiModule } from './api.module';\nerasure-code-profile.service.ts:10:  providedIn: ApiModule\nerasure-code-profile.service.ts:13:  apiPath = 'api/erasure_code_profile';\nerasure-code-profile.service.ts:18:    return this.http.get<ErasureCodeProfile[]>(this.apiPath);\nerasure-code-profile.service.ts:22:    return this.http.post(this.apiPath, ecp, { observe: 'response' });\nerasure-code-profile.service.ts:26:    return this.http.put(`${this.apiPath}/${ecp.name}`, ecp, { observe: 'response' });\nerasure-code-profile.service.ts:30:    return this.http.delete(`${this.apiPath}/${name}`, { observe: 'response' });\nerasure-code-profile.service.ts:34:    return this.http.get(`${this.apiPath}/${name}`);\nerasure-code-profile.service.ts:38:    return this.http.get(`${this.apiPath}/_info`);\ngrafana.service.ts:4:import { ApiModule } from './api.module';\ngrafana.service.ts:7:  providedIn: ApiModule\ngrafana.service.ts:12:  getGrafanaApiUrl() {\ngrafana.service.ts:13:    return this.http.get('api/grafana/url');\nhealth.service.ts:4:import { ApiModule } from './api.module';\nhealth.service.ts:7:  providedIn: ApiModule\nhealth.service.ts:13:    return this.http.get('api/health/full');\nhealth.service.ts:17:    return this.http.get('api/health/minimal');\nhost.service.ts:4:import { ApiModule } from './api.module';\nhost.service.ts:7:  providedIn: ApiModule\nhost.service.ts:14:      .get('api/host')\nlogging.service.ts:4:import { ApiModule } from './api.module';\nlogging.service.ts:7:  providedIn: ApiModule\nlogging.service.ts:18:    return this.http.post('ui-api/logging/js-error', request);\nlogs.service.ts:4:import { ApiModule } from './api.module';\nlogs.service.ts:7:  providedIn: ApiModule\nlogs.service.ts:13:    return this.http.get('api/logs/all');\nmonitor.service.ts:4:import { ApiModule } from './api.module';\nmonitor.service.ts:7:  providedIn: ApiModule\nmonitor.service.ts:13:    return this.http.get('api/monitor');\nosd.service.ts:4:import { ApiModule } from './api.module';\nosd.service.ts:7:  providedIn: ApiModule\nosd.service.ts:10:  private path = 'api/osd';\nperformance-counter.service.ts:7:import { ApiModule } from './api.module';\nperformance-counter.service.ts:10:  providedIn: ApiModule\nperformance-counter.service.ts:13:  private url = 'api/perf_counters';\npool.service.ts:8:import { ApiModule } from './api.module';\npool.service.ts:12:  providedIn: ApiModule\npool.service.ts:15:  apiPath = 'api/pool';\npool.service.ts:20:    return this.http.post(this.apiPath, pool, { observe: 'response' });\npool.service.ts:32:    return this.http.put(`${this.apiPath}/${name}`, pool, { observe: 'response' });\npool.service.ts:36:    return this.http.delete(`${this.apiPath}/${name}`, { observe: 'response' });\npool.service.ts:40:    return this.http.get(`${this.apiPath}/${poolName}`);\npool.service.ts:44:    return this.http.get(this.apiPath);\npool.service.ts:48:    return this.http.get<PoolFormInfo>(`${this.apiPath}/_info`);\npool.service.ts:54:      .get(`${this.apiPath}?attrs=${attrsStr}`)\nrbd-mirroring.service.ts:4:import { ApiModule } from './api.module';\nrbd-mirroring.service.ts:7:  providedIn: ApiModule\nrbd-mirroring.service.ts:13:    return this.http.get('api/rbdmirror');\nrbd.service.ts:5:import { ApiModule } from './api.module';\nrbd.service.ts:9:  providedIn: ApiModule\nrbd.service.ts:15:    return this.http.post('api/block/image', rbd, { observe: 'response' });\nrbd.service.ts:19:    return this.http.delete(`api/block/image/${poolName}/${rbdName}`, { observe: 'response' });\nrbd.service.ts:23:    return this.http.put(`api/block/image/${poolName}/${rbdName}`, rbd, { observe: 'response' });\nrbd.service.ts:27:    return this.http.get(`api/block/image/${poolName}/${rbdName}`);\nrbd.service.ts:31:    return this.http.get('api/block/image');\nrbd.service.ts:35:    return this.http.post(`api/block/image/${poolName}/${rbdName}/copy`, rbd, {\nrbd.service.ts:41:    return this.http.post(`api/block/image/${poolName}/${rbdName}/flatten`, null, {\nrbd.service.ts:47:    return this.http.get('api/block/image/default_features');\nrbd.service.ts:54:    return this.http.post(`api/block/image/${poolName}/${rbdName}/snap`, request, {\nrbd.service.ts:63:    return this.http.put(`api/block/image/${poolName}/${rbdName}/snap/${snapshotName}`, request, {\nrbd.service.ts:72:    return this.http.put(`api/block/image/${poolName}/${rbdName}/snap/${snapshotName}`, request, {\nrbd.service.ts:79:      `api/block/image/${poolName}/${rbdName}/snap/${snapshotName}/rollback`,\nrbd.service.ts:87:      `api/block/image/${poolName}/${rbdName}/snap/${snapshotName}/clone`,\nrbd.service.ts:94:    return this.http.delete(`api/block/image/${poolName}/${rbdName}/snap/${snapshotName}`, {\nrbd.service.ts:100:    return this.http.get(`api/block/image/trash/`);\nrbd.service.ts:105:      `api/block/image/${poolName}/${rbdName}/move_trash`,\nrbd.service.ts:112:    return this.http.post(`api/block/image/trash/purge/?pool_name=${poolName}`, null, {\nrbd.service.ts:119:      `api/block/image/trash/${poolName}/${imageId}/restore`,\nrbd.service.ts:127:      `api/block/image/trash/${poolName}/${imageId}/?image_name=${imageName}&force=${force}`,\nrgw-bucket.service.ts:9:import { ApiModule } from './api.module';\nrgw-bucket.service.ts:13:  providedIn: ApiModule\nrgw-bucket.service.ts:16:  private url = 'api/rgw/bucket';\nrgw-daemon.service.ts:5:import { ApiModule } from './api.module';\nrgw-daemon.service.ts:9:  providedIn: ApiModule\nrgw-daemon.service.ts:12:  private url = 'api/rgw/daemon';\nrgw-user.service.ts:9:import { ApiModule } from './api.module';\nrgw-user.service.ts:13:  providedIn: ApiModule\nrgw-user.service.ts:16:  private url = 'api/rgw/user';\nrole.service.ts:8:import { ApiModule } from './api.module';\nrole.service.ts:11:  providedIn: ApiModule\nrole.service.ts:17:    return this.http.get('api/role');\nrole.service.ts:21:    return this.http.delete(`api/role/${role}`);\nrole.service.ts:25:    return this.http.get(`api/role/${name}`);\nrole.service.ts:29:    return this.http.post(`api/role`, role);\nrole.service.ts:33:    return this.http.put(`api/role/${role.name}`, role);\nscope.service.ts:4:import { ApiModule } from './api.module';\nscope.service.ts:7:  providedIn: ApiModule\nscope.service.ts:13:    return this.http.get('ui-api/scope');\ntcmu-iscsi.service.ts:4:import { ApiModule } from './api.module';\ntcmu-iscsi.service.ts:7:  providedIn: ApiModule\ntcmu-iscsi.service.ts:13:    return this.http.get('api/tcmuiscsi');\nuser.service.ts:5:import { ApiModule } from './api.module';\nuser.service.ts:8:  providedIn: ApiModule\nuser.service.ts:14:    return this.http.get('api/user');\nuser.service.ts:18:    return this.http.delete(`api/user/${username}`);\nuser.service.ts:22:    return this.http.get(`api/user/${username}`);\nuser.service.ts:26:    return this.http.post(`api/user`, user);\nuser.service.ts:30:    return this.http.put(`api/user/${user.username}`, user);"
                      },
                      {
                        "type": "text",
                        "data": "---\n\n## 源码中的api\n\n显然api都是可以在源码中找到的，具体在以下路径的文件中：\n\n```sh\n/ceph/src/pybind/mgr/dashboard/frontend/src/app/shared/api\n```\n\n使用一些文件中内容搜索工具，如'ag','ack'或者'grep'可以快速地在上述文件中找到api path。\n\n例如： "
                      },
                      {
                        "type": "code",
                        "data": "$ ag api *.service.ts\n\n---output---\n### almost all the API paths are listed\nauth.service.ts:8:import { ApiModule } from './api.module';\nauth.service.ts:11:  providedIn: ApiModule\nauth.service.ts:21:    return this.http.post('api/auth/check', { token: token });\nauth.service.ts:26:      .post('api/auth', credentials)\nauth.service.ts:34:    return this.http.post('api/auth/logout', null).subscribe((resp: any) => {\ncephfs.service.ts:4:import { ApiModule } from './api.module';\ncephfs.service.ts:7:  providedIn: ApiModule\ncephfs.service.ts:10:  baseURL = 'api/cephfs';\nconfiguration.service.ts:5:import { ApiModule } from './api.module';\nconfiguration.service.ts:8:  providedIn: ApiModule\nconfiguration.service.ts:14:    return this.http.get('api/cluster_conf/');\nconfiguration.service.ts:18:    return this.http.get(`api/cluster_conf/${configOption}`);\nconfiguration.service.ts:22:    return this.http.post('api/cluster_conf/', configOption);\nerasure-code-profile.service.ts:7:import { ApiModule } from './api.module';\nerasure-code-profile.service.ts:10:  providedIn: ApiModule\nerasure-code-profile.service.ts:13:  apiPath = 'api/erasure_code_profile';\nerasure-code-profile.service.ts:18:    return this.http.get<ErasureCodeProfile[]>(this.apiPath);\nerasure-code-profile.service.ts:22:    return this.http.post(this.apiPath, ecp, { observe: 'response' });\nerasure-code-profile.service.ts:26:    return this.http.put(`${this.apiPath}/${ecp.name}`, ecp, { observe: 'response' });\nerasure-code-profile.service.ts:30:    return this.http.delete(`${this.apiPath}/${name}`, { observe: 'response' });\nerasure-code-profile.service.ts:34:    return this.http.get(`${this.apiPath}/${name}`);\nerasure-code-profile.service.ts:38:    return this.http.get(`${this.apiPath}/_info`);\ngrafana.service.ts:4:import { ApiModule } from './api.module';\ngrafana.service.ts:7:  providedIn: ApiModule\ngrafana.service.ts:12:  getGrafanaApiUrl() {\ngrafana.service.ts:13:    return this.http.get('api/grafana/url');\nhealth.service.ts:4:import { ApiModule } from './api.module';\nhealth.service.ts:7:  providedIn: ApiModule\nhealth.service.ts:13:    return this.http.get('api/health/full');\nhealth.service.ts:17:    return this.http.get('api/health/minimal');\nhost.service.ts:4:import { ApiModule } from './api.module';\nhost.service.ts:7:  providedIn: ApiModule\nhost.service.ts:14:      .get('api/host')\nlogging.service.ts:4:import { ApiModule } from './api.module';\nlogging.service.ts:7:  providedIn: ApiModule\nlogging.service.ts:18:    return this.http.post('ui-api/logging/js-error', request);\nlogs.service.ts:4:import { ApiModule } from './api.module';\nlogs.service.ts:7:  providedIn: ApiModule\nlogs.service.ts:13:    return this.http.get('api/logs/all');\nmonitor.service.ts:4:import { ApiModule } from './api.module';\nmonitor.service.ts:7:  providedIn: ApiModule\nmonitor.service.ts:13:    return this.http.get('api/monitor');\nosd.service.ts:4:import { ApiModule } from './api.module';\nosd.service.ts:7:  providedIn: ApiModule\nosd.service.ts:10:  private path = 'api/osd';\nperformance-counter.service.ts:7:import { ApiModule } from './api.module';\nperformance-counter.service.ts:10:  providedIn: ApiModule\nperformance-counter.service.ts:13:  private url = 'api/perf_counters';\npool.service.ts:8:import { ApiModule } from './api.module';\npool.service.ts:12:  providedIn: ApiModule\npool.service.ts:15:  apiPath = 'api/pool';\npool.service.ts:20:    return this.http.post(this.apiPath, pool, { observe: 'response' });\npool.service.ts:32:    return this.http.put(`${this.apiPath}/${name}`, pool, { observe: 'response' });\npool.service.ts:36:    return this.http.delete(`${this.apiPath}/${name}`, { observe: 'response' });\npool.service.ts:40:    return this.http.get(`${this.apiPath}/${poolName}`);\npool.service.ts:44:    return this.http.get(this.apiPath);\npool.service.ts:48:    return this.http.get<PoolFormInfo>(`${this.apiPath}/_info`);\npool.service.ts:54:      .get(`${this.apiPath}?attrs=${attrsStr}`)\nrbd-mirroring.service.ts:4:import { ApiModule } from './api.module';\nrbd-mirroring.service.ts:7:  providedIn: ApiModule\nrbd-mirroring.service.ts:13:    return this.http.get('api/rbdmirror');\nrbd.service.ts:5:import { ApiModule } from './api.module';\nrbd.service.ts:9:  providedIn: ApiModule\nrbd.service.ts:15:    return this.http.post('api/block/image', rbd, { observe: 'response' });\nrbd.service.ts:19:    return this.http.delete(`api/block/image/${poolName}/${rbdName}`, { observe: 'response' });\nrbd.service.ts:23:    return this.http.put(`api/block/image/${poolName}/${rbdName}`, rbd, { observe: 'response' });\nrbd.service.ts:27:    return this.http.get(`api/block/image/${poolName}/${rbdName}`);\nrbd.service.ts:31:    return this.http.get('api/block/image');\nrbd.service.ts:35:    return this.http.post(`api/block/image/${poolName}/${rbdName}/copy`, rbd, {\nrbd.service.ts:41:    return this.http.post(`api/block/image/${poolName}/${rbdName}/flatten`, null, {\nrbd.service.ts:47:    return this.http.get('api/block/image/default_features');\nrbd.service.ts:54:    return this.http.post(`api/block/image/${poolName}/${rbdName}/snap`, request, {\nrbd.service.ts:63:    return this.http.put(`api/block/image/${poolName}/${rbdName}/snap/${snapshotName}`, request, {\nrbd.service.ts:72:    return this.http.put(`api/block/image/${poolName}/${rbdName}/snap/${snapshotName}`, request, {\nrbd.service.ts:79:      `api/block/image/${poolName}/${rbdName}/snap/${snapshotName}/rollback`,\nrbd.service.ts:87:      `api/block/image/${poolName}/${rbdName}/snap/${snapshotName}/clone`,\nrbd.service.ts:94:    return this.http.delete(`api/block/image/${poolName}/${rbdName}/snap/${snapshotName}`, {\nrbd.service.ts:100:    return this.http.get(`api/block/image/trash/`);\nrbd.service.ts:105:      `api/block/image/${poolName}/${rbdName}/move_trash`,\nrbd.service.ts:112:    return this.http.post(`api/block/image/trash/purge/?pool_name=${poolName}`, null, {\nrbd.service.ts:119:      `api/block/image/trash/${poolName}/${imageId}/restore`,\nrbd.service.ts:127:      `api/block/image/trash/${poolName}/${imageId}/?image_name=${imageName}&force=${force}`,\nrgw-bucket.service.ts:9:import { ApiModule } from './api.module';\nrgw-bucket.service.ts:13:  providedIn: ApiModule\nrgw-bucket.service.ts:16:  private url = 'api/rgw/bucket';\nrgw-daemon.service.ts:5:import { ApiModule } from './api.module';\nrgw-daemon.service.ts:9:  providedIn: ApiModule\nrgw-daemon.service.ts:12:  private url = 'api/rgw/daemon';\nrgw-user.service.ts:9:import { ApiModule } from './api.module';\nrgw-user.service.ts:13:  providedIn: ApiModule\nrgw-user.service.ts:16:  private url = 'api/rgw/user';\nrole.service.ts:8:import { ApiModule } from './api.module';\nrole.service.ts:11:  providedIn: ApiModule\nrole.service.ts:17:    return this.http.get('api/role');\nrole.service.ts:21:    return this.http.delete(`api/role/${role}`);\nrole.service.ts:25:    return this.http.get(`api/role/${name}`);\nrole.service.ts:29:    return this.http.post(`api/role`, role);\nrole.service.ts:33:    return this.http.put(`api/role/${role.name}`, role);\nscope.service.ts:4:import { ApiModule } from './api.module';\nscope.service.ts:7:  providedIn: ApiModule\nscope.service.ts:13:    return this.http.get('ui-api/scope');\ntcmu-iscsi.service.ts:4:import { ApiModule } from './api.module';\ntcmu-iscsi.service.ts:7:  providedIn: ApiModule\ntcmu-iscsi.service.ts:13:    return this.http.get('api/tcmuiscsi');\nuser.service.ts:5:import { ApiModule } from './api.module';\nuser.service.ts:8:  providedIn: ApiModule\nuser.service.ts:14:    return this.http.get('api/user');\nuser.service.ts:18:    return this.http.delete(`api/user/${username}`);\nuser.service.ts:22:    return this.http.get(`api/user/${username}`);\nuser.service.ts:26:    return this.http.post(`api/user`, user);\nuser.service.ts:30:    return this.http.put(`api/user/${user.username}`, user);"
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "title": "Ceph dashboard API Reference",
            "route": {
              "path": "/ceph-dashboard-api"
            },
            "data": {
              "$ref": "./main.oas2.yml"
            }
          }
        ]
      }
    }
  }
}
