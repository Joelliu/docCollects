{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Ceph dashboard APIs",
    "description": "This OAS2 (Swagger 2) file represents Ceph dashboard APIs that lives at http://#mgr-host#:#port#. (ex, http://localhost:4200)\n\n\t\nFor my case, the mgr host resides in a Ceph cluster running in docker container. You can generate the same environment by refering to [ceph-dev-docker](https://github.com/ricardoasmarques/ceph-dev-docker), or using directly [this docker image](https://hub.docker.com/r/kristol07/ceph-dev-env) (You still need to compile yourself).\n\n\t\n### Dashboard Login (default)\n\t\n- username: admin\n- password: admin",
    "contact": {
      "name": "SUSE",
      "url": "https://www.suse.com/"
    },
    "license": {
      "name": "GPL-3.0"
    },
    "termsOfService": "https://www.suse.com/company/legal/#terms"
  },
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {},
  "paths": {
    "/auth": {
      "post": {
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                },
                "permissions": {
                  "type": "object",
                  "properties": {
                    "cephfs": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "config-opt": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "dashboard-settings": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "grafana": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "hosts": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "iscsi": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "log": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "manager": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "monitor": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "osd": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "pool": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "rbd-image": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "rbd-mirroring": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "rgw": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "user": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjZXBoLWRhc2hib2FyZCIsImp0aSI6ImE0MzNiM2NlLTVlYjItNGE2MS1iYmM5LTBhMDJlNWYyNDBiOSIsImV4cCI6MTU0NzEyMTcxMiwiaWF0IjoxNTQ3MDkyOTEyLCJ1c2VybmFtZSI6ImFkbWluIn0.4osNWG-hPsaKNb1TmdV8CNdy9tKjj2xwUcu11PtG_xc",
                "username": "admin",
                "permissions": {
                  "cephfs": [
                    "create",
                    "delete",
                    "read",
                    "update"
                  ],
                  "config-opt": [
                    "create",
                    "delete",
                    "read",
                    "update"
                  ],
                  "dashboard-settings": [
                    "create",
                    "delete",
                    "read",
                    "update"
                  ],
                  "grafana": [
                    "create",
                    "delete",
                    "read",
                    "update"
                  ],
                  "hosts": [
                    "create",
                    "delete",
                    "read",
                    "update"
                  ],
                  "iscsi": [
                    "create",
                    "delete",
                    "read",
                    "update"
                  ],
                  "log": [
                    "create",
                    "delete",
                    "read",
                    "update"
                  ],
                  "manager": [
                    "create",
                    "delete",
                    "read",
                    "update"
                  ],
                  "monitor": [
                    "create",
                    "delete",
                    "read",
                    "update"
                  ],
                  "osd": [
                    "create",
                    "delete",
                    "read",
                    "update"
                  ],
                  "pool": [
                    "create",
                    "delete",
                    "read",
                    "update"
                  ],
                  "rbd-image": [
                    "create",
                    "delete",
                    "read",
                    "update"
                  ],
                  "rbd-mirroring": [
                    "create",
                    "delete",
                    "read",
                    "update"
                  ],
                  "rgw": [
                    "create",
                    "delete",
                    "read",
                    "update"
                  ],
                  "user": [
                    "create",
                    "delete",
                    "read",
                    "update"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            },
            "x-examples": {
              "application/json": {
                "username": "admin",
                "password": "admin"
              }
            }
          }
        ],
        "description": "Log into the Ceph dashboard with username and password given.\nA token will be returned for further API request authorization.\n\n---\n\n通过输入用户名和密码进行ceph dashboard的首次登录。\n登录成功将返回一个token，用于之后的API请求验证。",
        "summary": "login | 登录",
        "operationId": "LOGIN"
      }
    },
    "/auth/logout": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "redirect_url": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "application/json": {
                "redirect_url": "#/login"
              }
            }
          }
        },
        "tags": [
          "auth"
        ],
        "operationId": "LOGOUT",
        "summary": "logout | 登出",
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "description": "Log out from the dashboard.\n\n---\n\n从dashboard中登出"
      }
    },
    "/monitor": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "mon_status": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "rank": {
                      "type": "integer"
                    },
                    "state": {
                      "type": "string"
                    },
                    "election_epoch": {
                      "type": "integer"
                    },
                    "quorum": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "quorum_age": {
                      "type": "integer"
                    },
                    "features": {
                      "type": "object",
                      "properties": {
                        "required_con": {
                          "type": "string"
                        },
                        "required_mon": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "quorum_con": {
                          "type": "string"
                        },
                        "quorum_mon": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "outside_quorum": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "extra_probe_peers": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "sync_provider": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "monmap": {
                      "type": "object",
                      "properties": {
                        "epoch": {
                          "type": "integer"
                        },
                        "fsid": {
                          "type": "string"
                        },
                        "modified": {
                          "type": "string"
                        },
                        "created": {
                          "type": "string"
                        },
                        "features": {
                          "type": "object",
                          "properties": {
                            "persistent": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "optional": {
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            }
                          }
                        },
                        "mons": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "rank": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "addr": {
                                "type": "string"
                              },
                              "public_addr": {
                                "type": "string"
                              },
                              "stats": {
                                "type": "object",
                                "properties": {
                                  "num_sessions": {
                                    "type": "array",
                                    "items": {
                                      "type": "integer"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "feature_map": {
                      "type": "object",
                      "properties": {
                        "mon": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "features": {
                                "type": "string"
                              },
                              "release": {
                                "type": "string"
                              },
                              "num": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "mds": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "features": {
                                "type": "string"
                              },
                              "release": {
                                "type": "string"
                              },
                              "num": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "osd": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "features": {
                                "type": "string"
                              },
                              "release": {
                                "type": "string"
                              },
                              "num": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "mgr": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "features": {
                                "type": "string"
                              },
                              "release": {
                                "type": "string"
                              },
                              "num": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "in_quorum": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "rank": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "addr": {
                        "type": "string"
                      },
                      "public_addr": {
                        "type": "string"
                      },
                      "stats": {
                        "type": "object",
                        "properties": {
                          "num_sessions": {
                            "type": "array",
                            "items": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "out_quorum": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "mon_status": {
                  "name": "c",
                  "rank": 2,
                  "state": "peon",
                  "election_epoch": 8,
                  "quorum": [
                    0,
                    1,
                    2
                  ],
                  "quorum_age": 2384,
                  "features": {
                    "required_con": "2449958747315912708",
                    "required_mon": [
                      "kraken",
                      "luminous",
                      "mimic",
                      "osdmap-prune",
                      "nautilus"
                    ],
                    "quorum_con": "4611087854031142911",
                    "quorum_mon": [
                      "kraken",
                      "luminous",
                      "mimic",
                      "osdmap-prune",
                      "nautilus"
                    ]
                  },
                  "outside_quorum": [],
                  "extra_probe_peers": [],
                  "sync_provider": [],
                  "monmap": {
                    "epoch": 1,
                    "fsid": "ad73d3de-7e62-4cc3-88d8-432dc7bb3fd1",
                    "modified": "2019-01-10 03:32:26.424076",
                    "created": "2019-01-10 03:32:26.424076",
                    "features": {
                      "persistent": [
                        "kraken",
                        "luminous",
                        "mimic",
                        "osdmap-prune",
                        "nautilus"
                      ],
                      "optional": []
                    },
                    "mons": [
                      {
                        "rank": 0,
                        "name": "a",
                        "addr": "147.2.214.230:40839/0",
                        "public_addr": "147.2.214.230:40839/0",
                        "stats": {
                          "num_sessions": [
                            [
                              1547093449,
                              6
                            ],
                            [
                              1547093454,
                              6
                            ],
                            [
                              1547093459,
                              6
                            ],
                            [
                              1547093464,
                              6
                            ],
                            [
                              1547093469,
                              6
                            ],
                            [
                              1547093474,
                              6
                            ],
                            [
                              1547093479,
                              6
                            ],
                            [
                              1547093484,
                              6
                            ],
                            [
                              1547093489,
                              6
                            ],
                            [
                              1547093494,
                              6
                            ],
                            [
                              1547093499,
                              6
                            ],
                            [
                              1547093504,
                              6
                            ],
                            [
                              1547093509,
                              6
                            ],
                            [
                              1547093514,
                              6
                            ],
                            [
                              1547093519,
                              6
                            ],
                            [
                              1547093524,
                              6
                            ],
                            [
                              1547093529,
                              6
                            ],
                            [
                              1547093534,
                              6
                            ],
                            [
                              1547093539,
                              6
                            ],
                            [
                              1547093544,
                              6
                            ]
                          ]
                        }
                      },
                      {
                        "rank": 1,
                        "name": "b",
                        "addr": "147.2.214.230:40840/0",
                        "public_addr": "147.2.214.230:40840/0",
                        "stats": {
                          "num_sessions": [
                            [
                              1547093449,
                              5
                            ],
                            [
                              1547093454,
                              5
                            ],
                            [
                              1547093459,
                              5
                            ],
                            [
                              1547093464,
                              5
                            ],
                            [
                              1547093469,
                              5
                            ],
                            [
                              1547093474,
                              5
                            ],
                            [
                              1547093479,
                              5
                            ],
                            [
                              1547093484,
                              5
                            ],
                            [
                              1547093489,
                              5
                            ],
                            [
                              1547093494,
                              5
                            ],
                            [
                              1547093499,
                              5
                            ],
                            [
                              1547093504,
                              5
                            ],
                            [
                              1547093509,
                              5
                            ],
                            [
                              1547093514,
                              5
                            ],
                            [
                              1547093519,
                              5
                            ],
                            [
                              1547093524,
                              5
                            ],
                            [
                              1547093529,
                              5
                            ],
                            [
                              1547093534,
                              5
                            ],
                            [
                              1547093539,
                              5
                            ],
                            [
                              1547093544,
                              5
                            ]
                          ]
                        }
                      },
                      {
                        "rank": 2,
                        "name": "c",
                        "addr": "147.2.214.230:40841/0",
                        "public_addr": "147.2.214.230:40841/0",
                        "stats": {
                          "num_sessions": [
                            [
                              1547093449,
                              7
                            ],
                            [
                              1547093454,
                              7
                            ],
                            [
                              1547093459,
                              7
                            ],
                            [
                              1547093464,
                              7
                            ],
                            [
                              1547093469,
                              7
                            ],
                            [
                              1547093474,
                              7
                            ],
                            [
                              1547093479,
                              7
                            ],
                            [
                              1547093484,
                              7
                            ],
                            [
                              1547093489,
                              7
                            ],
                            [
                              1547093494,
                              7
                            ],
                            [
                              1547093499,
                              7
                            ],
                            [
                              1547093504,
                              7
                            ],
                            [
                              1547093509,
                              7
                            ],
                            [
                              1547093514,
                              7
                            ],
                            [
                              1547093519,
                              7
                            ],
                            [
                              1547093524,
                              7
                            ],
                            [
                              1547093529,
                              7
                            ],
                            [
                              1547093534,
                              7
                            ],
                            [
                              1547093539,
                              7
                            ],
                            [
                              1547093544,
                              7
                            ]
                          ]
                        }
                      }
                    ]
                  },
                  "feature_map": {
                    "mon": [
                      {
                        "features": "0x3ffddff8ffa4ffff",
                        "release": "luminous",
                        "num": 1
                      }
                    ],
                    "mds": [
                      {
                        "features": "0x3ffddff8ffa4ffff",
                        "release": "luminous",
                        "num": 1
                      }
                    ],
                    "osd": [
                      {
                        "features": "0x3ffddff8ffa4ffff",
                        "release": "luminous",
                        "num": 2
                      }
                    ],
                    "mgr": [
                      {
                        "features": "0x3ffddff8ffa4ffff",
                        "release": "luminous",
                        "num": 1
                      }
                    ]
                  }
                },
                "in_quorum": [
                  {
                    "rank": 0,
                    "name": "a",
                    "addr": "147.2.214.230:40839/0",
                    "public_addr": "147.2.214.230:40839/0",
                    "stats": {
                      "num_sessions": [
                        [
                          1547093449,
                          6
                        ],
                        [
                          1547093454,
                          6
                        ],
                        [
                          1547093459,
                          6
                        ],
                        [
                          1547093464,
                          6
                        ],
                        [
                          1547093469,
                          6
                        ],
                        [
                          1547093474,
                          6
                        ],
                        [
                          1547093479,
                          6
                        ],
                        [
                          1547093484,
                          6
                        ],
                        [
                          1547093489,
                          6
                        ],
                        [
                          1547093494,
                          6
                        ],
                        [
                          1547093499,
                          6
                        ],
                        [
                          1547093504,
                          6
                        ],
                        [
                          1547093509,
                          6
                        ],
                        [
                          1547093514,
                          6
                        ],
                        [
                          1547093519,
                          6
                        ],
                        [
                          1547093524,
                          6
                        ],
                        [
                          1547093529,
                          6
                        ],
                        [
                          1547093534,
                          6
                        ],
                        [
                          1547093539,
                          6
                        ],
                        [
                          1547093544,
                          6
                        ]
                      ]
                    }
                  },
                  {
                    "rank": 1,
                    "name": "b",
                    "addr": "147.2.214.230:40840/0",
                    "public_addr": "147.2.214.230:40840/0",
                    "stats": {
                      "num_sessions": [
                        [
                          1547093449,
                          5
                        ],
                        [
                          1547093454,
                          5
                        ],
                        [
                          1547093459,
                          5
                        ],
                        [
                          1547093464,
                          5
                        ],
                        [
                          1547093469,
                          5
                        ],
                        [
                          1547093474,
                          5
                        ],
                        [
                          1547093479,
                          5
                        ],
                        [
                          1547093484,
                          5
                        ],
                        [
                          1547093489,
                          5
                        ],
                        [
                          1547093494,
                          5
                        ],
                        [
                          1547093499,
                          5
                        ],
                        [
                          1547093504,
                          5
                        ],
                        [
                          1547093509,
                          5
                        ],
                        [
                          1547093514,
                          5
                        ],
                        [
                          1547093519,
                          5
                        ],
                        [
                          1547093524,
                          5
                        ],
                        [
                          1547093529,
                          5
                        ],
                        [
                          1547093534,
                          5
                        ],
                        [
                          1547093539,
                          5
                        ],
                        [
                          1547093544,
                          5
                        ]
                      ]
                    }
                  },
                  {
                    "rank": 2,
                    "name": "c",
                    "addr": "147.2.214.230:40841/0",
                    "public_addr": "147.2.214.230:40841/0",
                    "stats": {
                      "num_sessions": [
                        [
                          1547093449,
                          7
                        ],
                        [
                          1547093454,
                          7
                        ],
                        [
                          1547093459,
                          7
                        ],
                        [
                          1547093464,
                          7
                        ],
                        [
                          1547093469,
                          7
                        ],
                        [
                          1547093474,
                          7
                        ],
                        [
                          1547093479,
                          7
                        ],
                        [
                          1547093484,
                          7
                        ],
                        [
                          1547093489,
                          7
                        ],
                        [
                          1547093494,
                          7
                        ],
                        [
                          1547093499,
                          7
                        ],
                        [
                          1547093504,
                          7
                        ],
                        [
                          1547093509,
                          7
                        ],
                        [
                          1547093514,
                          7
                        ],
                        [
                          1547093519,
                          7
                        ],
                        [
                          1547093524,
                          7
                        ],
                        [
                          1547093529,
                          7
                        ],
                        [
                          1547093534,
                          7
                        ],
                        [
                          1547093539,
                          7
                        ],
                        [
                          1547093544,
                          7
                        ]
                      ]
                    }
                  }
                ],
                "out_quorum": []
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "summary": "monitors info | ",
        "operationId": "MONITORS_INFO",
        "tags": [
          "monitor"
        ]
      }
    },
    "/host": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "hostname": {
                    "type": "string"
                  },
                  "services": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "ceph_version": {
                    "type": "string"
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "hostname": "ceph-dev",
                  "services": [
                    {
                      "type": "mds",
                      "id": "a"
                    },
                    {
                      "type": "mds",
                      "id": "b"
                    },
                    {
                      "type": "mds",
                      "id": "c"
                    },
                    {
                      "type": "mgr",
                      "id": "x"
                    },
                    {
                      "type": "mon",
                      "id": "a"
                    },
                    {
                      "type": "mon",
                      "id": "b"
                    },
                    {
                      "type": "mon",
                      "id": "c"
                    },
                    {
                      "type": "osd",
                      "id": "0"
                    },
                    {
                      "type": "osd",
                      "id": "1"
                    },
                    {
                      "type": "osd",
                      "id": "2"
                    },
                    {
                      "type": "rgw",
                      "id": "rgw"
                    }
                  ],
                  "ceph_version": "ceph version 14.0.1-2176-g41d266b9b9 (41d266b9b957e35f90c4844823d540791a948d1c) nautilus (dev)"
                }
              ]
            }
          }
        },
        "summary": "hosts info | 集群各节点信息",
        "operationId": "HOSTS_INFO",
        "tags": [
          "host"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/osd": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "osd": {
                    "type": "integer"
                  },
                  "up": {
                    "type": "integer"
                  },
                  "in": {
                    "type": "integer"
                  },
                  "weight": {
                    "type": "integer"
                  },
                  "primary_affinity": {
                    "type": "integer"
                  },
                  "last_clean_begin": {
                    "type": "integer"
                  },
                  "last_clean_end": {
                    "type": "integer"
                  },
                  "up_from": {
                    "type": "integer"
                  },
                  "up_thru": {
                    "type": "integer"
                  },
                  "down_at": {
                    "type": "integer"
                  },
                  "lost_at": {
                    "type": "integer"
                  },
                  "public_addrs": {
                    "type": "object",
                    "properties": {
                      "addrvec": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "nonce": {
                              "type": "integer"
                            },
                            "addr": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "cluster_addrs": {
                    "type": "object",
                    "properties": {
                      "addrvec": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "nonce": {
                              "type": "integer"
                            },
                            "addr": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "heartbeat_back_addrs": {
                    "type": "object",
                    "properties": {
                      "addrvec": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "nonce": {
                              "type": "integer"
                            },
                            "addr": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "heartbeat_front_addr": {
                    "type": "object",
                    "properties": {
                      "addrvec": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string"
                            },
                            "nonce": {
                              "type": "integer"
                            },
                            "addr": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  },
                  "state": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "uuid": {
                    "type": "string"
                  },
                  "public_addr": {
                    "type": "string"
                  },
                  "cluster_addr": {
                    "type": "string"
                  },
                  "id": {
                    "type": "integer"
                  },
                  "osd_stats": {
                    "type": "object",
                    "properties": {
                      "osd": {
                        "type": "integer"
                      },
                      "up_from": {
                        "type": "integer"
                      },
                      "seq": {
                        "type": "integer"
                      },
                      "num_pgs": {
                        "type": "integer"
                      },
                      "kb": {
                        "type": "integer"
                      },
                      "kb_used": {
                        "type": "integer"
                      },
                      "kb_used_data": {
                        "type": "integer"
                      },
                      "kb_used_omap": {
                        "type": "integer"
                      },
                      "kb_used_meta": {
                        "type": "integer"
                      },
                      "kb_avail": {
                        "type": "integer"
                      },
                      "statfs": {
                        "type": "object",
                        "properties": {
                          "total": {
                            "type": "integer"
                          },
                          "available": {
                            "type": "integer"
                          },
                          "internally_reserved": {
                            "type": "integer"
                          },
                          "allocated": {
                            "type": "integer"
                          },
                          "data_stored": {
                            "type": "integer"
                          },
                          "data_compressed": {
                            "type": "integer"
                          },
                          "data_compressed_allocated": {
                            "type": "integer"
                          },
                          "data_compressed_original": {
                            "type": "integer"
                          },
                          "omap_allocated": {
                            "type": "integer"
                          },
                          "internal_metadata": {
                            "type": "integer"
                          }
                        }
                      },
                      "hb_peers": {
                        "type": "array",
                        "items": {
                          "type": "integer"
                        }
                      },
                      "snap_trim_queue_len": {
                        "type": "integer"
                      },
                      "num_snap_trimming": {
                        "type": "integer"
                      },
                      "op_queue_age_hist": {
                        "type": "object",
                        "properties": {
                          "histogram": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          },
                          "upper_bound": {
                            "type": "integer"
                          }
                        }
                      },
                      "perf_stat": {
                        "type": "object",
                        "properties": {
                          "commit_latency_ms": {
                            "type": "integer"
                          },
                          "apply_latency_ms": {
                            "type": "integer"
                          },
                          "commit_latency_ns": {
                            "type": "integer"
                          },
                          "apply_latency_ns": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  },
                  "tree": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "device_class": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "type_id": {
                        "type": "integer"
                      },
                      "crush_weight": {
                        "type": "number"
                      },
                      "depth": {
                        "type": "integer"
                      },
                      "pool_weights": {
                        "type": "object"
                      },
                      "exists": {
                        "type": "integer"
                      },
                      "status": {
                        "type": "string"
                      },
                      "reweight": {
                        "type": "integer"
                      },
                      "primary_affinity": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      }
                    }
                  },
                  "host": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "name": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string"
                      },
                      "type_id": {
                        "type": "integer"
                      },
                      "pool_weights": {
                        "type": "object"
                      },
                      "children": {
                        "type": "array",
                        "items": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  "stats": {
                    "type": "object",
                    "properties": {
                      "op_w": {
                        "type": "integer"
                      },
                      "op_in_bytes": {
                        "type": "integer"
                      },
                      "op_r": {
                        "type": "number"
                      },
                      "op_out_bytes": {
                        "type": "integer"
                      },
                      "numpg": {
                        "type": "integer"
                      },
                      "stat_bytes": {
                        "type": "integer"
                      },
                      "stat_bytes_used": {
                        "type": "integer"
                      }
                    }
                  },
                  "stats_history": {
                    "type": "object",
                    "properties": {
                      "op_w": {
                        "type": "array",
                        "items": {
                          "type": "integer"
                        }
                      },
                      "op_in_bytes": {
                        "type": "array",
                        "items": {
                          "type": "integer"
                        }
                      },
                      "op_r": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      },
                      "op_out_bytes": {
                        "type": "array",
                        "items": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "osd": 0,
                  "up": 1,
                  "in": 1,
                  "weight": 1,
                  "primary_affinity": 1,
                  "last_clean_begin": 0,
                  "last_clean_end": 0,
                  "up_from": 5,
                  "up_thru": 21,
                  "down_at": 0,
                  "lost_at": 0,
                  "public_addrs": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 1324,
                        "addr": "147.2.214.230:6801"
                      }
                    ]
                  },
                  "cluster_addrs": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 1324,
                        "addr": "147.2.214.230:6802"
                      }
                    ]
                  },
                  "heartbeat_back_addrs": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 1324,
                        "addr": "147.2.214.230:6804"
                      }
                    ]
                  },
                  "heartbeat_front_addr": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 1324,
                        "addr": "147.2.214.230:6803"
                      }
                    ]
                  },
                  "state": [
                    "exists",
                    "up"
                  ],
                  "uuid": "19914905-23be-43b5-897e-4012ca7aebb8",
                  "public_addr": "147.2.214.230:6801/1324",
                  "cluster_addr": "147.2.214.230:6802/1324",
                  "id": 0,
                  "osd_stats": {
                    "osd": 0,
                    "up_from": 5,
                    "seq": 21474837002,
                    "num_pgs": 48,
                    "kb": 10551288,
                    "kb_used": 1119096,
                    "kb_used_data": 4864,
                    "kb_used_omap": 0,
                    "kb_used_meta": 1048576,
                    "kb_avail": 9432192,
                    "statfs": {
                      "total": 10804518912,
                      "available": 9658564608,
                      "internally_reserved": 1073741824,
                      "allocated": 4980736,
                      "data_stored": 70371,
                      "data_compressed": 0,
                      "data_compressed_allocated": 0,
                      "data_compressed_original": 0,
                      "omap_allocated": 0,
                      "internal_metadata": 1073741824
                    },
                    "hb_peers": [
                      1,
                      2
                    ],
                    "snap_trim_queue_len": 0,
                    "num_snap_trimming": 0,
                    "op_queue_age_hist": {
                      "histogram": [],
                      "upper_bound": 1
                    },
                    "perf_stat": {
                      "commit_latency_ms": 0,
                      "apply_latency_ms": 0,
                      "commit_latency_ns": 0,
                      "apply_latency_ns": 0
                    }
                  },
                  "tree": {
                    "id": 0,
                    "device_class": "hdd",
                    "type": "osd",
                    "type_id": 0,
                    "crush_weight": 0.009796142578125,
                    "depth": 2,
                    "pool_weights": {},
                    "exists": 1,
                    "status": "up",
                    "reweight": 1,
                    "primary_affinity": 1,
                    "name": "osd.0"
                  },
                  "host": {
                    "id": -3,
                    "name": "ceph-dev",
                    "type": "host",
                    "type_id": 1,
                    "pool_weights": {},
                    "children": [
                      2,
                      1,
                      0
                    ]
                  },
                  "stats": {
                    "op_w": 0,
                    "op_in_bytes": 0,
                    "op_r": 0.6,
                    "op_out_bytes": 0,
                    "numpg": 48,
                    "stat_bytes": 10804518912,
                    "stat_bytes_used": 1145954304
                  },
                  "stats_history": {
                    "op_w": [
                      [
                        1547093685,
                        0
                      ],
                      [
                        1547093690,
                        0
                      ],
                      [
                        1547093695,
                        0
                      ],
                      [
                        1547093700,
                        0
                      ],
                      [
                        1547093705,
                        0
                      ],
                      [
                        1547093710,
                        0
                      ],
                      [
                        1547093715,
                        0
                      ],
                      [
                        1547093720,
                        0
                      ],
                      [
                        1547093725,
                        0
                      ],
                      [
                        1547093730,
                        0
                      ],
                      [
                        1547093735,
                        0
                      ],
                      [
                        1547093740,
                        0
                      ],
                      [
                        1547093745,
                        0
                      ],
                      [
                        1547093750,
                        0
                      ],
                      [
                        1547093755,
                        0
                      ],
                      [
                        1547093760,
                        0
                      ],
                      [
                        1547093765,
                        0
                      ],
                      [
                        1547093770,
                        0
                      ],
                      [
                        1547093775,
                        0
                      ]
                    ],
                    "op_in_bytes": [
                      [
                        1547093685,
                        0
                      ],
                      [
                        1547093690,
                        0
                      ],
                      [
                        1547093695,
                        0
                      ],
                      [
                        1547093700,
                        0
                      ],
                      [
                        1547093705,
                        0
                      ],
                      [
                        1547093710,
                        0
                      ],
                      [
                        1547093715,
                        0
                      ],
                      [
                        1547093720,
                        0
                      ],
                      [
                        1547093725,
                        0
                      ],
                      [
                        1547093730,
                        0
                      ],
                      [
                        1547093735,
                        0
                      ],
                      [
                        1547093740,
                        0
                      ],
                      [
                        1547093745,
                        0
                      ],
                      [
                        1547093750,
                        0
                      ],
                      [
                        1547093755,
                        0
                      ],
                      [
                        1547093760,
                        0
                      ],
                      [
                        1547093765,
                        0
                      ],
                      [
                        1547093770,
                        0
                      ],
                      [
                        1547093775,
                        0
                      ]
                    ],
                    "op_r": [
                      [
                        1547093685,
                        0.6
                      ],
                      [
                        1547093690,
                        0.6
                      ],
                      [
                        1547093695,
                        0.6
                      ],
                      [
                        1547093700,
                        0.6
                      ],
                      [
                        1547093705,
                        0.6
                      ],
                      [
                        1547093710,
                        0.6
                      ],
                      [
                        1547093715,
                        0.6
                      ],
                      [
                        1547093720,
                        0.6
                      ],
                      [
                        1547093725,
                        0.6
                      ],
                      [
                        1547093730,
                        0.6
                      ],
                      [
                        1547093735,
                        0.6
                      ],
                      [
                        1547093740,
                        0.6
                      ],
                      [
                        1547093745,
                        0.6
                      ],
                      [
                        1547093750,
                        0.6
                      ],
                      [
                        1547093755,
                        0.6
                      ],
                      [
                        1547093760,
                        0.6
                      ],
                      [
                        1547093765,
                        0.6
                      ],
                      [
                        1547093770,
                        0.6
                      ],
                      [
                        1547093775,
                        0.6
                      ]
                    ],
                    "op_out_bytes": [
                      [
                        1547093685,
                        0
                      ],
                      [
                        1547093690,
                        0
                      ],
                      [
                        1547093695,
                        0
                      ],
                      [
                        1547093700,
                        0
                      ],
                      [
                        1547093705,
                        0
                      ],
                      [
                        1547093710,
                        0
                      ],
                      [
                        1547093715,
                        0
                      ],
                      [
                        1547093720,
                        0
                      ],
                      [
                        1547093725,
                        0
                      ],
                      [
                        1547093730,
                        0
                      ],
                      [
                        1547093735,
                        0
                      ],
                      [
                        1547093740,
                        0
                      ],
                      [
                        1547093745,
                        0
                      ],
                      [
                        1547093750,
                        0
                      ],
                      [
                        1547093755,
                        0
                      ],
                      [
                        1547093760,
                        0
                      ],
                      [
                        1547093765,
                        0
                      ],
                      [
                        1547093770,
                        0
                      ],
                      [
                        1547093775,
                        0
                      ]
                    ]
                  }
                },
                {
                  "osd": 1,
                  "up": 1,
                  "in": 1,
                  "weight": 1,
                  "primary_affinity": 1,
                  "last_clean_begin": 0,
                  "last_clean_end": 0,
                  "up_from": 8,
                  "up_thru": 21,
                  "down_at": 0,
                  "lost_at": 0,
                  "public_addrs": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 1633,
                        "addr": "147.2.214.230:6805"
                      }
                    ]
                  },
                  "cluster_addrs": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 1633,
                        "addr": "147.2.214.230:6806"
                      }
                    ]
                  },
                  "heartbeat_back_addrs": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 1633,
                        "addr": "147.2.214.230:6808"
                      }
                    ]
                  },
                  "heartbeat_front_addr": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 1633,
                        "addr": "147.2.214.230:6807"
                      }
                    ]
                  },
                  "state": [
                    "exists",
                    "up"
                  ],
                  "uuid": "b6a2c41c-ca19-4883-a980-9abe348f1bcf",
                  "public_addr": "147.2.214.230:6805/1633",
                  "cluster_addr": "147.2.214.230:6806/1633",
                  "id": 1,
                  "osd_stats": {
                    "osd": 1,
                    "up_from": 8,
                    "seq": 34359738889,
                    "num_pgs": 48,
                    "kb": 10551288,
                    "kb_used": 1119096,
                    "kb_used_data": 4864,
                    "kb_used_omap": 0,
                    "kb_used_meta": 1048576,
                    "kb_avail": 9432192,
                    "statfs": {
                      "total": 10804518912,
                      "available": 9658564608,
                      "internally_reserved": 1073741824,
                      "allocated": 4980736,
                      "data_stored": 70371,
                      "data_compressed": 0,
                      "data_compressed_allocated": 0,
                      "data_compressed_original": 0,
                      "omap_allocated": 0,
                      "internal_metadata": 1073741824
                    },
                    "hb_peers": [
                      0,
                      2
                    ],
                    "snap_trim_queue_len": 0,
                    "num_snap_trimming": 0,
                    "op_queue_age_hist": {
                      "histogram": [],
                      "upper_bound": 1
                    },
                    "perf_stat": {
                      "commit_latency_ms": 0,
                      "apply_latency_ms": 0,
                      "commit_latency_ns": 0,
                      "apply_latency_ns": 0
                    }
                  },
                  "tree": {
                    "id": 1,
                    "device_class": "hdd",
                    "type": "osd",
                    "type_id": 0,
                    "crush_weight": 0.009796142578125,
                    "depth": 2,
                    "pool_weights": {},
                    "exists": 1,
                    "status": "up",
                    "reweight": 1,
                    "primary_affinity": 1,
                    "name": "osd.1"
                  },
                  "host": {
                    "id": -3,
                    "name": "ceph-dev",
                    "type": "host",
                    "type_id": 1,
                    "pool_weights": {},
                    "children": [
                      2,
                      1,
                      0
                    ]
                  },
                  "stats": {
                    "op_w": 0,
                    "op_in_bytes": 0,
                    "op_r": 0.8,
                    "op_out_bytes": 0,
                    "numpg": 48,
                    "stat_bytes": 10804518912,
                    "stat_bytes_used": 1145954304
                  },
                  "stats_history": {
                    "op_w": [
                      [
                        1547093688,
                        0
                      ],
                      [
                        1547093693,
                        0
                      ],
                      [
                        1547093698,
                        0
                      ],
                      [
                        1547093703,
                        0
                      ],
                      [
                        1547093708,
                        0
                      ],
                      [
                        1547093713,
                        0
                      ],
                      [
                        1547093718,
                        0
                      ],
                      [
                        1547093723,
                        0
                      ],
                      [
                        1547093728,
                        0
                      ],
                      [
                        1547093733,
                        0
                      ],
                      [
                        1547093738,
                        0
                      ],
                      [
                        1547093743,
                        0
                      ],
                      [
                        1547093748,
                        0
                      ],
                      [
                        1547093753,
                        0
                      ],
                      [
                        1547093758,
                        0
                      ],
                      [
                        1547093763,
                        0
                      ],
                      [
                        1547093768,
                        0
                      ],
                      [
                        1547093773,
                        0
                      ],
                      [
                        1547093778,
                        0
                      ]
                    ],
                    "op_in_bytes": [
                      [
                        1547093688,
                        0
                      ],
                      [
                        1547093693,
                        0
                      ],
                      [
                        1547093698,
                        0
                      ],
                      [
                        1547093703,
                        0
                      ],
                      [
                        1547093708,
                        0
                      ],
                      [
                        1547093713,
                        0
                      ],
                      [
                        1547093718,
                        0
                      ],
                      [
                        1547093723,
                        0
                      ],
                      [
                        1547093728,
                        0
                      ],
                      [
                        1547093733,
                        0
                      ],
                      [
                        1547093738,
                        0
                      ],
                      [
                        1547093743,
                        0
                      ],
                      [
                        1547093748,
                        0
                      ],
                      [
                        1547093753,
                        0
                      ],
                      [
                        1547093758,
                        0
                      ],
                      [
                        1547093763,
                        0
                      ],
                      [
                        1547093768,
                        0
                      ],
                      [
                        1547093773,
                        0
                      ],
                      [
                        1547093778,
                        0
                      ]
                    ],
                    "op_r": [
                      [
                        1547093688,
                        0.8
                      ],
                      [
                        1547093693,
                        0.8
                      ],
                      [
                        1547093698,
                        0.8
                      ],
                      [
                        1547093703,
                        0.8
                      ],
                      [
                        1547093708,
                        0.8
                      ],
                      [
                        1547093713,
                        0.8
                      ],
                      [
                        1547093718,
                        0.8
                      ],
                      [
                        1547093723,
                        0.8
                      ],
                      [
                        1547093728,
                        0.8
                      ],
                      [
                        1547093733,
                        0.8
                      ],
                      [
                        1547093738,
                        0.8
                      ],
                      [
                        1547093743,
                        0.8
                      ],
                      [
                        1547093748,
                        0.8
                      ],
                      [
                        1547093753,
                        0.8
                      ],
                      [
                        1547093758,
                        0.8
                      ],
                      [
                        1547093763,
                        0.8
                      ],
                      [
                        1547093768,
                        0.8
                      ],
                      [
                        1547093773,
                        0.8
                      ],
                      [
                        1547093778,
                        0.8
                      ]
                    ],
                    "op_out_bytes": [
                      [
                        1547093688,
                        0
                      ],
                      [
                        1547093693,
                        0
                      ],
                      [
                        1547093698,
                        0
                      ],
                      [
                        1547093703,
                        0
                      ],
                      [
                        1547093708,
                        0
                      ],
                      [
                        1547093713,
                        0
                      ],
                      [
                        1547093718,
                        0
                      ],
                      [
                        1547093723,
                        0
                      ],
                      [
                        1547093728,
                        0
                      ],
                      [
                        1547093733,
                        0
                      ],
                      [
                        1547093738,
                        0
                      ],
                      [
                        1547093743,
                        0
                      ],
                      [
                        1547093748,
                        0
                      ],
                      [
                        1547093753,
                        0
                      ],
                      [
                        1547093758,
                        0
                      ],
                      [
                        1547093763,
                        0
                      ],
                      [
                        1547093768,
                        0
                      ],
                      [
                        1547093773,
                        0
                      ],
                      [
                        1547093778,
                        0
                      ]
                    ]
                  }
                },
                {
                  "osd": 2,
                  "up": 1,
                  "in": 1,
                  "weight": 1,
                  "primary_affinity": 1,
                  "last_clean_begin": 0,
                  "last_clean_end": 0,
                  "up_from": 11,
                  "up_thru": 19,
                  "down_at": 0,
                  "lost_at": 0,
                  "public_addrs": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 1942,
                        "addr": "147.2.214.230:6809"
                      }
                    ]
                  },
                  "cluster_addrs": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 1942,
                        "addr": "147.2.214.230:6810"
                      }
                    ]
                  },
                  "heartbeat_back_addrs": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 1942,
                        "addr": "147.2.214.230:6812"
                      }
                    ]
                  },
                  "heartbeat_front_addr": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 1942,
                        "addr": "147.2.214.230:6811"
                      }
                    ]
                  },
                  "state": [
                    "exists",
                    "up"
                  ],
                  "uuid": "a063ad39-c36b-49f6-a008-54f4f6be8830",
                  "public_addr": "147.2.214.230:6809/1942",
                  "cluster_addr": "147.2.214.230:6810/1942",
                  "id": 2,
                  "osd_stats": {
                    "osd": 2,
                    "up_from": 11,
                    "seq": 47244640776,
                    "num_pgs": 48,
                    "kb": 10551288,
                    "kb_used": 1119096,
                    "kb_used_data": 4864,
                    "kb_used_omap": 0,
                    "kb_used_meta": 1048576,
                    "kb_avail": 9432192,
                    "statfs": {
                      "total": 10804518912,
                      "available": 9658564608,
                      "internally_reserved": 1073741824,
                      "allocated": 4980736,
                      "data_stored": 70371,
                      "data_compressed": 0,
                      "data_compressed_allocated": 0,
                      "data_compressed_original": 0,
                      "omap_allocated": 0,
                      "internal_metadata": 1073741824
                    },
                    "hb_peers": [
                      0,
                      1
                    ],
                    "snap_trim_queue_len": 0,
                    "num_snap_trimming": 0,
                    "op_queue_age_hist": {
                      "histogram": [],
                      "upper_bound": 1
                    },
                    "perf_stat": {
                      "commit_latency_ms": 0,
                      "apply_latency_ms": 0,
                      "commit_latency_ns": 0,
                      "apply_latency_ns": 0
                    }
                  },
                  "tree": {
                    "id": 2,
                    "device_class": "hdd",
                    "type": "osd",
                    "type_id": 0,
                    "crush_weight": 0.009796142578125,
                    "depth": 2,
                    "pool_weights": {},
                    "exists": 1,
                    "status": "up",
                    "reweight": 1,
                    "primary_affinity": 1,
                    "name": "osd.2"
                  },
                  "host": {
                    "id": -3,
                    "name": "ceph-dev",
                    "type": "host",
                    "type_id": 1,
                    "pool_weights": {},
                    "children": [
                      2,
                      1,
                      0
                    ]
                  },
                  "stats": {
                    "op_w": 0,
                    "op_in_bytes": 0,
                    "op_r": 0.2,
                    "op_out_bytes": 0,
                    "numpg": 48,
                    "stat_bytes": 10804518912,
                    "stat_bytes_used": 1145954304
                  },
                  "stats_history": {
                    "op_w": [
                      [
                        1547093687,
                        0
                      ],
                      [
                        1547093692,
                        0
                      ],
                      [
                        1547093697,
                        0
                      ],
                      [
                        1547093702,
                        0
                      ],
                      [
                        1547093707,
                        0
                      ],
                      [
                        1547093712,
                        0
                      ],
                      [
                        1547093717,
                        0
                      ],
                      [
                        1547093722,
                        0
                      ],
                      [
                        1547093727,
                        0
                      ],
                      [
                        1547093732,
                        0
                      ],
                      [
                        1547093737,
                        0
                      ],
                      [
                        1547093742,
                        0
                      ],
                      [
                        1547093747,
                        0
                      ],
                      [
                        1547093752,
                        0
                      ],
                      [
                        1547093757,
                        0
                      ],
                      [
                        1547093762,
                        0
                      ],
                      [
                        1547093767,
                        0
                      ],
                      [
                        1547093772,
                        0
                      ],
                      [
                        1547093777,
                        0
                      ]
                    ],
                    "op_in_bytes": [
                      [
                        1547093687,
                        0
                      ],
                      [
                        1547093692,
                        0
                      ],
                      [
                        1547093697,
                        0
                      ],
                      [
                        1547093702,
                        0
                      ],
                      [
                        1547093707,
                        0
                      ],
                      [
                        1547093712,
                        0
                      ],
                      [
                        1547093717,
                        0
                      ],
                      [
                        1547093722,
                        0
                      ],
                      [
                        1547093727,
                        0
                      ],
                      [
                        1547093732,
                        0
                      ],
                      [
                        1547093737,
                        0
                      ],
                      [
                        1547093742,
                        0
                      ],
                      [
                        1547093747,
                        0
                      ],
                      [
                        1547093752,
                        0
                      ],
                      [
                        1547093757,
                        0
                      ],
                      [
                        1547093762,
                        0
                      ],
                      [
                        1547093767,
                        0
                      ],
                      [
                        1547093772,
                        0
                      ],
                      [
                        1547093777,
                        0
                      ]
                    ],
                    "op_r": [
                      [
                        1547093687,
                        0.2
                      ],
                      [
                        1547093692,
                        0.2
                      ],
                      [
                        1547093697,
                        0.2
                      ],
                      [
                        1547093702,
                        0.2
                      ],
                      [
                        1547093707,
                        0.2
                      ],
                      [
                        1547093712,
                        0.2
                      ],
                      [
                        1547093717,
                        0.2
                      ],
                      [
                        1547093722,
                        0.2
                      ],
                      [
                        1547093727,
                        0.2
                      ],
                      [
                        1547093732,
                        0.2
                      ],
                      [
                        1547093737,
                        0.2
                      ],
                      [
                        1547093742,
                        0.2
                      ],
                      [
                        1547093747,
                        0.2
                      ],
                      [
                        1547093752,
                        0.2
                      ],
                      [
                        1547093757,
                        0.2
                      ],
                      [
                        1547093762,
                        0.2
                      ],
                      [
                        1547093767,
                        0.2
                      ],
                      [
                        1547093772,
                        0.2
                      ],
                      [
                        1547093777,
                        0.2
                      ]
                    ],
                    "op_out_bytes": [
                      [
                        1547093687,
                        0
                      ],
                      [
                        1547093692,
                        0
                      ],
                      [
                        1547093697,
                        0
                      ],
                      [
                        1547093702,
                        0
                      ],
                      [
                        1547093707,
                        0
                      ],
                      [
                        1547093712,
                        0
                      ],
                      [
                        1547093717,
                        0
                      ],
                      [
                        1547093722,
                        0
                      ],
                      [
                        1547093727,
                        0
                      ],
                      [
                        1547093732,
                        0
                      ],
                      [
                        1547093737,
                        0
                      ],
                      [
                        1547093742,
                        0
                      ],
                      [
                        1547093747,
                        0
                      ],
                      [
                        1547093752,
                        0
                      ],
                      [
                        1547093757,
                        0
                      ],
                      [
                        1547093762,
                        0
                      ],
                      [
                        1547093767,
                        0
                      ],
                      [
                        1547093772,
                        0
                      ],
                      [
                        1547093777,
                        0
                      ]
                    ]
                  }
                }
              ]
            }
          }
        },
        "summary": "OSDs info | 查看所有对象存储区",
        "operationId": "OSD_INFO",
        "tags": [
          "osd"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/osd/{osd_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "osd_map": {
                  "type": "object",
                  "properties": {
                    "osd": {
                      "type": "integer"
                    },
                    "up": {
                      "type": "integer"
                    },
                    "in": {
                      "type": "integer"
                    },
                    "weight": {
                      "type": "integer"
                    },
                    "primary_affinity": {
                      "type": "integer"
                    },
                    "last_clean_begin": {
                      "type": "integer"
                    },
                    "last_clean_end": {
                      "type": "integer"
                    },
                    "up_from": {
                      "type": "integer"
                    },
                    "up_thru": {
                      "type": "integer"
                    },
                    "down_at": {
                      "type": "integer"
                    },
                    "lost_at": {
                      "type": "integer"
                    },
                    "public_addrs": {
                      "type": "object",
                      "properties": {
                        "addrvec": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "nonce": {
                                "type": "integer"
                              },
                              "addr": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "cluster_addrs": {
                      "type": "object",
                      "properties": {
                        "addrvec": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "nonce": {
                                "type": "integer"
                              },
                              "addr": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "heartbeat_back_addrs": {
                      "type": "object",
                      "properties": {
                        "addrvec": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "nonce": {
                                "type": "integer"
                              },
                              "addr": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "heartbeat_front_addr": {
                      "type": "object",
                      "properties": {
                        "addrvec": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "nonce": {
                                "type": "integer"
                              },
                              "addr": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "state": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "uuid": {
                      "type": "string"
                    },
                    "public_addr": {
                      "type": "string"
                    },
                    "cluster_addr": {
                      "type": "string"
                    },
                    "id": {
                      "type": "integer"
                    }
                  }
                },
                "osd_metadata": {
                  "type": "object",
                  "properties": {
                    "hostname": {
                      "type": "string"
                    },
                    "arch": {
                      "type": "string"
                    },
                    "back_addr": {
                      "type": "string"
                    },
                    "back_iface": {
                      "type": "string"
                    },
                    "bluefs": {
                      "type": "string"
                    },
                    "bluefs_db_access_mode": {
                      "type": "string"
                    },
                    "bluefs_db_block_size": {
                      "type": "string"
                    },
                    "bluefs_db_driver": {
                      "type": "string"
                    },
                    "bluefs_db_path": {
                      "type": "string"
                    },
                    "bluefs_db_rotational": {
                      "type": "string"
                    },
                    "bluefs_db_size": {
                      "type": "string"
                    },
                    "bluefs_db_support_discard": {
                      "type": "string"
                    },
                    "bluefs_db_type": {
                      "type": "string"
                    },
                    "bluefs_single_shared_device": {
                      "type": "string"
                    },
                    "bluefs_wal_access_mode": {
                      "type": "string"
                    },
                    "bluefs_wal_block_size": {
                      "type": "string"
                    },
                    "bluefs_wal_driver": {
                      "type": "string"
                    },
                    "bluefs_wal_path": {
                      "type": "string"
                    },
                    "bluefs_wal_rotational": {
                      "type": "string"
                    },
                    "bluefs_wal_size": {
                      "type": "string"
                    },
                    "bluefs_wal_support_discard": {
                      "type": "string"
                    },
                    "bluefs_wal_type": {
                      "type": "string"
                    },
                    "bluestore_bdev_access_mode": {
                      "type": "string"
                    },
                    "bluestore_bdev_block_size": {
                      "type": "string"
                    },
                    "bluestore_bdev_driver": {
                      "type": "string"
                    },
                    "bluestore_bdev_path": {
                      "type": "string"
                    },
                    "bluestore_bdev_rotational": {
                      "type": "string"
                    },
                    "bluestore_bdev_size": {
                      "type": "string"
                    },
                    "bluestore_bdev_support_discard": {
                      "type": "string"
                    },
                    "bluestore_bdev_type": {
                      "type": "string"
                    },
                    "ceph_release": {
                      "type": "string"
                    },
                    "ceph_version": {
                      "type": "string"
                    },
                    "ceph_version_short": {
                      "type": "string"
                    },
                    "cpu": {
                      "type": "string"
                    },
                    "default_device_class": {
                      "type": "string"
                    },
                    "device_ids": {
                      "type": "string"
                    },
                    "devices": {
                      "type": "string"
                    },
                    "distro": {
                      "type": "string"
                    },
                    "distro_description": {
                      "type": "string"
                    },
                    "distro_version": {
                      "type": "string"
                    },
                    "front_addr": {
                      "type": "string"
                    },
                    "front_iface": {
                      "type": "string"
                    },
                    "hb_back_addr": {
                      "type": "string"
                    },
                    "hb_front_addr": {
                      "type": "string"
                    },
                    "journal_rotational": {
                      "type": "string"
                    },
                    "kernel_description": {
                      "type": "string"
                    },
                    "kernel_version": {
                      "type": "string"
                    },
                    "mem_swap_kb": {
                      "type": "string"
                    },
                    "mem_total_kb": {
                      "type": "string"
                    },
                    "os": {
                      "type": "string"
                    },
                    "osd_data": {
                      "type": "string"
                    },
                    "osd_objectstore": {
                      "type": "string"
                    },
                    "rotational": {
                      "type": "string"
                    }
                  }
                },
                "histogram": {
                  "type": "object",
                  "properties": {
                    "AsyncMessenger::Worker-0": {
                      "type": "object"
                    },
                    "AsyncMessenger::Worker-1": {
                      "type": "object"
                    },
                    "AsyncMessenger::Worker-2": {
                      "type": "object"
                    },
                    "bluefs": {
                      "type": "object"
                    },
                    "bluestore": {
                      "type": "object"
                    },
                    "cct": {
                      "type": "object"
                    },
                    "finisher-commit_finisher": {
                      "type": "object"
                    },
                    "finisher-defered_finisher": {
                      "type": "object"
                    },
                    "finisher-objecter-finisher-0": {
                      "type": "object"
                    },
                    "mempool": {
                      "type": "object"
                    },
                    "objecter": {
                      "type": "object"
                    },
                    "osd": {
                      "type": "object",
                      "properties": {
                        "op_r_latency_out_bytes_histogram": {
                          "type": "object",
                          "properties": {
                            "axes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "min": {
                                    "type": "integer"
                                  },
                                  "quant_size": {
                                    "type": "integer"
                                  },
                                  "buckets": {
                                    "type": "integer"
                                  },
                                  "scale_type": {
                                    "type": "string"
                                  },
                                  "ranges": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "max": {
                                          "type": "integer"
                                        },
                                        "min": {
                                          "type": "integer"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "values": {
                              "type": "array",
                              "items": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "op_w_latency_in_bytes_histogram": {
                          "type": "object",
                          "properties": {
                            "axes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "min": {
                                    "type": "integer"
                                  },
                                  "quant_size": {
                                    "type": "integer"
                                  },
                                  "buckets": {
                                    "type": "integer"
                                  },
                                  "scale_type": {
                                    "type": "string"
                                  },
                                  "ranges": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "max": {
                                          "type": "integer"
                                        },
                                        "min": {
                                          "type": "integer"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "values": {
                              "type": "array",
                              "items": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "op_rw_latency_in_bytes_histogram": {
                          "type": "object",
                          "properties": {
                            "axes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "min": {
                                    "type": "integer"
                                  },
                                  "quant_size": {
                                    "type": "integer"
                                  },
                                  "buckets": {
                                    "type": "integer"
                                  },
                                  "scale_type": {
                                    "type": "string"
                                  },
                                  "ranges": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "max": {
                                          "type": "integer"
                                        },
                                        "min": {
                                          "type": "integer"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "values": {
                              "type": "array",
                              "items": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "op_rw_latency_out_bytes_histogram": {
                          "type": "object",
                          "properties": {
                            "axes": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "min": {
                                    "type": "integer"
                                  },
                                  "quant_size": {
                                    "type": "integer"
                                  },
                                  "buckets": {
                                    "type": "integer"
                                  },
                                  "scale_type": {
                                    "type": "string"
                                  },
                                  "ranges": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "max": {
                                          "type": "integer"
                                        },
                                        "min": {
                                          "type": "integer"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "values": {
                              "type": "array",
                              "items": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    },
                    "recoverystate_perf": {
                      "type": "object"
                    },
                    "rocksdb": {
                      "type": "object"
                    },
                    "throttle-bluestore_throttle_bytes": {
                      "type": "object"
                    },
                    "throttle-bluestore_throttle_deferred_bytes": {
                      "type": "object"
                    },
                    "throttle-msgr_dispatch_throttler-client": {
                      "type": "object"
                    },
                    "throttle-msgr_dispatch_throttler-cluster": {
                      "type": "object"
                    },
                    "throttle-msgr_dispatch_throttler-hb_back_client": {
                      "type": "object"
                    },
                    "throttle-msgr_dispatch_throttler-hb_back_server": {
                      "type": "object"
                    },
                    "throttle-msgr_dispatch_throttler-hb_front_client": {
                      "type": "object"
                    },
                    "throttle-msgr_dispatch_throttler-hb_front_server": {
                      "type": "object"
                    },
                    "throttle-msgr_dispatch_throttler-ms_objecter": {
                      "type": "object"
                    },
                    "throttle-objecter_bytes": {
                      "type": "object"
                    },
                    "throttle-objecter_ops": {
                      "type": "object"
                    },
                    "throttle-osd_client_bytes": {
                      "type": "object"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "osd_map": {
                  "osd": 0,
                  "up": 1,
                  "in": 1,
                  "weight": 1,
                  "primary_affinity": 1,
                  "last_clean_begin": 0,
                  "last_clean_end": 0,
                  "up_from": 5,
                  "up_thru": 21,
                  "down_at": 0,
                  "lost_at": 0,
                  "public_addrs": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 1324,
                        "addr": "147.2.214.230:6801"
                      }
                    ]
                  },
                  "cluster_addrs": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 1324,
                        "addr": "147.2.214.230:6802"
                      }
                    ]
                  },
                  "heartbeat_back_addrs": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 1324,
                        "addr": "147.2.214.230:6804"
                      }
                    ]
                  },
                  "heartbeat_front_addr": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 1324,
                        "addr": "147.2.214.230:6803"
                      }
                    ]
                  },
                  "state": [
                    "exists",
                    "up"
                  ],
                  "uuid": "19914905-23be-43b5-897e-4012ca7aebb8",
                  "public_addr": "147.2.214.230:6801/1324",
                  "cluster_addr": "147.2.214.230:6802/1324",
                  "id": 0
                },
                "osd_metadata": {
                  "hostname": "ceph-dev",
                  "arch": "x86_64",
                  "back_addr": "147.2.214.230:6802/1324",
                  "back_iface": "eth0",
                  "bluefs": "1",
                  "bluefs_db_access_mode": "file",
                  "bluefs_db_block_size": "4096",
                  "bluefs_db_driver": "KernelDevice",
                  "bluefs_db_path": "/ceph/build/dev/osd0/block.db",
                  "bluefs_db_rotational": "1",
                  "bluefs_db_size": "67108864",
                  "bluefs_db_support_discard": "0",
                  "bluefs_db_type": "hdd",
                  "bluefs_single_shared_device": "0",
                  "bluefs_wal_access_mode": "file",
                  "bluefs_wal_block_size": "4096",
                  "bluefs_wal_driver": "KernelDevice",
                  "bluefs_wal_path": "/ceph/build/dev/osd0/block.wal",
                  "bluefs_wal_rotational": "1",
                  "bluefs_wal_size": "1048576000",
                  "bluefs_wal_support_discard": "0",
                  "bluefs_wal_type": "hdd",
                  "bluestore_bdev_access_mode": "file",
                  "bluestore_bdev_block_size": "4096",
                  "bluestore_bdev_driver": "KernelDevice",
                  "bluestore_bdev_path": "/ceph/build/dev/osd0/block",
                  "bluestore_bdev_rotational": "1",
                  "bluestore_bdev_size": "10737418240",
                  "bluestore_bdev_support_discard": "0",
                  "bluestore_bdev_type": "hdd",
                  "ceph_release": "nautilus",
                  "ceph_version": "ceph version 14.0.1-2176-g41d266b9b9 (41d266b9b957e35f90c4844823d540791a948d1c) nautilus (dev)",
                  "ceph_version_short": "14.0.1-2176-g41d266b9b9",
                  "cpu": "Intel(R) Core(TM) i5-5200U CPU @ 2.20GHz",
                  "default_device_class": "hdd",
                  "device_ids": "",
                  "devices": "",
                  "distro": "opensuse-tumbleweed",
                  "distro_description": "openSUSE Tumbleweed",
                  "distro_version": "20181224",
                  "front_addr": "147.2.214.230:6801/1324",
                  "front_iface": "eth0",
                  "hb_back_addr": "147.2.214.230:6804/1324",
                  "hb_front_addr": "147.2.214.230:6803/1324",
                  "journal_rotational": "1",
                  "kernel_description": "#1 SMP Mon Dec 3 16:46:15 UTC 2018 (b91289f)",
                  "kernel_version": "4.12.14-lp150.12.28-default",
                  "mem_swap_kb": "0",
                  "mem_total_kb": "11982896",
                  "os": "Linux",
                  "osd_data": "/ceph/build/dev/osd0",
                  "osd_objectstore": "bluestore",
                  "rotational": "1"
                },
                "histogram": {
                  "AsyncMessenger::Worker-0": {},
                  "AsyncMessenger::Worker-1": {},
                  "AsyncMessenger::Worker-2": {},
                  "bluefs": {},
                  "bluestore": {},
                  "cct": {},
                  "finisher-commit_finisher": {},
                  "finisher-defered_finisher": {},
                  "finisher-objecter-finisher-0": {},
                  "mempool": {},
                  "objecter": {},
                  "osd": {
                    "op_r_latency_out_bytes_histogram": {
                      "axes": [
                        {
                          "name": "Latency (usec)",
                          "min": 0,
                          "quant_size": 100000,
                          "buckets": 32,
                          "scale_type": "log2",
                          "ranges": [
                            {
                              "max": -1
                            },
                            {
                              "min": 0,
                              "max": 99999
                            },
                            {
                              "min": 100000,
                              "max": 199999
                            },
                            {
                              "min": 200000,
                              "max": 399999
                            },
                            {
                              "min": 400000,
                              "max": 799999
                            },
                            {
                              "min": 800000,
                              "max": 1599999
                            },
                            {
                              "min": 1600000,
                              "max": 3199999
                            },
                            {
                              "min": 3200000,
                              "max": 6399999
                            },
                            {
                              "min": 6400000,
                              "max": 12799999
                            },
                            {
                              "min": 12800000,
                              "max": 25599999
                            },
                            {
                              "min": 25600000,
                              "max": 51199999
                            },
                            {
                              "min": 51200000,
                              "max": 102399999
                            },
                            {
                              "min": 102400000,
                              "max": 204799999
                            },
                            {
                              "min": 204800000,
                              "max": 409599999
                            },
                            {
                              "min": 409600000,
                              "max": 819199999
                            },
                            {
                              "min": 819200000,
                              "max": 1638399999
                            },
                            {
                              "min": 1638400000,
                              "max": 3276799999
                            },
                            {
                              "min": 3276800000,
                              "max": 6553599999
                            },
                            {
                              "min": 6553600000,
                              "max": 13107199999
                            },
                            {
                              "min": 13107200000,
                              "max": 26214399999
                            },
                            {
                              "min": 26214400000,
                              "max": 52428799999
                            },
                            {
                              "min": 52428800000,
                              "max": 104857599999
                            },
                            {
                              "min": 104857600000,
                              "max": 209715199999
                            },
                            {
                              "min": 209715200000,
                              "max": 419430399999
                            },
                            {
                              "min": 419430400000,
                              "max": 838860799999
                            },
                            {
                              "min": 838860800000,
                              "max": 1677721599999
                            },
                            {
                              "min": 1677721600000,
                              "max": 3355443199999
                            },
                            {
                              "min": 3355443200000,
                              "max": 6710886399999
                            },
                            {
                              "min": 6710886400000,
                              "max": 13421772799999
                            },
                            {
                              "min": 13421772800000,
                              "max": 26843545599999
                            },
                            {
                              "min": 26843545600000,
                              "max": 53687091199999
                            },
                            {
                              "min": 53687091200000
                            }
                          ]
                        },
                        {
                          "name": "Request size (bytes)",
                          "min": 0,
                          "quant_size": 512,
                          "buckets": 32,
                          "scale_type": "log2",
                          "ranges": [
                            {
                              "max": -1
                            },
                            {
                              "min": 0,
                              "max": 511
                            },
                            {
                              "min": 512,
                              "max": 1023
                            },
                            {
                              "min": 1024,
                              "max": 2047
                            },
                            {
                              "min": 2048,
                              "max": 4095
                            },
                            {
                              "min": 4096,
                              "max": 8191
                            },
                            {
                              "min": 8192,
                              "max": 16383
                            },
                            {
                              "min": 16384,
                              "max": 32767
                            },
                            {
                              "min": 32768,
                              "max": 65535
                            },
                            {
                              "min": 65536,
                              "max": 131071
                            },
                            {
                              "min": 131072,
                              "max": 262143
                            },
                            {
                              "min": 262144,
                              "max": 524287
                            },
                            {
                              "min": 524288,
                              "max": 1048575
                            },
                            {
                              "min": 1048576,
                              "max": 2097151
                            },
                            {
                              "min": 2097152,
                              "max": 4194303
                            },
                            {
                              "min": 4194304,
                              "max": 8388607
                            },
                            {
                              "min": 8388608,
                              "max": 16777215
                            },
                            {
                              "min": 16777216,
                              "max": 33554431
                            },
                            {
                              "min": 33554432,
                              "max": 67108863
                            },
                            {
                              "min": 67108864,
                              "max": 134217727
                            },
                            {
                              "min": 134217728,
                              "max": 268435455
                            },
                            {
                              "min": 268435456,
                              "max": 536870911
                            },
                            {
                              "min": 536870912,
                              "max": 1073741823
                            },
                            {
                              "min": 1073741824,
                              "max": 2147483647
                            },
                            {
                              "min": 2147483648,
                              "max": 4294967295
                            },
                            {
                              "min": 4294967296,
                              "max": 8589934591
                            },
                            {
                              "min": 8589934592,
                              "max": 17179869183
                            },
                            {
                              "min": 17179869184,
                              "max": 34359738367
                            },
                            {
                              "min": 34359738368,
                              "max": 68719476735
                            },
                            {
                              "min": 68719476736,
                              "max": 137438953471
                            },
                            {
                              "min": 137438953472,
                              "max": 274877906943
                            },
                            {
                              "min": 274877906944
                            }
                          ]
                        }
                      ],
                      "values": [
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          820,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          909,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          259,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          15,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ]
                      ]
                    },
                    "op_w_latency_in_bytes_histogram": {
                      "axes": [
                        {
                          "name": "Latency (usec)",
                          "min": 0,
                          "quant_size": 100000,
                          "buckets": 32,
                          "scale_type": "log2",
                          "ranges": [
                            {
                              "max": -1
                            },
                            {
                              "min": 0,
                              "max": 99999
                            },
                            {
                              "min": 100000,
                              "max": 199999
                            },
                            {
                              "min": 200000,
                              "max": 399999
                            },
                            {
                              "min": 400000,
                              "max": 799999
                            },
                            {
                              "min": 800000,
                              "max": 1599999
                            },
                            {
                              "min": 1600000,
                              "max": 3199999
                            },
                            {
                              "min": 3200000,
                              "max": 6399999
                            },
                            {
                              "min": 6400000,
                              "max": 12799999
                            },
                            {
                              "min": 12800000,
                              "max": 25599999
                            },
                            {
                              "min": 25600000,
                              "max": 51199999
                            },
                            {
                              "min": 51200000,
                              "max": 102399999
                            },
                            {
                              "min": 102400000,
                              "max": 204799999
                            },
                            {
                              "min": 204800000,
                              "max": 409599999
                            },
                            {
                              "min": 409600000,
                              "max": 819199999
                            },
                            {
                              "min": 819200000,
                              "max": 1638399999
                            },
                            {
                              "min": 1638400000,
                              "max": 3276799999
                            },
                            {
                              "min": 3276800000,
                              "max": 6553599999
                            },
                            {
                              "min": 6553600000,
                              "max": 13107199999
                            },
                            {
                              "min": 13107200000,
                              "max": 26214399999
                            },
                            {
                              "min": 26214400000,
                              "max": 52428799999
                            },
                            {
                              "min": 52428800000,
                              "max": 104857599999
                            },
                            {
                              "min": 104857600000,
                              "max": 209715199999
                            },
                            {
                              "min": 209715200000,
                              "max": 419430399999
                            },
                            {
                              "min": 419430400000,
                              "max": 838860799999
                            },
                            {
                              "min": 838860800000,
                              "max": 1677721599999
                            },
                            {
                              "min": 1677721600000,
                              "max": 3355443199999
                            },
                            {
                              "min": 3355443200000,
                              "max": 6710886399999
                            },
                            {
                              "min": 6710886400000,
                              "max": 13421772799999
                            },
                            {
                              "min": 13421772800000,
                              "max": 26843545599999
                            },
                            {
                              "min": 26843545600000,
                              "max": 53687091199999
                            },
                            {
                              "min": 53687091200000
                            }
                          ]
                        },
                        {
                          "name": "Request size (bytes)",
                          "min": 0,
                          "quant_size": 512,
                          "buckets": 32,
                          "scale_type": "log2",
                          "ranges": [
                            {
                              "max": -1
                            },
                            {
                              "min": 0,
                              "max": 511
                            },
                            {
                              "min": 512,
                              "max": 1023
                            },
                            {
                              "min": 1024,
                              "max": 2047
                            },
                            {
                              "min": 2048,
                              "max": 4095
                            },
                            {
                              "min": 4096,
                              "max": 8191
                            },
                            {
                              "min": 8192,
                              "max": 16383
                            },
                            {
                              "min": 16384,
                              "max": 32767
                            },
                            {
                              "min": 32768,
                              "max": 65535
                            },
                            {
                              "min": 65536,
                              "max": 131071
                            },
                            {
                              "min": 131072,
                              "max": 262143
                            },
                            {
                              "min": 262144,
                              "max": 524287
                            },
                            {
                              "min": 524288,
                              "max": 1048575
                            },
                            {
                              "min": 1048576,
                              "max": 2097151
                            },
                            {
                              "min": 2097152,
                              "max": 4194303
                            },
                            {
                              "min": 4194304,
                              "max": 8388607
                            },
                            {
                              "min": 8388608,
                              "max": 16777215
                            },
                            {
                              "min": 16777216,
                              "max": 33554431
                            },
                            {
                              "min": 33554432,
                              "max": 67108863
                            },
                            {
                              "min": 67108864,
                              "max": 134217727
                            },
                            {
                              "min": 134217728,
                              "max": 268435455
                            },
                            {
                              "min": 268435456,
                              "max": 536870911
                            },
                            {
                              "min": 536870912,
                              "max": 1073741823
                            },
                            {
                              "min": 1073741824,
                              "max": 2147483647
                            },
                            {
                              "min": 2147483648,
                              "max": 4294967295
                            },
                            {
                              "min": 4294967296,
                              "max": 8589934591
                            },
                            {
                              "min": 8589934592,
                              "max": 17179869183
                            },
                            {
                              "min": 17179869184,
                              "max": 34359738367
                            },
                            {
                              "min": 34359738368,
                              "max": 68719476735
                            },
                            {
                              "min": 68719476736,
                              "max": 137438953471
                            },
                            {
                              "min": 137438953472,
                              "max": 274877906943
                            },
                            {
                              "min": 274877906944
                            }
                          ]
                        }
                      ],
                      "values": [
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          23,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          12,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ]
                      ]
                    },
                    "op_rw_latency_in_bytes_histogram": {
                      "axes": [
                        {
                          "name": "Latency (usec)",
                          "min": 0,
                          "quant_size": 100000,
                          "buckets": 32,
                          "scale_type": "log2",
                          "ranges": [
                            {
                              "max": -1
                            },
                            {
                              "min": 0,
                              "max": 99999
                            },
                            {
                              "min": 100000,
                              "max": 199999
                            },
                            {
                              "min": 200000,
                              "max": 399999
                            },
                            {
                              "min": 400000,
                              "max": 799999
                            },
                            {
                              "min": 800000,
                              "max": 1599999
                            },
                            {
                              "min": 1600000,
                              "max": 3199999
                            },
                            {
                              "min": 3200000,
                              "max": 6399999
                            },
                            {
                              "min": 6400000,
                              "max": 12799999
                            },
                            {
                              "min": 12800000,
                              "max": 25599999
                            },
                            {
                              "min": 25600000,
                              "max": 51199999
                            },
                            {
                              "min": 51200000,
                              "max": 102399999
                            },
                            {
                              "min": 102400000,
                              "max": 204799999
                            },
                            {
                              "min": 204800000,
                              "max": 409599999
                            },
                            {
                              "min": 409600000,
                              "max": 819199999
                            },
                            {
                              "min": 819200000,
                              "max": 1638399999
                            },
                            {
                              "min": 1638400000,
                              "max": 3276799999
                            },
                            {
                              "min": 3276800000,
                              "max": 6553599999
                            },
                            {
                              "min": 6553600000,
                              "max": 13107199999
                            },
                            {
                              "min": 13107200000,
                              "max": 26214399999
                            },
                            {
                              "min": 26214400000,
                              "max": 52428799999
                            },
                            {
                              "min": 52428800000,
                              "max": 104857599999
                            },
                            {
                              "min": 104857600000,
                              "max": 209715199999
                            },
                            {
                              "min": 209715200000,
                              "max": 419430399999
                            },
                            {
                              "min": 419430400000,
                              "max": 838860799999
                            },
                            {
                              "min": 838860800000,
                              "max": 1677721599999
                            },
                            {
                              "min": 1677721600000,
                              "max": 3355443199999
                            },
                            {
                              "min": 3355443200000,
                              "max": 6710886399999
                            },
                            {
                              "min": 6710886400000,
                              "max": 13421772799999
                            },
                            {
                              "min": 13421772800000,
                              "max": 26843545599999
                            },
                            {
                              "min": 26843545600000,
                              "max": 53687091199999
                            },
                            {
                              "min": 53687091200000
                            }
                          ]
                        },
                        {
                          "name": "Request size (bytes)",
                          "min": 0,
                          "quant_size": 512,
                          "buckets": 32,
                          "scale_type": "log2",
                          "ranges": [
                            {
                              "max": -1
                            },
                            {
                              "min": 0,
                              "max": 511
                            },
                            {
                              "min": 512,
                              "max": 1023
                            },
                            {
                              "min": 1024,
                              "max": 2047
                            },
                            {
                              "min": 2048,
                              "max": 4095
                            },
                            {
                              "min": 4096,
                              "max": 8191
                            },
                            {
                              "min": 8192,
                              "max": 16383
                            },
                            {
                              "min": 16384,
                              "max": 32767
                            },
                            {
                              "min": 32768,
                              "max": 65535
                            },
                            {
                              "min": 65536,
                              "max": 131071
                            },
                            {
                              "min": 131072,
                              "max": 262143
                            },
                            {
                              "min": 262144,
                              "max": 524287
                            },
                            {
                              "min": 524288,
                              "max": 1048575
                            },
                            {
                              "min": 1048576,
                              "max": 2097151
                            },
                            {
                              "min": 2097152,
                              "max": 4194303
                            },
                            {
                              "min": 4194304,
                              "max": 8388607
                            },
                            {
                              "min": 8388608,
                              "max": 16777215
                            },
                            {
                              "min": 16777216,
                              "max": 33554431
                            },
                            {
                              "min": 33554432,
                              "max": 67108863
                            },
                            {
                              "min": 67108864,
                              "max": 134217727
                            },
                            {
                              "min": 134217728,
                              "max": 268435455
                            },
                            {
                              "min": 268435456,
                              "max": 536870911
                            },
                            {
                              "min": 536870912,
                              "max": 1073741823
                            },
                            {
                              "min": 1073741824,
                              "max": 2147483647
                            },
                            {
                              "min": 2147483648,
                              "max": 4294967295
                            },
                            {
                              "min": 4294967296,
                              "max": 8589934591
                            },
                            {
                              "min": 8589934592,
                              "max": 17179869183
                            },
                            {
                              "min": 17179869184,
                              "max": 34359738367
                            },
                            {
                              "min": 34359738368,
                              "max": 68719476735
                            },
                            {
                              "min": 68719476736,
                              "max": 137438953471
                            },
                            {
                              "min": 137438953472,
                              "max": 274877906943
                            },
                            {
                              "min": 274877906944
                            }
                          ]
                        }
                      ],
                      "values": [
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          544,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          185,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          29,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ]
                      ]
                    },
                    "op_rw_latency_out_bytes_histogram": {
                      "axes": [
                        {
                          "name": "Latency (usec)",
                          "min": 0,
                          "quant_size": 100000,
                          "buckets": 32,
                          "scale_type": "log2",
                          "ranges": [
                            {
                              "max": -1
                            },
                            {
                              "min": 0,
                              "max": 99999
                            },
                            {
                              "min": 100000,
                              "max": 199999
                            },
                            {
                              "min": 200000,
                              "max": 399999
                            },
                            {
                              "min": 400000,
                              "max": 799999
                            },
                            {
                              "min": 800000,
                              "max": 1599999
                            },
                            {
                              "min": 1600000,
                              "max": 3199999
                            },
                            {
                              "min": 3200000,
                              "max": 6399999
                            },
                            {
                              "min": 6400000,
                              "max": 12799999
                            },
                            {
                              "min": 12800000,
                              "max": 25599999
                            },
                            {
                              "min": 25600000,
                              "max": 51199999
                            },
                            {
                              "min": 51200000,
                              "max": 102399999
                            },
                            {
                              "min": 102400000,
                              "max": 204799999
                            },
                            {
                              "min": 204800000,
                              "max": 409599999
                            },
                            {
                              "min": 409600000,
                              "max": 819199999
                            },
                            {
                              "min": 819200000,
                              "max": 1638399999
                            },
                            {
                              "min": 1638400000,
                              "max": 3276799999
                            },
                            {
                              "min": 3276800000,
                              "max": 6553599999
                            },
                            {
                              "min": 6553600000,
                              "max": 13107199999
                            },
                            {
                              "min": 13107200000,
                              "max": 26214399999
                            },
                            {
                              "min": 26214400000,
                              "max": 52428799999
                            },
                            {
                              "min": 52428800000,
                              "max": 104857599999
                            },
                            {
                              "min": 104857600000,
                              "max": 209715199999
                            },
                            {
                              "min": 209715200000,
                              "max": 419430399999
                            },
                            {
                              "min": 419430400000,
                              "max": 838860799999
                            },
                            {
                              "min": 838860800000,
                              "max": 1677721599999
                            },
                            {
                              "min": 1677721600000,
                              "max": 3355443199999
                            },
                            {
                              "min": 3355443200000,
                              "max": 6710886399999
                            },
                            {
                              "min": 6710886400000,
                              "max": 13421772799999
                            },
                            {
                              "min": 13421772800000,
                              "max": 26843545599999
                            },
                            {
                              "min": 26843545600000,
                              "max": 53687091199999
                            },
                            {
                              "min": 53687091200000
                            }
                          ]
                        },
                        {
                          "name": "Request size (bytes)",
                          "min": 0,
                          "quant_size": 512,
                          "buckets": 32,
                          "scale_type": "log2",
                          "ranges": [
                            {
                              "max": -1
                            },
                            {
                              "min": 0,
                              "max": 511
                            },
                            {
                              "min": 512,
                              "max": 1023
                            },
                            {
                              "min": 1024,
                              "max": 2047
                            },
                            {
                              "min": 2048,
                              "max": 4095
                            },
                            {
                              "min": 4096,
                              "max": 8191
                            },
                            {
                              "min": 8192,
                              "max": 16383
                            },
                            {
                              "min": 16384,
                              "max": 32767
                            },
                            {
                              "min": 32768,
                              "max": 65535
                            },
                            {
                              "min": 65536,
                              "max": 131071
                            },
                            {
                              "min": 131072,
                              "max": 262143
                            },
                            {
                              "min": 262144,
                              "max": 524287
                            },
                            {
                              "min": 524288,
                              "max": 1048575
                            },
                            {
                              "min": 1048576,
                              "max": 2097151
                            },
                            {
                              "min": 2097152,
                              "max": 4194303
                            },
                            {
                              "min": 4194304,
                              "max": 8388607
                            },
                            {
                              "min": 8388608,
                              "max": 16777215
                            },
                            {
                              "min": 16777216,
                              "max": 33554431
                            },
                            {
                              "min": 33554432,
                              "max": 67108863
                            },
                            {
                              "min": 67108864,
                              "max": 134217727
                            },
                            {
                              "min": 134217728,
                              "max": 268435455
                            },
                            {
                              "min": 268435456,
                              "max": 536870911
                            },
                            {
                              "min": 536870912,
                              "max": 1073741823
                            },
                            {
                              "min": 1073741824,
                              "max": 2147483647
                            },
                            {
                              "min": 2147483648,
                              "max": 4294967295
                            },
                            {
                              "min": 4294967296,
                              "max": 8589934591
                            },
                            {
                              "min": 8589934592,
                              "max": 17179869183
                            },
                            {
                              "min": 17179869184,
                              "max": 34359738367
                            },
                            {
                              "min": 34359738368,
                              "max": 68719476735
                            },
                            {
                              "min": 68719476736,
                              "max": 137438953471
                            },
                            {
                              "min": 137438953472,
                              "max": 274877906943
                            },
                            {
                              "min": 274877906944
                            }
                          ]
                        }
                      ],
                      "values": [
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          544,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          185,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          29,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          1,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ],
                        [
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0
                        ]
                      ]
                    }
                  },
                  "recoverystate_perf": {},
                  "rocksdb": {},
                  "throttle-bluestore_throttle_bytes": {},
                  "throttle-bluestore_throttle_deferred_bytes": {},
                  "throttle-msgr_dispatch_throttler-client": {},
                  "throttle-msgr_dispatch_throttler-cluster": {},
                  "throttle-msgr_dispatch_throttler-hb_back_client": {},
                  "throttle-msgr_dispatch_throttler-hb_back_server": {},
                  "throttle-msgr_dispatch_throttler-hb_front_client": {},
                  "throttle-msgr_dispatch_throttler-hb_front_server": {},
                  "throttle-msgr_dispatch_throttler-ms_objecter": {},
                  "throttle-objecter_bytes": {},
                  "throttle-objecter_ops": {},
                  "throttle-osd_client_bytes": {}
                }
              }
            }
          }
        },
        "operationId": "OSD_DEATIL",
        "tags": [
          "osd"
        ],
        "summary": "OSD detail | 查看指定对象存储区",
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      },
      "parameters": [
        {
          "name": "osd_id",
          "in": "path",
          "type": "string",
          "required": true
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "null"
            },
            "examples": {
              "application/json": null
            }
          }
        },
        "summary": "OSD scrub | OSD 洗刷",
        "operationId": "OSD_SCRUB",
        "tags": [
          "osd"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "deep",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/health/minimal": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "health": {
                  "type": "object",
                  "properties": {
                    "checks": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                },
                "mon_status": {
                  "type": "object",
                  "properties": {
                    "monmap": {
                      "type": "object",
                      "properties": {
                        "mons": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "quorum": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "fs_map": {
                  "type": "object",
                  "properties": {
                    "filesystems": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "mdsmap": {
                            "type": "object",
                            "properties": {
                              "info": {
                                "type": "object",
                                "properties": {
                                  "gid_4205": {
                                    "type": "object",
                                    "properties": {
                                      "state": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "standbys": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                },
                "osd_map": {
                  "type": "object",
                  "properties": {
                    "osds": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "in": {
                            "type": "integer"
                          },
                          "up": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                },
                "scrub_status": {
                  "type": "string"
                },
                "pg_info": {
                  "type": "object",
                  "properties": {
                    "pgs_per_osd": {
                      "type": "integer"
                    },
                    "statuses": {
                      "type": "object",
                      "properties": {
                        "active+clean": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "mgr_map": {
                  "type": "object",
                  "properties": {
                    "active_name": {
                      "type": "string"
                    },
                    "standbys": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                },
                "pools": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "df": {
                  "type": "object",
                  "properties": {
                    "stats": {
                      "type": "object",
                      "properties": {
                        "total_avail_bytes": {
                          "type": "integer"
                        },
                        "total_bytes": {
                          "type": "integer"
                        },
                        "total_objects": {
                          "type": "integer"
                        },
                        "total_used_raw_bytes": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "client_perf": {
                  "type": "object",
                  "properties": {
                    "read_bytes_sec": {
                      "type": "integer"
                    },
                    "read_op_per_sec": {
                      "type": "integer"
                    },
                    "recovering_bytes_per_sec": {
                      "type": "integer"
                    },
                    "write_bytes_sec": {
                      "type": "integer"
                    },
                    "write_op_per_sec": {
                      "type": "integer"
                    }
                  }
                },
                "hosts": {
                  "type": "integer"
                },
                "rgw": {
                  "type": "integer"
                },
                "iscsi_daemons": {
                  "type": "integer"
                }
              }
            },
            "examples": {
              "application/json": {
                "health": {
                  "checks": [],
                  "status": "HEALTH_OK"
                },
                "mon_status": {
                  "monmap": {
                    "mons": [
                      {},
                      {},
                      {}
                    ]
                  },
                  "quorum": [
                    0,
                    1,
                    2
                  ]
                },
                "fs_map": {
                  "filesystems": [
                    {
                      "mdsmap": {
                        "info": {
                          "gid_4205": {
                            "state": "up:active"
                          }
                        }
                      }
                    }
                  ],
                  "standbys": [
                    {},
                    {}
                  ]
                },
                "osd_map": {
                  "osds": [
                    {
                      "in": 1,
                      "up": 1
                    },
                    {
                      "in": 1,
                      "up": 1
                    },
                    {
                      "in": 1,
                      "up": 1
                    }
                  ]
                },
                "scrub_status": "Inactive",
                "pg_info": {
                  "pgs_per_osd": 48,
                  "statuses": {
                    "active+clean": 48
                  }
                },
                "mgr_map": {
                  "active_name": "x",
                  "standbys": []
                },
                "pools": [
                  {},
                  {},
                  {},
                  {},
                  {},
                  {}
                ],
                "df": {
                  "stats": {
                    "total_avail_bytes": 28975693824,
                    "total_bytes": 32413556736,
                    "total_objects": 257,
                    "total_used_raw_bytes": 3437862912
                  }
                },
                "client_perf": {
                  "read_bytes_sec": 0,
                  "read_op_per_sec": 0,
                  "recovering_bytes_per_sec": 0,
                  "write_bytes_sec": 0,
                  "write_op_per_sec": 0
                },
                "hosts": 1,
                "rgw": 1,
                "iscsi_daemons": 0
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "summary": "health minimal | 集群监控信息",
        "operationId": "HEALTH_MINIMAL",
        "tags": [
          "cluster"
        ]
      }
    },
    "/health/full": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "health": {
                  "type": "object",
                  "properties": {
                    "checks": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "status": {
                      "type": "string"
                    }
                  }
                },
                "mon_status": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "rank": {
                      "type": "integer"
                    },
                    "state": {
                      "type": "string"
                    },
                    "election_epoch": {
                      "type": "integer"
                    },
                    "quorum": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "quorum_age": {
                      "type": "integer"
                    },
                    "features": {
                      "type": "object",
                      "properties": {
                        "required_con": {
                          "type": "string"
                        },
                        "required_mon": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "quorum_con": {
                          "type": "string"
                        },
                        "quorum_mon": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "outside_quorum": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "extra_probe_peers": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "sync_provider": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "monmap": {
                      "type": "object",
                      "properties": {
                        "epoch": {
                          "type": "integer"
                        },
                        "fsid": {
                          "type": "string"
                        },
                        "modified": {
                          "type": "string"
                        },
                        "created": {
                          "type": "string"
                        },
                        "features": {
                          "type": "object",
                          "properties": {
                            "persistent": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "optional": {
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            }
                          }
                        },
                        "mons": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "rank": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "addr": {
                                "type": "string"
                              },
                              "public_addr": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "feature_map": {
                      "type": "object",
                      "properties": {
                        "mon": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "features": {
                                "type": "string"
                              },
                              "release": {
                                "type": "string"
                              },
                              "num": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "mds": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "features": {
                                "type": "string"
                              },
                              "release": {
                                "type": "string"
                              },
                              "num": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "osd": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "features": {
                                "type": "string"
                              },
                              "release": {
                                "type": "string"
                              },
                              "num": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "mgr": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "features": {
                                "type": "string"
                              },
                              "release": {
                                "type": "string"
                              },
                              "num": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "fs_map": {
                  "type": "object",
                  "properties": {
                    "epoch": {
                      "type": "integer"
                    },
                    "default_fscid": {
                      "type": "integer"
                    },
                    "compat": {
                      "type": "object",
                      "properties": {
                        "compat": {
                          "type": "object"
                        },
                        "ro_compat": {
                          "type": "object"
                        },
                        "incompat": {
                          "type": "object",
                          "properties": {
                            "feature_1": {
                              "type": "string"
                            },
                            "feature_2": {
                              "type": "string"
                            },
                            "feature_3": {
                              "type": "string"
                            },
                            "feature_4": {
                              "type": "string"
                            },
                            "feature_5": {
                              "type": "string"
                            },
                            "feature_6": {
                              "type": "string"
                            },
                            "feature_8": {
                              "type": "string"
                            },
                            "feature_9": {
                              "type": "string"
                            },
                            "feature_10": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "feature_flags": {
                      "type": "object",
                      "properties": {
                        "enable_multiple": {
                          "type": "boolean"
                        },
                        "ever_enabled_multiple": {
                          "type": "boolean"
                        }
                      }
                    },
                    "standbys": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "gid": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "rank": {
                            "type": "integer"
                          },
                          "incarnation": {
                            "type": "integer"
                          },
                          "state_seq": {
                            "type": "integer"
                          },
                          "addrs": {
                            "type": "object",
                            "properties": {
                              "addrvec": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "nonce": {
                                      "type": "integer"
                                    },
                                    "addr": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "standby_for_rank": {
                            "type": "integer"
                          },
                          "standby_for_fscid": {
                            "type": "integer"
                          },
                          "standby_for_name": {
                            "type": "string"
                          },
                          "standby_replay": {
                            "type": "boolean"
                          },
                          "export_targets": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          },
                          "features": {
                            "type": "integer"
                          },
                          "epoch": {
                            "type": "integer"
                          },
                          "state": {
                            "type": "string"
                          },
                          "addr": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "filesystems": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "mdsmap": {
                            "type": "object",
                            "properties": {
                              "epoch": {
                                "type": "integer"
                              },
                              "flags": {
                                "type": "integer"
                              },
                              "ever_allowed_features": {
                                "type": "integer"
                              },
                              "explicitly_allowed_features": {
                                "type": "integer"
                              },
                              "tableserver": {
                                "type": "integer"
                              },
                              "root": {
                                "type": "integer"
                              },
                              "session_timeout": {
                                "type": "integer"
                              },
                              "session_autoclose": {
                                "type": "integer"
                              },
                              "max_file_size": {
                                "type": "integer"
                              },
                              "last_failure": {
                                "type": "integer"
                              },
                              "last_failure_osd_epoch": {
                                "type": "integer"
                              },
                              "compat": {
                                "type": "object",
                                "properties": {
                                  "compat": {
                                    "type": "object"
                                  },
                                  "ro_compat": {
                                    "type": "object"
                                  },
                                  "incompat": {
                                    "type": "object",
                                    "properties": {
                                      "feature_1": {
                                        "type": "string"
                                      },
                                      "feature_2": {
                                        "type": "string"
                                      },
                                      "feature_3": {
                                        "type": "string"
                                      },
                                      "feature_4": {
                                        "type": "string"
                                      },
                                      "feature_5": {
                                        "type": "string"
                                      },
                                      "feature_6": {
                                        "type": "string"
                                      },
                                      "feature_8": {
                                        "type": "string"
                                      },
                                      "feature_9": {
                                        "type": "string"
                                      },
                                      "feature_10": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "max_mds": {
                                "type": "integer"
                              },
                              "in": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              },
                              "up": {
                                "type": "object",
                                "properties": {
                                  "mds_0": {
                                    "type": "integer"
                                  }
                                }
                              },
                              "failed": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "damaged": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "stopped": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "info": {
                                "type": "object",
                                "properties": {
                                  "gid_4205": {
                                    "type": "object",
                                    "properties": {
                                      "gid": {
                                        "type": "integer"
                                      },
                                      "name": {
                                        "type": "string"
                                      },
                                      "rank": {
                                        "type": "integer"
                                      },
                                      "incarnation": {
                                        "type": "integer"
                                      },
                                      "state_seq": {
                                        "type": "integer"
                                      },
                                      "addrs": {
                                        "type": "object",
                                        "properties": {
                                          "addrvec": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string"
                                                },
                                                "nonce": {
                                                  "type": "integer"
                                                },
                                                "addr": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "standby_for_rank": {
                                        "type": "integer"
                                      },
                                      "standby_for_fscid": {
                                        "type": "integer"
                                      },
                                      "standby_for_name": {
                                        "type": "string"
                                      },
                                      "standby_replay": {
                                        "type": "boolean"
                                      },
                                      "export_targets": {
                                        "type": "array",
                                        "items": {
                                          "type": "object"
                                        }
                                      },
                                      "features": {
                                        "type": "integer"
                                      },
                                      "state": {
                                        "type": "string"
                                      },
                                      "addr": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "data_pools": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              },
                              "metadata_pool": {
                                "type": "integer"
                              },
                              "enabled": {
                                "type": "boolean"
                              },
                              "fs_name": {
                                "type": "string"
                              },
                              "balancer": {
                                "type": "string"
                              },
                              "standby_count_wanted": {
                                "type": "integer"
                              },
                              "created": {
                                "type": "string"
                              },
                              "modified": {
                                "type": "string"
                              },
                              "min_compat_client": {
                                "type": "string"
                              }
                            }
                          },
                          "id": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                },
                "osd_map": {
                  "type": "object",
                  "properties": {
                    "epoch": {
                      "type": "integer"
                    },
                    "flags": {
                      "type": "string"
                    },
                    "flags_num": {
                      "type": "integer"
                    },
                    "flags_set": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "crush_version": {
                      "type": "integer"
                    },
                    "full_ratio": {
                      "type": "number"
                    },
                    "backfillfull_ratio": {
                      "type": "number"
                    },
                    "nearfull_ratio": {
                      "type": "number"
                    },
                    "cluster_snapshot": {
                      "type": "string"
                    },
                    "pool_max": {
                      "type": "integer"
                    },
                    "max_osd": {
                      "type": "integer"
                    },
                    "require_min_compat_client": {
                      "type": "string"
                    },
                    "min_compat_client": {
                      "type": "string"
                    },
                    "require_osd_release": {
                      "type": "string"
                    },
                    "pools": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "pool": {
                            "type": "integer"
                          },
                          "pool_name": {
                            "type": "string"
                          },
                          "flags": {
                            "type": "integer"
                          },
                          "flags_names": {
                            "type": "string"
                          },
                          "type": {
                            "type": "integer"
                          },
                          "size": {
                            "type": "integer"
                          },
                          "min_size": {
                            "type": "integer"
                          },
                          "crush_rule": {
                            "type": "integer"
                          },
                          "object_hash": {
                            "type": "integer"
                          },
                          "pg_autoscale_mode": {
                            "type": "string"
                          },
                          "pg_num": {
                            "type": "integer"
                          },
                          "pg_placement_num": {
                            "type": "integer"
                          },
                          "pg_placement_num_target": {
                            "type": "integer"
                          },
                          "pg_num_target": {
                            "type": "integer"
                          },
                          "pg_num_pending": {
                            "type": "integer"
                          },
                          "pg_num_dec_last_epoch_started": {
                            "type": "integer"
                          },
                          "pg_num_dec_last_epoch_clean": {
                            "type": "integer"
                          },
                          "auid": {
                            "type": "integer"
                          },
                          "snap_mode": {
                            "type": "string"
                          },
                          "snap_seq": {
                            "type": "integer"
                          },
                          "snap_epoch": {
                            "type": "integer"
                          },
                          "pool_snaps": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          },
                          "quota_max_bytes": {
                            "type": "integer"
                          },
                          "quota_max_objects": {
                            "type": "integer"
                          },
                          "tiers": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          },
                          "tier_of": {
                            "type": "integer"
                          },
                          "read_tier": {
                            "type": "integer"
                          },
                          "write_tier": {
                            "type": "integer"
                          },
                          "cache_mode": {
                            "type": "string"
                          },
                          "target_max_bytes": {
                            "type": "integer"
                          },
                          "target_max_objects": {
                            "type": "integer"
                          },
                          "cache_target_dirty_ratio_micro": {
                            "type": "integer"
                          },
                          "cache_target_dirty_high_ratio_micro": {
                            "type": "integer"
                          },
                          "cache_target_full_ratio_micro": {
                            "type": "integer"
                          },
                          "cache_min_flush_age": {
                            "type": "integer"
                          },
                          "cache_min_evict_age": {
                            "type": "integer"
                          },
                          "erasure_code_profile": {
                            "type": "string"
                          },
                          "hit_set_params": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              }
                            }
                          },
                          "hit_set_period": {
                            "type": "integer"
                          },
                          "hit_set_count": {
                            "type": "integer"
                          },
                          "use_gmt_hitset": {
                            "type": "boolean"
                          },
                          "min_read_recency_for_promote": {
                            "type": "integer"
                          },
                          "min_write_recency_for_promote": {
                            "type": "integer"
                          },
                          "hit_set_grade_decay_rate": {
                            "type": "integer"
                          },
                          "hit_set_search_last_n": {
                            "type": "integer"
                          },
                          "grade_table": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          },
                          "stripe_width": {
                            "type": "integer"
                          },
                          "expected_num_objects": {
                            "type": "integer"
                          },
                          "fast_read": {
                            "type": "boolean"
                          },
                          "options": {
                            "type": "object"
                          },
                          "application_metadata": {
                            "type": "object",
                            "properties": {
                              "cephfs": {
                                "type": "object",
                                "properties": {
                                  "metadata": {
                                    "type": "string"
                                  }
                                }
                              },
                              "rgw": {
                                "type": "object"
                              }
                            }
                          },
                          "create_time": {
                            "type": "string"
                          },
                          "last_change": {
                            "type": "string"
                          },
                          "last_force_op_resend": {
                            "type": "string"
                          },
                          "last_force_op_resend_prenautilus": {
                            "type": "string"
                          },
                          "last_force_op_resend_preluminous": {
                            "type": "string"
                          },
                          "removed_snaps": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "osds": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "osd": {
                            "type": "integer"
                          },
                          "up": {
                            "type": "integer"
                          },
                          "in": {
                            "type": "integer"
                          },
                          "weight": {
                            "type": "integer"
                          },
                          "primary_affinity": {
                            "type": "integer"
                          },
                          "last_clean_begin": {
                            "type": "integer"
                          },
                          "last_clean_end": {
                            "type": "integer"
                          },
                          "up_from": {
                            "type": "integer"
                          },
                          "up_thru": {
                            "type": "integer"
                          },
                          "down_at": {
                            "type": "integer"
                          },
                          "lost_at": {
                            "type": "integer"
                          },
                          "public_addrs": {
                            "type": "object",
                            "properties": {
                              "addrvec": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "nonce": {
                                      "type": "integer"
                                    },
                                    "addr": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "cluster_addrs": {
                            "type": "object",
                            "properties": {
                              "addrvec": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "nonce": {
                                      "type": "integer"
                                    },
                                    "addr": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "heartbeat_back_addrs": {
                            "type": "object",
                            "properties": {
                              "addrvec": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "nonce": {
                                      "type": "integer"
                                    },
                                    "addr": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "heartbeat_front_addr": {
                            "type": "object",
                            "properties": {
                              "addrvec": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string"
                                    },
                                    "nonce": {
                                      "type": "integer"
                                    },
                                    "addr": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "state": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "uuid": {
                            "type": "string"
                          },
                          "public_addr": {
                            "type": "string"
                          },
                          "cluster_addr": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "osd_xinfo": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "osd": {
                            "type": "integer"
                          },
                          "laggy_probability": {
                            "type": "integer"
                          },
                          "laggy_interval": {
                            "type": "integer"
                          },
                          "features": {
                            "type": "integer"
                          },
                          "old_weight": {
                            "type": "integer"
                          },
                          "down_stamp": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "pg_upmap": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "pg_upmap_items": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "primary_temp": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "blacklist": {
                      "type": "object"
                    },
                    "erasure_code_profiles": {
                      "type": "object",
                      "properties": {
                        "default": {
                          "type": "object",
                          "properties": {
                            "crush-failure-domain": {
                              "type": "string"
                            },
                            "k": {
                              "type": "string"
                            },
                            "m": {
                              "type": "string"
                            },
                            "plugin": {
                              "type": "string"
                            },
                            "technique": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "removed_snaps_queue": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "new_removed_snaps": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "new_purged_snaps": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "fsid": {
                      "type": "string"
                    },
                    "created": {
                      "type": "string"
                    },
                    "modified": {
                      "type": "string"
                    },
                    "last_up_change": {
                      "type": "string"
                    },
                    "last_in_change": {
                      "type": "string"
                    },
                    "tree": {
                      "type": "object",
                      "properties": {
                        "nodes": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              },
                              "type_id": {
                                "type": "integer"
                              },
                              "children": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              },
                              "device_class": {
                                "type": "string"
                              },
                              "crush_weight": {
                                "type": "number"
                              },
                              "depth": {
                                "type": "integer"
                              },
                              "pool_weights": {
                                "type": "object"
                              },
                              "exists": {
                                "type": "integer"
                              },
                              "status": {
                                "type": "string"
                              },
                              "reweight": {
                                "type": "integer"
                              },
                              "primary_affinity": {
                                "type": "integer"
                              }
                            }
                          }
                        },
                        "stray": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    },
                    "crush": {
                      "type": "object",
                      "properties": {
                        "devices": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "class": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "types": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type_id": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "buckets": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "type_id": {
                                "type": "integer"
                              },
                              "type_name": {
                                "type": "string"
                              },
                              "weight": {
                                "type": "integer"
                              },
                              "alg": {
                                "type": "string"
                              },
                              "hash": {
                                "type": "string"
                              },
                              "items": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "integer"
                                    },
                                    "weight": {
                                      "type": "integer"
                                    },
                                    "pos": {
                                      "type": "integer"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "rules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "rule_id": {
                                "type": "integer"
                              },
                              "rule_name": {
                                "type": "string"
                              },
                              "ruleset": {
                                "type": "integer"
                              },
                              "type": {
                                "type": "integer"
                              },
                              "min_size": {
                                "type": "integer"
                              },
                              "max_size": {
                                "type": "integer"
                              },
                              "steps": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "op": {
                                      "type": "string"
                                    },
                                    "item": {
                                      "type": "integer"
                                    },
                                    "item_name": {
                                      "type": "string"
                                    },
                                    "num": {
                                      "type": "integer"
                                    },
                                    "type": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "tunables": {
                          "type": "object",
                          "properties": {
                            "choose_local_tries": {
                              "type": "integer"
                            },
                            "choose_local_fallback_tries": {
                              "type": "integer"
                            },
                            "choose_total_tries": {
                              "type": "integer"
                            },
                            "chooseleaf_descend_once": {
                              "type": "integer"
                            },
                            "chooseleaf_vary_r": {
                              "type": "integer"
                            },
                            "chooseleaf_stable": {
                              "type": "integer"
                            },
                            "straw_calc_version": {
                              "type": "integer"
                            },
                            "allowed_bucket_algs": {
                              "type": "integer"
                            },
                            "profile": {
                              "type": "string"
                            },
                            "optimal_tunables": {
                              "type": "integer"
                            },
                            "legacy_tunables": {
                              "type": "integer"
                            },
                            "minimum_required_version": {
                              "type": "string"
                            },
                            "require_feature_tunables": {
                              "type": "integer"
                            },
                            "require_feature_tunables2": {
                              "type": "integer"
                            },
                            "has_v2_rules": {
                              "type": "integer"
                            },
                            "require_feature_tunables3": {
                              "type": "integer"
                            },
                            "has_v3_rules": {
                              "type": "integer"
                            },
                            "has_v4_buckets": {
                              "type": "integer"
                            },
                            "require_feature_tunables5": {
                              "type": "integer"
                            },
                            "has_v5_rules": {
                              "type": "integer"
                            }
                          }
                        },
                        "choose_args": {
                          "type": "object"
                        }
                      }
                    },
                    "crush_map_text": {
                      "type": "object"
                    },
                    "osd_metadata": {
                      "type": "object",
                      "properties": {
                        "0": {
                          "type": "object",
                          "properties": {
                            "hostname": {
                              "type": "string"
                            },
                            "arch": {
                              "type": "string"
                            },
                            "back_addr": {
                              "type": "string"
                            },
                            "back_iface": {
                              "type": "string"
                            },
                            "bluefs": {
                              "type": "string"
                            },
                            "bluefs_db_access_mode": {
                              "type": "string"
                            },
                            "bluefs_db_block_size": {
                              "type": "string"
                            },
                            "bluefs_db_driver": {
                              "type": "string"
                            },
                            "bluefs_db_path": {
                              "type": "string"
                            },
                            "bluefs_db_rotational": {
                              "type": "string"
                            },
                            "bluefs_db_size": {
                              "type": "string"
                            },
                            "bluefs_db_support_discard": {
                              "type": "string"
                            },
                            "bluefs_db_type": {
                              "type": "string"
                            },
                            "bluefs_single_shared_device": {
                              "type": "string"
                            },
                            "bluefs_wal_access_mode": {
                              "type": "string"
                            },
                            "bluefs_wal_block_size": {
                              "type": "string"
                            },
                            "bluefs_wal_driver": {
                              "type": "string"
                            },
                            "bluefs_wal_path": {
                              "type": "string"
                            },
                            "bluefs_wal_rotational": {
                              "type": "string"
                            },
                            "bluefs_wal_size": {
                              "type": "string"
                            },
                            "bluefs_wal_support_discard": {
                              "type": "string"
                            },
                            "bluefs_wal_type": {
                              "type": "string"
                            },
                            "bluestore_bdev_access_mode": {
                              "type": "string"
                            },
                            "bluestore_bdev_block_size": {
                              "type": "string"
                            },
                            "bluestore_bdev_driver": {
                              "type": "string"
                            },
                            "bluestore_bdev_path": {
                              "type": "string"
                            },
                            "bluestore_bdev_rotational": {
                              "type": "string"
                            },
                            "bluestore_bdev_size": {
                              "type": "string"
                            },
                            "bluestore_bdev_support_discard": {
                              "type": "string"
                            },
                            "bluestore_bdev_type": {
                              "type": "string"
                            },
                            "ceph_release": {
                              "type": "string"
                            },
                            "ceph_version": {
                              "type": "string"
                            },
                            "ceph_version_short": {
                              "type": "string"
                            },
                            "cpu": {
                              "type": "string"
                            },
                            "default_device_class": {
                              "type": "string"
                            },
                            "device_ids": {
                              "type": "string"
                            },
                            "devices": {
                              "type": "string"
                            },
                            "distro": {
                              "type": "string"
                            },
                            "distro_description": {
                              "type": "string"
                            },
                            "distro_version": {
                              "type": "string"
                            },
                            "front_addr": {
                              "type": "string"
                            },
                            "front_iface": {
                              "type": "string"
                            },
                            "hb_back_addr": {
                              "type": "string"
                            },
                            "hb_front_addr": {
                              "type": "string"
                            },
                            "journal_rotational": {
                              "type": "string"
                            },
                            "kernel_description": {
                              "type": "string"
                            },
                            "kernel_version": {
                              "type": "string"
                            },
                            "mem_swap_kb": {
                              "type": "string"
                            },
                            "mem_total_kb": {
                              "type": "string"
                            },
                            "os": {
                              "type": "string"
                            },
                            "osd_data": {
                              "type": "string"
                            },
                            "osd_objectstore": {
                              "type": "string"
                            },
                            "rotational": {
                              "type": "string"
                            }
                          }
                        },
                        "1": {
                          "type": "object",
                          "properties": {
                            "hostname": {
                              "type": "string"
                            },
                            "arch": {
                              "type": "string"
                            },
                            "back_addr": {
                              "type": "string"
                            },
                            "back_iface": {
                              "type": "string"
                            },
                            "bluefs": {
                              "type": "string"
                            },
                            "bluefs_db_access_mode": {
                              "type": "string"
                            },
                            "bluefs_db_block_size": {
                              "type": "string"
                            },
                            "bluefs_db_driver": {
                              "type": "string"
                            },
                            "bluefs_db_path": {
                              "type": "string"
                            },
                            "bluefs_db_rotational": {
                              "type": "string"
                            },
                            "bluefs_db_size": {
                              "type": "string"
                            },
                            "bluefs_db_support_discard": {
                              "type": "string"
                            },
                            "bluefs_db_type": {
                              "type": "string"
                            },
                            "bluefs_single_shared_device": {
                              "type": "string"
                            },
                            "bluefs_wal_access_mode": {
                              "type": "string"
                            },
                            "bluefs_wal_block_size": {
                              "type": "string"
                            },
                            "bluefs_wal_driver": {
                              "type": "string"
                            },
                            "bluefs_wal_path": {
                              "type": "string"
                            },
                            "bluefs_wal_rotational": {
                              "type": "string"
                            },
                            "bluefs_wal_size": {
                              "type": "string"
                            },
                            "bluefs_wal_support_discard": {
                              "type": "string"
                            },
                            "bluefs_wal_type": {
                              "type": "string"
                            },
                            "bluestore_bdev_access_mode": {
                              "type": "string"
                            },
                            "bluestore_bdev_block_size": {
                              "type": "string"
                            },
                            "bluestore_bdev_driver": {
                              "type": "string"
                            },
                            "bluestore_bdev_path": {
                              "type": "string"
                            },
                            "bluestore_bdev_rotational": {
                              "type": "string"
                            },
                            "bluestore_bdev_size": {
                              "type": "string"
                            },
                            "bluestore_bdev_support_discard": {
                              "type": "string"
                            },
                            "bluestore_bdev_type": {
                              "type": "string"
                            },
                            "ceph_release": {
                              "type": "string"
                            },
                            "ceph_version": {
                              "type": "string"
                            },
                            "ceph_version_short": {
                              "type": "string"
                            },
                            "cpu": {
                              "type": "string"
                            },
                            "default_device_class": {
                              "type": "string"
                            },
                            "device_ids": {
                              "type": "string"
                            },
                            "devices": {
                              "type": "string"
                            },
                            "distro": {
                              "type": "string"
                            },
                            "distro_description": {
                              "type": "string"
                            },
                            "distro_version": {
                              "type": "string"
                            },
                            "front_addr": {
                              "type": "string"
                            },
                            "front_iface": {
                              "type": "string"
                            },
                            "hb_back_addr": {
                              "type": "string"
                            },
                            "hb_front_addr": {
                              "type": "string"
                            },
                            "journal_rotational": {
                              "type": "string"
                            },
                            "kernel_description": {
                              "type": "string"
                            },
                            "kernel_version": {
                              "type": "string"
                            },
                            "mem_swap_kb": {
                              "type": "string"
                            },
                            "mem_total_kb": {
                              "type": "string"
                            },
                            "os": {
                              "type": "string"
                            },
                            "osd_data": {
                              "type": "string"
                            },
                            "osd_objectstore": {
                              "type": "string"
                            },
                            "rotational": {
                              "type": "string"
                            }
                          }
                        },
                        "2": {
                          "type": "object",
                          "properties": {
                            "hostname": {
                              "type": "string"
                            },
                            "arch": {
                              "type": "string"
                            },
                            "back_addr": {
                              "type": "string"
                            },
                            "back_iface": {
                              "type": "string"
                            },
                            "bluefs": {
                              "type": "string"
                            },
                            "bluefs_db_access_mode": {
                              "type": "string"
                            },
                            "bluefs_db_block_size": {
                              "type": "string"
                            },
                            "bluefs_db_driver": {
                              "type": "string"
                            },
                            "bluefs_db_path": {
                              "type": "string"
                            },
                            "bluefs_db_rotational": {
                              "type": "string"
                            },
                            "bluefs_db_size": {
                              "type": "string"
                            },
                            "bluefs_db_support_discard": {
                              "type": "string"
                            },
                            "bluefs_db_type": {
                              "type": "string"
                            },
                            "bluefs_single_shared_device": {
                              "type": "string"
                            },
                            "bluefs_wal_access_mode": {
                              "type": "string"
                            },
                            "bluefs_wal_block_size": {
                              "type": "string"
                            },
                            "bluefs_wal_driver": {
                              "type": "string"
                            },
                            "bluefs_wal_path": {
                              "type": "string"
                            },
                            "bluefs_wal_rotational": {
                              "type": "string"
                            },
                            "bluefs_wal_size": {
                              "type": "string"
                            },
                            "bluefs_wal_support_discard": {
                              "type": "string"
                            },
                            "bluefs_wal_type": {
                              "type": "string"
                            },
                            "bluestore_bdev_access_mode": {
                              "type": "string"
                            },
                            "bluestore_bdev_block_size": {
                              "type": "string"
                            },
                            "bluestore_bdev_driver": {
                              "type": "string"
                            },
                            "bluestore_bdev_path": {
                              "type": "string"
                            },
                            "bluestore_bdev_rotational": {
                              "type": "string"
                            },
                            "bluestore_bdev_size": {
                              "type": "string"
                            },
                            "bluestore_bdev_support_discard": {
                              "type": "string"
                            },
                            "bluestore_bdev_type": {
                              "type": "string"
                            },
                            "ceph_release": {
                              "type": "string"
                            },
                            "ceph_version": {
                              "type": "string"
                            },
                            "ceph_version_short": {
                              "type": "string"
                            },
                            "cpu": {
                              "type": "string"
                            },
                            "default_device_class": {
                              "type": "string"
                            },
                            "device_ids": {
                              "type": "string"
                            },
                            "devices": {
                              "type": "string"
                            },
                            "distro": {
                              "type": "string"
                            },
                            "distro_description": {
                              "type": "string"
                            },
                            "distro_version": {
                              "type": "string"
                            },
                            "front_addr": {
                              "type": "string"
                            },
                            "front_iface": {
                              "type": "string"
                            },
                            "hb_back_addr": {
                              "type": "string"
                            },
                            "hb_front_addr": {
                              "type": "string"
                            },
                            "journal_rotational": {
                              "type": "string"
                            },
                            "kernel_description": {
                              "type": "string"
                            },
                            "kernel_version": {
                              "type": "string"
                            },
                            "mem_swap_kb": {
                              "type": "string"
                            },
                            "mem_total_kb": {
                              "type": "string"
                            },
                            "os": {
                              "type": "string"
                            },
                            "osd_data": {
                              "type": "string"
                            },
                            "osd_objectstore": {
                              "type": "string"
                            },
                            "rotational": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "scrub_status": {
                  "type": "string"
                },
                "pg_info": {
                  "type": "object",
                  "properties": {
                    "statuses": {
                      "type": "object",
                      "properties": {
                        "active+clean": {
                          "type": "integer"
                        }
                      }
                    },
                    "pgs_per_osd": {
                      "type": "integer"
                    }
                  }
                },
                "mgr_map": {
                  "type": "object",
                  "properties": {
                    "epoch": {
                      "type": "integer"
                    },
                    "active_gid": {
                      "type": "integer"
                    },
                    "active_name": {
                      "type": "string"
                    },
                    "active_addrs": {
                      "type": "object",
                      "properties": {
                        "addrvec": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string"
                              },
                              "nonce": {
                                "type": "integer"
                              },
                              "addr": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "available": {
                      "type": "boolean"
                    },
                    "standbys": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "modules": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "available_modules": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "can_run": {
                            "type": "boolean"
                          },
                          "error_string": {
                            "type": "string"
                          },
                          "module_options": {
                            "type": "object",
                            "properties": {
                              "identifier": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string"
                                  },
                                  "level": {
                                    "type": "string"
                                  },
                                  "flags": {
                                    "type": "integer"
                                  },
                                  "default_value": {
                                    "type": "string"
                                  },
                                  "min": {
                                    "type": "string"
                                  },
                                  "max": {
                                    "type": "string"
                                  },
                                  "enum_allowed": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  },
                                  "desc": {
                                    "type": "string"
                                  },
                                  "long_desc": {
                                    "type": "string"
                                  },
                                  "tags": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  },
                                  "see_also": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  }
                                }
                              },
                              "interval": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string"
                                  },
                                  "level": {
                                    "type": "string"
                                  },
                                  "flags": {
                                    "type": "integer"
                                  },
                                  "default_value": {
                                    "type": "string"
                                  },
                                  "min": {
                                    "type": "string"
                                  },
                                  "max": {
                                    "type": "string"
                                  },
                                  "enum_allowed": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  },
                                  "desc": {
                                    "type": "string"
                                  },
                                  "long_desc": {
                                    "type": "string"
                                  },
                                  "tags": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  },
                                  "see_also": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  }
                                }
                              },
                              "zabbix_host": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string"
                                  },
                                  "level": {
                                    "type": "string"
                                  },
                                  "flags": {
                                    "type": "integer"
                                  },
                                  "default_value": {
                                    "type": "string"
                                  },
                                  "min": {
                                    "type": "string"
                                  },
                                  "max": {
                                    "type": "string"
                                  },
                                  "enum_allowed": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  },
                                  "desc": {
                                    "type": "string"
                                  },
                                  "long_desc": {
                                    "type": "string"
                                  },
                                  "tags": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  },
                                  "see_also": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  }
                                }
                              },
                              "zabbix_port": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string"
                                  },
                                  "level": {
                                    "type": "string"
                                  },
                                  "flags": {
                                    "type": "integer"
                                  },
                                  "default_value": {
                                    "type": "string"
                                  },
                                  "min": {
                                    "type": "string"
                                  },
                                  "max": {
                                    "type": "string"
                                  },
                                  "enum_allowed": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  },
                                  "desc": {
                                    "type": "string"
                                  },
                                  "long_desc": {
                                    "type": "string"
                                  },
                                  "tags": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  },
                                  "see_also": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  }
                                }
                              },
                              "zabbix_sender": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string"
                                  },
                                  "level": {
                                    "type": "string"
                                  },
                                  "flags": {
                                    "type": "integer"
                                  },
                                  "default_value": {
                                    "type": "string"
                                  },
                                  "min": {
                                    "type": "string"
                                  },
                                  "max": {
                                    "type": "string"
                                  },
                                  "enum_allowed": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  },
                                  "desc": {
                                    "type": "string"
                                  },
                                  "long_desc": {
                                    "type": "string"
                                  },
                                  "tags": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  },
                                  "see_also": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "services": {
                      "type": "object",
                      "properties": {
                        "dashboard": {
                          "type": "string"
                        },
                        "restful": {
                          "type": "string"
                        }
                      }
                    },
                    "always_on_modules": {
                      "type": "object",
                      "properties": {
                        "nautilus": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "active_change": {
                      "type": "string"
                    }
                  }
                },
                "pools": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "pool": {
                        "type": "integer"
                      },
                      "pool_name": {
                        "type": "string"
                      },
                      "flags": {
                        "type": "integer"
                      },
                      "flags_names": {
                        "type": "string"
                      },
                      "type": {
                        "type": "integer"
                      },
                      "size": {
                        "type": "integer"
                      },
                      "min_size": {
                        "type": "integer"
                      },
                      "crush_rule": {
                        "type": "integer"
                      },
                      "object_hash": {
                        "type": "integer"
                      },
                      "pg_autoscale_mode": {
                        "type": "string"
                      },
                      "pg_num": {
                        "type": "integer"
                      },
                      "pg_placement_num": {
                        "type": "integer"
                      },
                      "pg_placement_num_target": {
                        "type": "integer"
                      },
                      "pg_num_target": {
                        "type": "integer"
                      },
                      "pg_num_pending": {
                        "type": "integer"
                      },
                      "pg_num_dec_last_epoch_started": {
                        "type": "integer"
                      },
                      "pg_num_dec_last_epoch_clean": {
                        "type": "integer"
                      },
                      "auid": {
                        "type": "integer"
                      },
                      "snap_mode": {
                        "type": "string"
                      },
                      "snap_seq": {
                        "type": "integer"
                      },
                      "snap_epoch": {
                        "type": "integer"
                      },
                      "pool_snaps": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "quota_max_bytes": {
                        "type": "integer"
                      },
                      "quota_max_objects": {
                        "type": "integer"
                      },
                      "tiers": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "tier_of": {
                        "type": "integer"
                      },
                      "read_tier": {
                        "type": "integer"
                      },
                      "write_tier": {
                        "type": "integer"
                      },
                      "cache_mode": {
                        "type": "string"
                      },
                      "target_max_bytes": {
                        "type": "integer"
                      },
                      "target_max_objects": {
                        "type": "integer"
                      },
                      "cache_target_dirty_ratio_micro": {
                        "type": "integer"
                      },
                      "cache_target_dirty_high_ratio_micro": {
                        "type": "integer"
                      },
                      "cache_target_full_ratio_micro": {
                        "type": "integer"
                      },
                      "cache_min_flush_age": {
                        "type": "integer"
                      },
                      "cache_min_evict_age": {
                        "type": "integer"
                      },
                      "erasure_code_profile": {
                        "type": "string"
                      },
                      "hit_set_params": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          }
                        }
                      },
                      "hit_set_period": {
                        "type": "integer"
                      },
                      "hit_set_count": {
                        "type": "integer"
                      },
                      "use_gmt_hitset": {
                        "type": "boolean"
                      },
                      "min_read_recency_for_promote": {
                        "type": "integer"
                      },
                      "min_write_recency_for_promote": {
                        "type": "integer"
                      },
                      "hit_set_grade_decay_rate": {
                        "type": "integer"
                      },
                      "hit_set_search_last_n": {
                        "type": "integer"
                      },
                      "grade_table": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "stripe_width": {
                        "type": "integer"
                      },
                      "expected_num_objects": {
                        "type": "integer"
                      },
                      "fast_read": {
                        "type": "boolean"
                      },
                      "options": {
                        "type": "object"
                      },
                      "application_metadata": {
                        "type": "object",
                        "properties": {
                          "cephfs": {
                            "type": "object",
                            "properties": {
                              "metadata": {
                                "type": "string"
                              }
                            }
                          },
                          "rgw": {
                            "type": "object"
                          }
                        }
                      },
                      "create_time": {
                        "type": "string"
                      },
                      "last_change": {
                        "type": "string"
                      },
                      "last_force_op_resend": {
                        "type": "string"
                      },
                      "last_force_op_resend_prenautilus": {
                        "type": "string"
                      },
                      "last_force_op_resend_preluminous": {
                        "type": "string"
                      },
                      "removed_snaps": {
                        "type": "string"
                      },
                      "pg_status": {
                        "type": "object",
                        "properties": {
                          "active+clean": {
                            "type": "integer"
                          }
                        }
                      },
                      "stats": {
                        "type": "object",
                        "properties": {
                          "stored": {
                            "type": "object",
                            "properties": {
                              "latest": {
                                "type": "integer"
                              },
                              "rate": {
                                "type": "integer"
                              },
                              "series": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "objects": {
                            "type": "object",
                            "properties": {
                              "latest": {
                                "type": "integer"
                              },
                              "rate": {
                                "type": "integer"
                              },
                              "series": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "kb_used": {
                            "type": "object",
                            "properties": {
                              "latest": {
                                "type": "integer"
                              },
                              "rate": {
                                "type": "integer"
                              },
                              "series": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "bytes_used": {
                            "type": "object",
                            "properties": {
                              "latest": {
                                "type": "integer"
                              },
                              "rate": {
                                "type": "integer"
                              },
                              "series": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "percent_used": {
                            "type": "object",
                            "properties": {
                              "latest": {
                                "type": [
                                  "integer",
                                  "number"
                                ]
                              },
                              "rate": {
                                "type": "integer"
                              },
                              "series": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "max_avail": {
                            "type": "object",
                            "properties": {
                              "latest": {
                                "type": "integer"
                              },
                              "rate": {
                                "type": "integer"
                              },
                              "series": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "quota_objects": {
                            "type": "object",
                            "properties": {
                              "latest": {
                                "type": "integer"
                              },
                              "rate": {
                                "type": "integer"
                              },
                              "series": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "quota_bytes": {
                            "type": "object",
                            "properties": {
                              "latest": {
                                "type": "integer"
                              },
                              "rate": {
                                "type": "integer"
                              },
                              "series": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "dirty": {
                            "type": "object",
                            "properties": {
                              "latest": {
                                "type": "integer"
                              },
                              "rate": {
                                "type": "integer"
                              },
                              "series": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "rd": {
                            "type": "object",
                            "properties": {
                              "latest": {
                                "type": "integer"
                              },
                              "rate": {
                                "type": "integer"
                              },
                              "series": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "rd_bytes": {
                            "type": "object",
                            "properties": {
                              "latest": {
                                "type": "integer"
                              },
                              "rate": {
                                "type": "integer"
                              },
                              "series": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "wr": {
                            "type": "object",
                            "properties": {
                              "latest": {
                                "type": "integer"
                              },
                              "rate": {
                                "type": "integer"
                              },
                              "series": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "wr_bytes": {
                            "type": "object",
                            "properties": {
                              "latest": {
                                "type": "integer"
                              },
                              "rate": {
                                "type": "integer"
                              },
                              "series": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "compress_bytes_used": {
                            "type": "object",
                            "properties": {
                              "latest": {
                                "type": "integer"
                              },
                              "rate": {
                                "type": "integer"
                              },
                              "series": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "compress_under_bytes": {
                            "type": "object",
                            "properties": {
                              "latest": {
                                "type": "integer"
                              },
                              "rate": {
                                "type": "integer"
                              },
                              "series": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "stored_raw": {
                            "type": "object",
                            "properties": {
                              "latest": {
                                "type": "integer"
                              },
                              "rate": {
                                "type": "integer"
                              },
                              "series": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "df": {
                  "type": "object",
                  "properties": {
                    "stats": {
                      "type": "object",
                      "properties": {
                        "total_bytes": {
                          "type": "integer"
                        },
                        "total_avail_bytes": {
                          "type": "integer"
                        },
                        "total_used_bytes": {
                          "type": "integer"
                        },
                        "total_used_raw_bytes": {
                          "type": "integer"
                        },
                        "total_used_raw_ratio": {
                          "type": "number"
                        },
                        "total_objects": {
                          "type": "integer"
                        }
                      }
                    },
                    "pools": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "id": {
                            "type": "integer"
                          },
                          "stats": {
                            "type": "object",
                            "properties": {
                              "stored": {
                                "type": "integer"
                              },
                              "objects": {
                                "type": "integer"
                              },
                              "kb_used": {
                                "type": "integer"
                              },
                              "bytes_used": {
                                "type": "integer"
                              },
                              "percent_used": {
                                "type": [
                                  "integer",
                                  "number"
                                ]
                              },
                              "max_avail": {
                                "type": "integer"
                              },
                              "quota_objects": {
                                "type": "integer"
                              },
                              "quota_bytes": {
                                "type": "integer"
                              },
                              "dirty": {
                                "type": "integer"
                              },
                              "rd": {
                                "type": "integer"
                              },
                              "rd_bytes": {
                                "type": "integer"
                              },
                              "wr": {
                                "type": "integer"
                              },
                              "wr_bytes": {
                                "type": "integer"
                              },
                              "compress_bytes_used": {
                                "type": "integer"
                              },
                              "compress_under_bytes": {
                                "type": "integer"
                              },
                              "stored_raw": {
                                "type": "integer"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "client_perf": {
                  "type": "object",
                  "properties": {
                    "read_bytes_sec": {
                      "type": "integer"
                    },
                    "read_op_per_sec": {
                      "type": "integer"
                    },
                    "write_bytes_sec": {
                      "type": "integer"
                    },
                    "write_op_per_sec": {
                      "type": "integer"
                    },
                    "recovering_bytes_per_sec": {
                      "type": "integer"
                    }
                  }
                },
                "hosts": {
                  "type": "integer"
                },
                "rgw": {
                  "type": "integer"
                },
                "iscsi_daemons": {
                  "type": "integer"
                }
              }
            },
            "examples": {
              "application/json": {
                "health": {
                  "checks": [],
                  "status": "HEALTH_OK"
                },
                "mon_status": {
                  "name": "c",
                  "rank": 2,
                  "state": "peon",
                  "election_epoch": 8,
                  "quorum": [
                    0,
                    1,
                    2
                  ],
                  "quorum_age": 3334,
                  "features": {
                    "required_con": "2449958747315912708",
                    "required_mon": [
                      "kraken",
                      "luminous",
                      "mimic",
                      "osdmap-prune",
                      "nautilus"
                    ],
                    "quorum_con": "4611087854031142911",
                    "quorum_mon": [
                      "kraken",
                      "luminous",
                      "mimic",
                      "osdmap-prune",
                      "nautilus"
                    ]
                  },
                  "outside_quorum": [],
                  "extra_probe_peers": [],
                  "sync_provider": [],
                  "monmap": {
                    "epoch": 1,
                    "fsid": "ad73d3de-7e62-4cc3-88d8-432dc7bb3fd1",
                    "modified": "2019-01-10 03:32:26.424076",
                    "created": "2019-01-10 03:32:26.424076",
                    "features": {
                      "persistent": [
                        "kraken",
                        "luminous",
                        "mimic",
                        "osdmap-prune",
                        "nautilus"
                      ],
                      "optional": []
                    },
                    "mons": [
                      {
                        "rank": 0,
                        "name": "a",
                        "addr": "147.2.214.230:40839/0",
                        "public_addr": "147.2.214.230:40839/0"
                      },
                      {
                        "rank": 1,
                        "name": "b",
                        "addr": "147.2.214.230:40840/0",
                        "public_addr": "147.2.214.230:40840/0"
                      },
                      {
                        "rank": 2,
                        "name": "c",
                        "addr": "147.2.214.230:40841/0",
                        "public_addr": "147.2.214.230:40841/0"
                      }
                    ]
                  },
                  "feature_map": {
                    "mon": [
                      {
                        "features": "0x3ffddff8ffa4ffff",
                        "release": "luminous",
                        "num": 1
                      }
                    ],
                    "mds": [
                      {
                        "features": "0x3ffddff8ffa4ffff",
                        "release": "luminous",
                        "num": 1
                      }
                    ],
                    "osd": [
                      {
                        "features": "0x3ffddff8ffa4ffff",
                        "release": "luminous",
                        "num": 2
                      }
                    ],
                    "mgr": [
                      {
                        "features": "0x3ffddff8ffa4ffff",
                        "release": "luminous",
                        "num": 1
                      }
                    ]
                  }
                },
                "fs_map": {
                  "epoch": 6,
                  "default_fscid": 1,
                  "compat": {
                    "compat": {},
                    "ro_compat": {},
                    "incompat": {
                      "feature_1": "base v0.20",
                      "feature_2": "client writeable ranges",
                      "feature_3": "default file layouts on dirs",
                      "feature_4": "dir inode in separate object",
                      "feature_5": "mds uses versioned encoding",
                      "feature_6": "dirfrag is stored in omap",
                      "feature_8": "no anchor table",
                      "feature_9": "file layout v2",
                      "feature_10": "snaprealm v2"
                    }
                  },
                  "feature_flags": {
                    "enable_multiple": false,
                    "ever_enabled_multiple": false
                  },
                  "standbys": [
                    {
                      "gid": 4167,
                      "name": "b",
                      "rank": -1,
                      "incarnation": 0,
                      "state_seq": 1,
                      "addrs": {
                        "addrvec": [
                          {
                            "type": "legacy",
                            "nonce": 3371778549,
                            "addr": "147.2.214.230:6814"
                          }
                        ]
                      },
                      "standby_for_rank": -1,
                      "standby_for_fscid": -1,
                      "standby_for_name": "",
                      "standby_replay": false,
                      "export_targets": [],
                      "features": 4611087854031143000,
                      "epoch": 3,
                      "state": "up:standby",
                      "addr": "147.2.214.230:6814/3371778549"
                    },
                    {
                      "gid": 4198,
                      "name": "c",
                      "rank": -1,
                      "incarnation": 0,
                      "state_seq": 1,
                      "addrs": {
                        "addrvec": [
                          {
                            "type": "legacy",
                            "nonce": 3658121377,
                            "addr": "147.2.214.230:6815"
                          }
                        ]
                      },
                      "standby_for_rank": -1,
                      "standby_for_fscid": -1,
                      "standby_for_name": "",
                      "standby_replay": false,
                      "export_targets": [],
                      "features": 4611087854031143000,
                      "epoch": 3,
                      "state": "up:standby",
                      "addr": "147.2.214.230:6815/3658121377"
                    }
                  ],
                  "filesystems": [
                    {
                      "mdsmap": {
                        "epoch": 5,
                        "flags": 18,
                        "ever_allowed_features": 0,
                        "explicitly_allowed_features": 0,
                        "tableserver": 0,
                        "root": 0,
                        "session_timeout": 60,
                        "session_autoclose": 300,
                        "max_file_size": 1099511627776,
                        "last_failure": 0,
                        "last_failure_osd_epoch": 0,
                        "compat": {
                          "compat": {},
                          "ro_compat": {},
                          "incompat": {
                            "feature_1": "base v0.20",
                            "feature_2": "client writeable ranges",
                            "feature_3": "default file layouts on dirs",
                            "feature_4": "dir inode in separate object",
                            "feature_5": "mds uses versioned encoding",
                            "feature_6": "dirfrag is stored in omap",
                            "feature_8": "no anchor table",
                            "feature_9": "file layout v2",
                            "feature_10": "snaprealm v2"
                          }
                        },
                        "max_mds": 1,
                        "in": [
                          0
                        ],
                        "up": {
                          "mds_0": 4205
                        },
                        "failed": [],
                        "damaged": [],
                        "stopped": [],
                        "info": {
                          "gid_4205": {
                            "gid": 4205,
                            "name": "a",
                            "rank": 0,
                            "incarnation": 4,
                            "state_seq": 4,
                            "addrs": {
                              "addrvec": [
                                {
                                  "type": "legacy",
                                  "nonce": 831791083,
                                  "addr": "147.2.214.230:6813"
                                }
                              ]
                            },
                            "standby_for_rank": -1,
                            "standby_for_fscid": -1,
                            "standby_for_name": "",
                            "standby_replay": false,
                            "export_targets": [],
                            "features": 4611087854031143000,
                            "state": "up:active",
                            "addr": "147.2.214.230:6813/831791083"
                          }
                        },
                        "data_pools": [
                          2
                        ],
                        "metadata_pool": 1,
                        "enabled": true,
                        "fs_name": "a",
                        "balancer": "",
                        "standby_count_wanted": 1,
                        "created": "2019-01-10 03:33:19.456554",
                        "modified": "2019-01-10 03:33:20.841091",
                        "min_compat_client": "-1 (unspecified)"
                      },
                      "id": 1
                    }
                  ]
                },
                "osd_map": {
                  "epoch": 23,
                  "flags": "sortbitwise,recovery_deletes,purged_snapdirs",
                  "flags_num": 1605632,
                  "flags_set": [
                    "purged_snapdirs",
                    "recovery_deletes",
                    "sortbitwise"
                  ],
                  "crush_version": 7,
                  "full_ratio": 0.9900000095367432,
                  "backfillfull_ratio": 0.9900000095367432,
                  "nearfull_ratio": 0.9900000095367432,
                  "cluster_snapshot": "",
                  "pool_max": 6,
                  "max_osd": 3,
                  "require_min_compat_client": "jewel",
                  "min_compat_client": "jewel",
                  "require_osd_release": "nautilus",
                  "pools": [
                    {
                      "pool": 1,
                      "pool_name": "cephfs.a.meta",
                      "flags": 1,
                      "flags_names": "hashpspool",
                      "type": 1,
                      "size": 3,
                      "min_size": 1,
                      "crush_rule": 0,
                      "object_hash": 2,
                      "pg_autoscale_mode": "warn",
                      "pg_num": 8,
                      "pg_placement_num": 8,
                      "pg_placement_num_target": 8,
                      "pg_num_target": 8,
                      "pg_num_pending": 8,
                      "pg_num_dec_last_epoch_started": 0,
                      "pg_num_dec_last_epoch_clean": 0,
                      "auid": 0,
                      "snap_mode": "selfmanaged",
                      "snap_seq": 0,
                      "snap_epoch": 0,
                      "pool_snaps": [],
                      "quota_max_bytes": 0,
                      "quota_max_objects": 0,
                      "tiers": [],
                      "tier_of": -1,
                      "read_tier": -1,
                      "write_tier": -1,
                      "cache_mode": "none",
                      "target_max_bytes": 0,
                      "target_max_objects": 0,
                      "cache_target_dirty_ratio_micro": 400000,
                      "cache_target_dirty_high_ratio_micro": 600000,
                      "cache_target_full_ratio_micro": 800000,
                      "cache_min_flush_age": 0,
                      "cache_min_evict_age": 0,
                      "erasure_code_profile": "",
                      "hit_set_params": {
                        "type": "none"
                      },
                      "hit_set_period": 0,
                      "hit_set_count": 0,
                      "use_gmt_hitset": true,
                      "min_read_recency_for_promote": 0,
                      "min_write_recency_for_promote": 0,
                      "hit_set_grade_decay_rate": 0,
                      "hit_set_search_last_n": 0,
                      "grade_table": [],
                      "stripe_width": 0,
                      "expected_num_objects": 0,
                      "fast_read": false,
                      "options": {},
                      "application_metadata": {
                        "cephfs": {
                          "metadata": "a"
                        }
                      },
                      "create_time": "2019-01-10 03:33:17.954064",
                      "last_change": "15",
                      "last_force_op_resend": "0",
                      "last_force_op_resend_prenautilus": "0",
                      "last_force_op_resend_preluminous": "0",
                      "removed_snaps": "[]"
                    },
                    {
                      "pool": 2,
                      "pool_name": "cephfs.a.data",
                      "flags": 1,
                      "flags_names": "hashpspool",
                      "type": 1,
                      "size": 3,
                      "min_size": 1,
                      "crush_rule": 0,
                      "object_hash": 2,
                      "pg_autoscale_mode": "warn",
                      "pg_num": 8,
                      "pg_placement_num": 8,
                      "pg_placement_num_target": 8,
                      "pg_num_target": 8,
                      "pg_num_pending": 8,
                      "pg_num_dec_last_epoch_started": 0,
                      "pg_num_dec_last_epoch_clean": 0,
                      "auid": 0,
                      "snap_mode": "selfmanaged",
                      "snap_seq": 0,
                      "snap_epoch": 0,
                      "pool_snaps": [],
                      "quota_max_bytes": 0,
                      "quota_max_objects": 0,
                      "tiers": [],
                      "tier_of": -1,
                      "read_tier": -1,
                      "write_tier": -1,
                      "cache_mode": "none",
                      "target_max_bytes": 0,
                      "target_max_objects": 0,
                      "cache_target_dirty_ratio_micro": 400000,
                      "cache_target_dirty_high_ratio_micro": 600000,
                      "cache_target_full_ratio_micro": 800000,
                      "cache_min_flush_age": 0,
                      "cache_min_evict_age": 0,
                      "erasure_code_profile": "",
                      "hit_set_params": {
                        "type": "none"
                      },
                      "hit_set_period": 0,
                      "hit_set_count": 0,
                      "use_gmt_hitset": true,
                      "min_read_recency_for_promote": 0,
                      "min_write_recency_for_promote": 0,
                      "hit_set_grade_decay_rate": 0,
                      "hit_set_search_last_n": 0,
                      "grade_table": [],
                      "stripe_width": 0,
                      "expected_num_objects": 0,
                      "fast_read": false,
                      "options": {},
                      "application_metadata": {
                        "cephfs": {
                          "data": "a"
                        }
                      },
                      "create_time": "2019-01-10 03:33:18.864813",
                      "last_change": "16",
                      "last_force_op_resend": "0",
                      "last_force_op_resend_prenautilus": "0",
                      "last_force_op_resend_preluminous": "0",
                      "removed_snaps": "[]"
                    },
                    {
                      "pool": 3,
                      "pool_name": ".rgw.root",
                      "flags": 1,
                      "flags_names": "hashpspool",
                      "type": 1,
                      "size": 3,
                      "min_size": 1,
                      "crush_rule": 0,
                      "object_hash": 2,
                      "pg_autoscale_mode": "warn",
                      "pg_num": 8,
                      "pg_placement_num": 8,
                      "pg_placement_num_target": 8,
                      "pg_num_target": 8,
                      "pg_num_pending": 8,
                      "pg_num_dec_last_epoch_started": 0,
                      "pg_num_dec_last_epoch_clean": 0,
                      "auid": 0,
                      "snap_mode": "selfmanaged",
                      "snap_seq": 0,
                      "snap_epoch": 0,
                      "pool_snaps": [],
                      "quota_max_bytes": 0,
                      "quota_max_objects": 0,
                      "tiers": [],
                      "tier_of": -1,
                      "read_tier": -1,
                      "write_tier": -1,
                      "cache_mode": "none",
                      "target_max_bytes": 0,
                      "target_max_objects": 0,
                      "cache_target_dirty_ratio_micro": 400000,
                      "cache_target_dirty_high_ratio_micro": 600000,
                      "cache_target_full_ratio_micro": 800000,
                      "cache_min_flush_age": 0,
                      "cache_min_evict_age": 0,
                      "erasure_code_profile": "",
                      "hit_set_params": {
                        "type": "none"
                      },
                      "hit_set_period": 0,
                      "hit_set_count": 0,
                      "use_gmt_hitset": true,
                      "min_read_recency_for_promote": 0,
                      "min_write_recency_for_promote": 0,
                      "hit_set_grade_decay_rate": 0,
                      "hit_set_search_last_n": 0,
                      "grade_table": [],
                      "stripe_width": 0,
                      "expected_num_objects": 0,
                      "fast_read": false,
                      "options": {},
                      "application_metadata": {
                        "rgw": {}
                      },
                      "create_time": "2019-01-10 03:33:20.837161",
                      "last_change": "17",
                      "last_force_op_resend": "0",
                      "last_force_op_resend_prenautilus": "0",
                      "last_force_op_resend_preluminous": "0",
                      "removed_snaps": "[]"
                    },
                    {
                      "pool": 4,
                      "pool_name": "default.rgw.control",
                      "flags": 1,
                      "flags_names": "hashpspool",
                      "type": 1,
                      "size": 3,
                      "min_size": 1,
                      "crush_rule": 0,
                      "object_hash": 2,
                      "pg_autoscale_mode": "warn",
                      "pg_num": 8,
                      "pg_placement_num": 8,
                      "pg_placement_num_target": 8,
                      "pg_num_target": 8,
                      "pg_num_pending": 8,
                      "pg_num_dec_last_epoch_started": 0,
                      "pg_num_dec_last_epoch_clean": 0,
                      "auid": 0,
                      "snap_mode": "selfmanaged",
                      "snap_seq": 0,
                      "snap_epoch": 0,
                      "pool_snaps": [],
                      "quota_max_bytes": 0,
                      "quota_max_objects": 0,
                      "tiers": [],
                      "tier_of": -1,
                      "read_tier": -1,
                      "write_tier": -1,
                      "cache_mode": "none",
                      "target_max_bytes": 0,
                      "target_max_objects": 0,
                      "cache_target_dirty_ratio_micro": 400000,
                      "cache_target_dirty_high_ratio_micro": 600000,
                      "cache_target_full_ratio_micro": 800000,
                      "cache_min_flush_age": 0,
                      "cache_min_evict_age": 0,
                      "erasure_code_profile": "",
                      "hit_set_params": {
                        "type": "none"
                      },
                      "hit_set_period": 0,
                      "hit_set_count": 0,
                      "use_gmt_hitset": true,
                      "min_read_recency_for_promote": 0,
                      "min_write_recency_for_promote": 0,
                      "hit_set_grade_decay_rate": 0,
                      "hit_set_search_last_n": 0,
                      "grade_table": [],
                      "stripe_width": 0,
                      "expected_num_objects": 0,
                      "fast_read": false,
                      "options": {},
                      "application_metadata": {
                        "rgw": {}
                      },
                      "create_time": "2019-01-10 03:33:22.538496",
                      "last_change": "19",
                      "last_force_op_resend": "0",
                      "last_force_op_resend_prenautilus": "0",
                      "last_force_op_resend_preluminous": "0",
                      "removed_snaps": "[]"
                    },
                    {
                      "pool": 5,
                      "pool_name": "default.rgw.meta",
                      "flags": 1,
                      "flags_names": "hashpspool",
                      "type": 1,
                      "size": 3,
                      "min_size": 1,
                      "crush_rule": 0,
                      "object_hash": 2,
                      "pg_autoscale_mode": "warn",
                      "pg_num": 8,
                      "pg_placement_num": 8,
                      "pg_placement_num_target": 8,
                      "pg_num_target": 8,
                      "pg_num_pending": 8,
                      "pg_num_dec_last_epoch_started": 0,
                      "pg_num_dec_last_epoch_clean": 0,
                      "auid": 0,
                      "snap_mode": "selfmanaged",
                      "snap_seq": 0,
                      "snap_epoch": 0,
                      "pool_snaps": [],
                      "quota_max_bytes": 0,
                      "quota_max_objects": 0,
                      "tiers": [],
                      "tier_of": -1,
                      "read_tier": -1,
                      "write_tier": -1,
                      "cache_mode": "none",
                      "target_max_bytes": 0,
                      "target_max_objects": 0,
                      "cache_target_dirty_ratio_micro": 400000,
                      "cache_target_dirty_high_ratio_micro": 600000,
                      "cache_target_full_ratio_micro": 800000,
                      "cache_min_flush_age": 0,
                      "cache_min_evict_age": 0,
                      "erasure_code_profile": "",
                      "hit_set_params": {
                        "type": "none"
                      },
                      "hit_set_period": 0,
                      "hit_set_count": 0,
                      "use_gmt_hitset": true,
                      "min_read_recency_for_promote": 0,
                      "min_write_recency_for_promote": 0,
                      "hit_set_grade_decay_rate": 0,
                      "hit_set_search_last_n": 0,
                      "grade_table": [],
                      "stripe_width": 0,
                      "expected_num_objects": 0,
                      "fast_read": false,
                      "options": {},
                      "application_metadata": {
                        "rgw": {}
                      },
                      "create_time": "2019-01-10 03:33:24.590135",
                      "last_change": "21",
                      "last_force_op_resend": "0",
                      "last_force_op_resend_prenautilus": "0",
                      "last_force_op_resend_preluminous": "0",
                      "removed_snaps": "[]"
                    },
                    {
                      "pool": 6,
                      "pool_name": "default.rgw.log",
                      "flags": 1,
                      "flags_names": "hashpspool",
                      "type": 1,
                      "size": 3,
                      "min_size": 1,
                      "crush_rule": 0,
                      "object_hash": 2,
                      "pg_autoscale_mode": "warn",
                      "pg_num": 8,
                      "pg_placement_num": 8,
                      "pg_placement_num_target": 8,
                      "pg_num_target": 8,
                      "pg_num_pending": 8,
                      "pg_num_dec_last_epoch_started": 0,
                      "pg_num_dec_last_epoch_clean": 0,
                      "auid": 0,
                      "snap_mode": "selfmanaged",
                      "snap_seq": 0,
                      "snap_epoch": 0,
                      "pool_snaps": [],
                      "quota_max_bytes": 0,
                      "quota_max_objects": 0,
                      "tiers": [],
                      "tier_of": -1,
                      "read_tier": -1,
                      "write_tier": -1,
                      "cache_mode": "none",
                      "target_max_bytes": 0,
                      "target_max_objects": 0,
                      "cache_target_dirty_ratio_micro": 400000,
                      "cache_target_dirty_high_ratio_micro": 600000,
                      "cache_target_full_ratio_micro": 800000,
                      "cache_min_flush_age": 0,
                      "cache_min_evict_age": 0,
                      "erasure_code_profile": "",
                      "hit_set_params": {
                        "type": "none"
                      },
                      "hit_set_period": 0,
                      "hit_set_count": 0,
                      "use_gmt_hitset": true,
                      "min_read_recency_for_promote": 0,
                      "min_write_recency_for_promote": 0,
                      "hit_set_grade_decay_rate": 0,
                      "hit_set_search_last_n": 0,
                      "grade_table": [],
                      "stripe_width": 0,
                      "expected_num_objects": 0,
                      "fast_read": false,
                      "options": {},
                      "application_metadata": {
                        "rgw": {}
                      },
                      "create_time": "2019-01-10 03:33:26.514656",
                      "last_change": "23",
                      "last_force_op_resend": "0",
                      "last_force_op_resend_prenautilus": "0",
                      "last_force_op_resend_preluminous": "0",
                      "removed_snaps": "[]"
                    }
                  ],
                  "osds": [
                    {
                      "osd": 0,
                      "up": 1,
                      "in": 1,
                      "weight": 1,
                      "primary_affinity": 1,
                      "last_clean_begin": 0,
                      "last_clean_end": 0,
                      "up_from": 5,
                      "up_thru": 21,
                      "down_at": 0,
                      "lost_at": 0,
                      "public_addrs": {
                        "addrvec": [
                          {
                            "type": "legacy",
                            "nonce": 1324,
                            "addr": "147.2.214.230:6801"
                          }
                        ]
                      },
                      "cluster_addrs": {
                        "addrvec": [
                          {
                            "type": "legacy",
                            "nonce": 1324,
                            "addr": "147.2.214.230:6802"
                          }
                        ]
                      },
                      "heartbeat_back_addrs": {
                        "addrvec": [
                          {
                            "type": "legacy",
                            "nonce": 1324,
                            "addr": "147.2.214.230:6804"
                          }
                        ]
                      },
                      "heartbeat_front_addr": {
                        "addrvec": [
                          {
                            "type": "legacy",
                            "nonce": 1324,
                            "addr": "147.2.214.230:6803"
                          }
                        ]
                      },
                      "state": [
                        "exists",
                        "up"
                      ],
                      "uuid": "19914905-23be-43b5-897e-4012ca7aebb8",
                      "public_addr": "147.2.214.230:6801/1324",
                      "cluster_addr": "147.2.214.230:6802/1324"
                    },
                    {
                      "osd": 1,
                      "up": 1,
                      "in": 1,
                      "weight": 1,
                      "primary_affinity": 1,
                      "last_clean_begin": 0,
                      "last_clean_end": 0,
                      "up_from": 8,
                      "up_thru": 21,
                      "down_at": 0,
                      "lost_at": 0,
                      "public_addrs": {
                        "addrvec": [
                          {
                            "type": "legacy",
                            "nonce": 1633,
                            "addr": "147.2.214.230:6805"
                          }
                        ]
                      },
                      "cluster_addrs": {
                        "addrvec": [
                          {
                            "type": "legacy",
                            "nonce": 1633,
                            "addr": "147.2.214.230:6806"
                          }
                        ]
                      },
                      "heartbeat_back_addrs": {
                        "addrvec": [
                          {
                            "type": "legacy",
                            "nonce": 1633,
                            "addr": "147.2.214.230:6808"
                          }
                        ]
                      },
                      "heartbeat_front_addr": {
                        "addrvec": [
                          {
                            "type": "legacy",
                            "nonce": 1633,
                            "addr": "147.2.214.230:6807"
                          }
                        ]
                      },
                      "state": [
                        "exists",
                        "up"
                      ],
                      "uuid": "b6a2c41c-ca19-4883-a980-9abe348f1bcf",
                      "public_addr": "147.2.214.230:6805/1633",
                      "cluster_addr": "147.2.214.230:6806/1633"
                    },
                    {
                      "osd": 2,
                      "up": 1,
                      "in": 1,
                      "weight": 1,
                      "primary_affinity": 1,
                      "last_clean_begin": 0,
                      "last_clean_end": 0,
                      "up_from": 11,
                      "up_thru": 19,
                      "down_at": 0,
                      "lost_at": 0,
                      "public_addrs": {
                        "addrvec": [
                          {
                            "type": "legacy",
                            "nonce": 1942,
                            "addr": "147.2.214.230:6809"
                          }
                        ]
                      },
                      "cluster_addrs": {
                        "addrvec": [
                          {
                            "type": "legacy",
                            "nonce": 1942,
                            "addr": "147.2.214.230:6810"
                          }
                        ]
                      },
                      "heartbeat_back_addrs": {
                        "addrvec": [
                          {
                            "type": "legacy",
                            "nonce": 1942,
                            "addr": "147.2.214.230:6812"
                          }
                        ]
                      },
                      "heartbeat_front_addr": {
                        "addrvec": [
                          {
                            "type": "legacy",
                            "nonce": 1942,
                            "addr": "147.2.214.230:6811"
                          }
                        ]
                      },
                      "state": [
                        "exists",
                        "up"
                      ],
                      "uuid": "a063ad39-c36b-49f6-a008-54f4f6be8830",
                      "public_addr": "147.2.214.230:6809/1942",
                      "cluster_addr": "147.2.214.230:6810/1942"
                    }
                  ],
                  "osd_xinfo": [
                    {
                      "osd": 0,
                      "laggy_probability": 0,
                      "laggy_interval": 0,
                      "features": 4611087854031143000,
                      "old_weight": 0,
                      "down_stamp": "0.000000"
                    },
                    {
                      "osd": 1,
                      "laggy_probability": 0,
                      "laggy_interval": 0,
                      "features": 4611087854031143000,
                      "old_weight": 0,
                      "down_stamp": "0.000000"
                    },
                    {
                      "osd": 2,
                      "laggy_probability": 0,
                      "laggy_interval": 0,
                      "features": 4611087854031143000,
                      "old_weight": 0,
                      "down_stamp": "0.000000"
                    }
                  ],
                  "pg_upmap": [],
                  "pg_upmap_items": [],
                  "primary_temp": [],
                  "blacklist": {},
                  "erasure_code_profiles": {
                    "default": {
                      "crush-failure-domain": "osd",
                      "k": "2",
                      "m": "1",
                      "plugin": "jerasure",
                      "technique": "reed_sol_van"
                    }
                  },
                  "removed_snaps_queue": [],
                  "new_removed_snaps": [],
                  "new_purged_snaps": [],
                  "fsid": "ad73d3de-7e62-4cc3-88d8-432dc7bb3fd1",
                  "created": "2019-01-10 03:32:37.797847",
                  "modified": "2019-01-10 03:33:29.011238",
                  "last_up_change": "2019-01-10 03:33:10.959353",
                  "last_in_change": "2019-01-10 03:33:10.959353",
                  "tree": {
                    "nodes": [
                      {
                        "id": -1,
                        "name": "default",
                        "type": "root",
                        "type_id": 10,
                        "children": [
                          -3
                        ]
                      },
                      {
                        "id": -3,
                        "name": "ceph-dev",
                        "type": "host",
                        "type_id": 1,
                        "pool_weights": {},
                        "children": [
                          2,
                          1,
                          0
                        ]
                      },
                      {
                        "id": 0,
                        "device_class": "hdd",
                        "type": "osd",
                        "type_id": 0,
                        "crush_weight": 0.009796142578125,
                        "depth": 2,
                        "pool_weights": {},
                        "exists": 1,
                        "status": "up",
                        "reweight": 1,
                        "primary_affinity": 1,
                        "name": "osd.0"
                      },
                      {
                        "id": 1,
                        "device_class": "hdd",
                        "type": "osd",
                        "type_id": 0,
                        "crush_weight": 0.009796142578125,
                        "depth": 2,
                        "pool_weights": {},
                        "exists": 1,
                        "status": "up",
                        "reweight": 1,
                        "primary_affinity": 1,
                        "name": "osd.1"
                      },
                      {
                        "id": 2,
                        "device_class": "hdd",
                        "type": "osd",
                        "type_id": 0,
                        "crush_weight": 0.009796142578125,
                        "depth": 2,
                        "pool_weights": {},
                        "exists": 1,
                        "status": "up",
                        "reweight": 1,
                        "primary_affinity": 1,
                        "name": "osd.2"
                      }
                    ],
                    "stray": []
                  },
                  "crush": {
                    "devices": [
                      {
                        "id": 0,
                        "name": "osd.0",
                        "class": "hdd"
                      },
                      {
                        "id": 1,
                        "name": "osd.1",
                        "class": "hdd"
                      },
                      {
                        "id": 2,
                        "name": "osd.2",
                        "class": "hdd"
                      }
                    ],
                    "types": [
                      {
                        "type_id": 0,
                        "name": "osd"
                      },
                      {
                        "type_id": 1,
                        "name": "host"
                      },
                      {
                        "type_id": 2,
                        "name": "chassis"
                      },
                      {
                        "type_id": 3,
                        "name": "rack"
                      },
                      {
                        "type_id": 4,
                        "name": "row"
                      },
                      {
                        "type_id": 5,
                        "name": "pdu"
                      },
                      {
                        "type_id": 6,
                        "name": "pod"
                      },
                      {
                        "type_id": 7,
                        "name": "room"
                      },
                      {
                        "type_id": 8,
                        "name": "datacenter"
                      },
                      {
                        "type_id": 9,
                        "name": "region"
                      },
                      {
                        "type_id": 10,
                        "name": "root"
                      }
                    ],
                    "buckets": [
                      {
                        "id": -1,
                        "name": "default",
                        "type_id": 10,
                        "type_name": "root",
                        "weight": 1926,
                        "alg": "straw2",
                        "hash": "rjenkins1",
                        "items": [
                          {
                            "id": -3,
                            "weight": 1926,
                            "pos": 0
                          }
                        ]
                      },
                      {
                        "id": -2,
                        "name": "default~hdd",
                        "type_id": 10,
                        "type_name": "root",
                        "weight": 1926,
                        "alg": "straw2",
                        "hash": "rjenkins1",
                        "items": [
                          {
                            "id": -4,
                            "weight": 1926,
                            "pos": 0
                          }
                        ]
                      },
                      {
                        "id": -3,
                        "name": "ceph-dev",
                        "type_id": 1,
                        "type_name": "host",
                        "weight": 1926,
                        "alg": "straw2",
                        "hash": "rjenkins1",
                        "items": [
                          {
                            "id": 0,
                            "weight": 642,
                            "pos": 0
                          },
                          {
                            "id": 1,
                            "weight": 642,
                            "pos": 1
                          },
                          {
                            "id": 2,
                            "weight": 642,
                            "pos": 2
                          }
                        ]
                      },
                      {
                        "id": -4,
                        "name": "ceph-dev~hdd",
                        "type_id": 1,
                        "type_name": "host",
                        "weight": 1926,
                        "alg": "straw2",
                        "hash": "rjenkins1",
                        "items": [
                          {
                            "id": 0,
                            "weight": 642,
                            "pos": 0
                          },
                          {
                            "id": 1,
                            "weight": 642,
                            "pos": 1
                          },
                          {
                            "id": 2,
                            "weight": 642,
                            "pos": 2
                          }
                        ]
                      }
                    ],
                    "rules": [
                      {
                        "rule_id": 0,
                        "rule_name": "replicated_rule",
                        "ruleset": 0,
                        "type": 1,
                        "min_size": 1,
                        "max_size": 10,
                        "steps": [
                          {
                            "op": "take",
                            "item": -1,
                            "item_name": "default"
                          },
                          {
                            "op": "choose_firstn",
                            "num": 0,
                            "type": "osd"
                          },
                          {
                            "op": "emit"
                          }
                        ]
                      }
                    ],
                    "tunables": {
                      "choose_local_tries": 0,
                      "choose_local_fallback_tries": 0,
                      "choose_total_tries": 50,
                      "chooseleaf_descend_once": 1,
                      "chooseleaf_vary_r": 1,
                      "chooseleaf_stable": 1,
                      "straw_calc_version": 1,
                      "allowed_bucket_algs": 54,
                      "profile": "jewel",
                      "optimal_tunables": 1,
                      "legacy_tunables": 0,
                      "minimum_required_version": "jewel",
                      "require_feature_tunables": 1,
                      "require_feature_tunables2": 1,
                      "has_v2_rules": 0,
                      "require_feature_tunables3": 1,
                      "has_v3_rules": 0,
                      "has_v4_buckets": 1,
                      "require_feature_tunables5": 1,
                      "has_v5_rules": 0
                    },
                    "choose_args": {}
                  },
                  "crush_map_text": {},
                  "osd_metadata": {
                    "0": {
                      "hostname": "ceph-dev",
                      "arch": "x86_64",
                      "back_addr": "147.2.214.230:6802/1324",
                      "back_iface": "eth0",
                      "bluefs": "1",
                      "bluefs_db_access_mode": "file",
                      "bluefs_db_block_size": "4096",
                      "bluefs_db_driver": "KernelDevice",
                      "bluefs_db_path": "/ceph/build/dev/osd0/block.db",
                      "bluefs_db_rotational": "1",
                      "bluefs_db_size": "67108864",
                      "bluefs_db_support_discard": "0",
                      "bluefs_db_type": "hdd",
                      "bluefs_single_shared_device": "0",
                      "bluefs_wal_access_mode": "file",
                      "bluefs_wal_block_size": "4096",
                      "bluefs_wal_driver": "KernelDevice",
                      "bluefs_wal_path": "/ceph/build/dev/osd0/block.wal",
                      "bluefs_wal_rotational": "1",
                      "bluefs_wal_size": "1048576000",
                      "bluefs_wal_support_discard": "0",
                      "bluefs_wal_type": "hdd",
                      "bluestore_bdev_access_mode": "file",
                      "bluestore_bdev_block_size": "4096",
                      "bluestore_bdev_driver": "KernelDevice",
                      "bluestore_bdev_path": "/ceph/build/dev/osd0/block",
                      "bluestore_bdev_rotational": "1",
                      "bluestore_bdev_size": "10737418240",
                      "bluestore_bdev_support_discard": "0",
                      "bluestore_bdev_type": "hdd",
                      "ceph_release": "nautilus",
                      "ceph_version": "ceph version 14.0.1-2176-g41d266b9b9 (41d266b9b957e35f90c4844823d540791a948d1c) nautilus (dev)",
                      "ceph_version_short": "14.0.1-2176-g41d266b9b9",
                      "cpu": "Intel(R) Core(TM) i5-5200U CPU @ 2.20GHz",
                      "default_device_class": "hdd",
                      "device_ids": "",
                      "devices": "",
                      "distro": "opensuse-tumbleweed",
                      "distro_description": "openSUSE Tumbleweed",
                      "distro_version": "20181224",
                      "front_addr": "147.2.214.230:6801/1324",
                      "front_iface": "eth0",
                      "hb_back_addr": "147.2.214.230:6804/1324",
                      "hb_front_addr": "147.2.214.230:6803/1324",
                      "journal_rotational": "1",
                      "kernel_description": "#1 SMP Mon Dec 3 16:46:15 UTC 2018 (b91289f)",
                      "kernel_version": "4.12.14-lp150.12.28-default",
                      "mem_swap_kb": "0",
                      "mem_total_kb": "11982896",
                      "os": "Linux",
                      "osd_data": "/ceph/build/dev/osd0",
                      "osd_objectstore": "bluestore",
                      "rotational": "1"
                    },
                    "1": {
                      "hostname": "ceph-dev",
                      "arch": "x86_64",
                      "back_addr": "147.2.214.230:6806/1633",
                      "back_iface": "eth0",
                      "bluefs": "1",
                      "bluefs_db_access_mode": "file",
                      "bluefs_db_block_size": "4096",
                      "bluefs_db_driver": "KernelDevice",
                      "bluefs_db_path": "/ceph/build/dev/osd1/block.db",
                      "bluefs_db_rotational": "1",
                      "bluefs_db_size": "67108864",
                      "bluefs_db_support_discard": "0",
                      "bluefs_db_type": "hdd",
                      "bluefs_single_shared_device": "0",
                      "bluefs_wal_access_mode": "file",
                      "bluefs_wal_block_size": "4096",
                      "bluefs_wal_driver": "KernelDevice",
                      "bluefs_wal_path": "/ceph/build/dev/osd1/block.wal",
                      "bluefs_wal_rotational": "1",
                      "bluefs_wal_size": "1048576000",
                      "bluefs_wal_support_discard": "0",
                      "bluefs_wal_type": "hdd",
                      "bluestore_bdev_access_mode": "file",
                      "bluestore_bdev_block_size": "4096",
                      "bluestore_bdev_driver": "KernelDevice",
                      "bluestore_bdev_path": "/ceph/build/dev/osd1/block",
                      "bluestore_bdev_rotational": "1",
                      "bluestore_bdev_size": "10737418240",
                      "bluestore_bdev_support_discard": "0",
                      "bluestore_bdev_type": "hdd",
                      "ceph_release": "nautilus",
                      "ceph_version": "ceph version 14.0.1-2176-g41d266b9b9 (41d266b9b957e35f90c4844823d540791a948d1c) nautilus (dev)",
                      "ceph_version_short": "14.0.1-2176-g41d266b9b9",
                      "cpu": "Intel(R) Core(TM) i5-5200U CPU @ 2.20GHz",
                      "default_device_class": "hdd",
                      "device_ids": "",
                      "devices": "",
                      "distro": "opensuse-tumbleweed",
                      "distro_description": "openSUSE Tumbleweed",
                      "distro_version": "20181224",
                      "front_addr": "147.2.214.230:6805/1633",
                      "front_iface": "eth0",
                      "hb_back_addr": "147.2.214.230:6808/1633",
                      "hb_front_addr": "147.2.214.230:6807/1633",
                      "journal_rotational": "1",
                      "kernel_description": "#1 SMP Mon Dec 3 16:46:15 UTC 2018 (b91289f)",
                      "kernel_version": "4.12.14-lp150.12.28-default",
                      "mem_swap_kb": "0",
                      "mem_total_kb": "11982896",
                      "os": "Linux",
                      "osd_data": "/ceph/build/dev/osd1",
                      "osd_objectstore": "bluestore",
                      "rotational": "1"
                    },
                    "2": {
                      "hostname": "ceph-dev",
                      "arch": "x86_64",
                      "back_addr": "147.2.214.230:6810/1942",
                      "back_iface": "eth0",
                      "bluefs": "1",
                      "bluefs_db_access_mode": "file",
                      "bluefs_db_block_size": "4096",
                      "bluefs_db_driver": "KernelDevice",
                      "bluefs_db_path": "/ceph/build/dev/osd2/block.db",
                      "bluefs_db_rotational": "1",
                      "bluefs_db_size": "67108864",
                      "bluefs_db_support_discard": "0",
                      "bluefs_db_type": "hdd",
                      "bluefs_single_shared_device": "0",
                      "bluefs_wal_access_mode": "file",
                      "bluefs_wal_block_size": "4096",
                      "bluefs_wal_driver": "KernelDevice",
                      "bluefs_wal_path": "/ceph/build/dev/osd2/block.wal",
                      "bluefs_wal_rotational": "1",
                      "bluefs_wal_size": "1048576000",
                      "bluefs_wal_support_discard": "0",
                      "bluefs_wal_type": "hdd",
                      "bluestore_bdev_access_mode": "file",
                      "bluestore_bdev_block_size": "4096",
                      "bluestore_bdev_driver": "KernelDevice",
                      "bluestore_bdev_path": "/ceph/build/dev/osd2/block",
                      "bluestore_bdev_rotational": "1",
                      "bluestore_bdev_size": "10737418240",
                      "bluestore_bdev_support_discard": "0",
                      "bluestore_bdev_type": "hdd",
                      "ceph_release": "nautilus",
                      "ceph_version": "ceph version 14.0.1-2176-g41d266b9b9 (41d266b9b957e35f90c4844823d540791a948d1c) nautilus (dev)",
                      "ceph_version_short": "14.0.1-2176-g41d266b9b9",
                      "cpu": "Intel(R) Core(TM) i5-5200U CPU @ 2.20GHz",
                      "default_device_class": "hdd",
                      "device_ids": "",
                      "devices": "",
                      "distro": "opensuse-tumbleweed",
                      "distro_description": "openSUSE Tumbleweed",
                      "distro_version": "20181224",
                      "front_addr": "147.2.214.230:6809/1942",
                      "front_iface": "eth0",
                      "hb_back_addr": "147.2.214.230:6812/1942",
                      "hb_front_addr": "147.2.214.230:6811/1942",
                      "journal_rotational": "1",
                      "kernel_description": "#1 SMP Mon Dec 3 16:46:15 UTC 2018 (b91289f)",
                      "kernel_version": "4.12.14-lp150.12.28-default",
                      "mem_swap_kb": "0",
                      "mem_total_kb": "11982896",
                      "os": "Linux",
                      "osd_data": "/ceph/build/dev/osd2",
                      "osd_objectstore": "bluestore",
                      "rotational": "1"
                    }
                  }
                },
                "scrub_status": "Inactive",
                "pg_info": {
                  "statuses": {
                    "active+clean": 48
                  },
                  "pgs_per_osd": 48
                },
                "mgr_map": {
                  "epoch": 5,
                  "active_gid": 4133,
                  "active_name": "x",
                  "active_addrs": {
                    "addrvec": [
                      {
                        "type": "legacy",
                        "nonce": 944,
                        "addr": "147.2.214.230:6800"
                      }
                    ]
                  },
                  "available": true,
                  "standbys": [],
                  "modules": [
                    "dashboard",
                    "iostat",
                    "restful"
                  ],
                  "available_modules": [
                    {
                      "name": "ansible",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {}
                    },
                    {
                      "name": "balancer",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {
                        "active": {
                          "name": "active",
                          "type": "bool",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "False",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "automatically balance PGs across cluster",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "begin_time": {
                          "name": "begin_time",
                          "type": "str",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "0000",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "beginning time of day to automatically balance",
                          "long_desc": "This is a time of day in the format HHMM.",
                          "tags": [],
                          "see_also": []
                        },
                        "crush_compat_max_iterations": {
                          "name": "crush_compat_max_iterations",
                          "type": "uint",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "25",
                          "min": "1",
                          "max": "250",
                          "enum_allowed": [],
                          "desc": "maximum number of iterations to attempt optimization",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "crush_compat_metrics": {
                          "name": "crush_compat_metrics",
                          "type": "str",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "pgs,objects,bytes",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "metrics with which to calculate OSD utilization",
                          "long_desc": "Value is a list of one or more of \"pgs\", \"objects\", or \"bytes\", and indicates which metrics to use to balance utilization.",
                          "tags": [],
                          "see_also": []
                        },
                        "crush_compat_step": {
                          "name": "crush_compat_step",
                          "type": "float",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "0.5",
                          "min": ".001",
                          "max": ".999",
                          "enum_allowed": [],
                          "desc": "aggressiveness of optimization",
                          "long_desc": ".99 is very aggressive, .01 is less aggressive",
                          "tags": [],
                          "see_also": []
                        },
                        "end_time": {
                          "name": "end_time",
                          "type": "str",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "2400",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "ending time of day to automatically balance",
                          "long_desc": "This is a time of day in the format HHMM.",
                          "tags": [],
                          "see_also": []
                        },
                        "min_score": {
                          "name": "min_score",
                          "type": "float",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "0",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "minimum score, below which no optimization is attempted",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "mode": {
                          "name": "mode",
                          "type": "str",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "none",
                          "min": "",
                          "max": "",
                          "enum_allowed": [
                            "crush-compat",
                            "none",
                            "upmap"
                          ],
                          "desc": "Balancer mode",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "sleep_interval": {
                          "name": "sleep_interval",
                          "type": "secs",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "60",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "how frequently to wake up and attempt optimization",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "upmap_max_deviation": {
                          "name": "upmap_max_deviation",
                          "type": "float",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "0.01",
                          "min": "0",
                          "max": "1",
                          "enum_allowed": [],
                          "desc": "deviation below which no optimization is attempted",
                          "long_desc": "If the ratio between the fullest and least-full OSD is below this value then we stop trying to optimize placement.",
                          "tags": [],
                          "see_also": []
                        },
                        "upmap_max_iterations": {
                          "name": "upmap_max_iterations",
                          "type": "uint",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "10",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "maximum upmap optimization iterations",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        }
                      }
                    },
                    {
                      "name": "crash",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {}
                    },
                    {
                      "name": "dashboard",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {
                        "AUDIT_API_ENABLED": {
                          "name": "AUDIT_API_ENABLED",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "False",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "AUDIT_API_LOG_PAYLOAD": {
                          "name": "AUDIT_API_LOG_PAYLOAD",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "True",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "ENABLE_BROWSABLE_API": {
                          "name": "ENABLE_BROWSABLE_API",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "True",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "GRAFANA_API_PASSWORD": {
                          "name": "GRAFANA_API_PASSWORD",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "admin",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "GRAFANA_API_URL": {
                          "name": "GRAFANA_API_URL",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "GRAFANA_API_USERNAME": {
                          "name": "GRAFANA_API_USERNAME",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "admin",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "REST_REQUESTS_TIMEOUT": {
                          "name": "REST_REQUESTS_TIMEOUT",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "45",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "RGW_API_ACCESS_KEY": {
                          "name": "RGW_API_ACCESS_KEY",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "RGW_API_ADMIN_RESOURCE": {
                          "name": "RGW_API_ADMIN_RESOURCE",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "admin",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "RGW_API_HOST": {
                          "name": "RGW_API_HOST",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "RGW_API_PORT": {
                          "name": "RGW_API_PORT",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "80",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "RGW_API_SCHEME": {
                          "name": "RGW_API_SCHEME",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "http",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "RGW_API_SECRET_KEY": {
                          "name": "RGW_API_SECRET_KEY",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "RGW_API_SSL_VERIFY": {
                          "name": "RGW_API_SSL_VERIFY",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "True",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "RGW_API_USER_ID": {
                          "name": "RGW_API_USER_ID",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "crt_file": {
                          "name": "crt_file",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "jwt_token_ttl": {
                          "name": "jwt_token_ttl",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "key_file": {
                          "name": "key_file",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "password": {
                          "name": "password",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "server_addr": {
                          "name": "server_addr",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "server_port": {
                          "name": "server_port",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "ssl": {
                          "name": "ssl",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "url_prefix": {
                          "name": "url_prefix",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "username": {
                          "name": "username",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        }
                      }
                    },
                    {
                      "name": "deepsea",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {
                        "salt_api_eauth": {
                          "name": "salt_api_eauth",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "sharedsecret",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "salt_api_password": {
                          "name": "salt_api_password",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "None",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "salt_api_url": {
                          "name": "salt_api_url",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "None",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "salt_api_username": {
                          "name": "salt_api_username",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "None",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        }
                      }
                    },
                    {
                      "name": "devicehealth",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {
                        "enable_monitoring": {
                          "name": "enable_monitoring",
                          "type": "bool",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "False",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "monitor device health metrics",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "mark_out_threshold": {
                          "name": "mark_out_threshold",
                          "type": "secs",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "2419200",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "automatically mark OSD if it may fail before this long",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "pool_name": {
                          "name": "pool_name",
                          "type": "str",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "device_health_metrics",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "name of pool in which to store device health metrics",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "retention_period": {
                          "name": "retention_period",
                          "type": "secs",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "15552000",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "how long to retain device health metrics",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "scrape_frequency": {
                          "name": "scrape_frequency",
                          "type": "secs",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "86400",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "how frequently to scrape device health metrics",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "self_heal": {
                          "name": "self_heal",
                          "type": "bool",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "True",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "preemptively heal cluster around devices that may fail",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "sleep_interval": {
                          "name": "sleep_interval",
                          "type": "secs",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "600",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "how frequently to wake up and check device health",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "warn_threshold": {
                          "name": "warn_threshold",
                          "type": "secs",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "7257600",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "raise health warning if OSD may fail before this long",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        }
                      }
                    },
                    {
                      "name": "diskprediction_cloud",
                      "can_run": false,
                      "error_string": "cannot import name 'maketrans'",
                      "module_options": {}
                    },
                    {
                      "name": "diskprediction_local",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {
                        "predict_interval": {
                          "name": "predict_interval",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "86400",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "sleep_interval": {
                          "name": "sleep_interval",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "600",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        }
                      }
                    },
                    {
                      "name": "hello",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {
                        "emphatic": {
                          "name": "emphatic",
                          "type": "bool",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "True",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "place": {
                          "name": "place",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "world",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        }
                      }
                    },
                    {
                      "name": "influx",
                      "can_run": false,
                      "error_string": "influxdb python module not found",
                      "module_options": {
                        "batch_size": {
                          "name": "batch_size",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "5000",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "database": {
                          "name": "database",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "ceph",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "hostname": {
                          "name": "hostname",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "None",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "interval": {
                          "name": "interval",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "30",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "password": {
                          "name": "password",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "None",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "port": {
                          "name": "port",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "8086",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "ssl": {
                          "name": "ssl",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "false",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "threads": {
                          "name": "threads",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "5",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "username": {
                          "name": "username",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "None",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "verify_ssl": {
                          "name": "verify_ssl",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "true",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        }
                      }
                    },
                    {
                      "name": "insights",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {}
                    },
                    {
                      "name": "iostat",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {}
                    },
                    {
                      "name": "localpool",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {
                        "failure_domain": {
                          "name": "failure_domain",
                          "type": "str",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "host",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "failure domain for any created local pool",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "min_size": {
                          "name": "min_size",
                          "type": "int",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "default min_size for any created local pool",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "num_rep": {
                          "name": "num_rep",
                          "type": "int",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "3",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "default replica count for any created local pool",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "pg_num": {
                          "name": "pg_num",
                          "type": "int",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "128",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "default pg_num for any created local pool",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "prefix": {
                          "name": "prefix",
                          "type": "str",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "name prefix for any created local pool",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "subtree": {
                          "name": "subtree",
                          "type": "str",
                          "level": "advanced",
                          "flags": 1,
                          "default_value": "rack",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "CRUSH level for which to create a local pool",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        }
                      }
                    },
                    {
                      "name": "orchestrator_cli",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {
                        "orchestrator": {
                          "name": "orchestrator",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        }
                      }
                    },
                    {
                      "name": "osd_perf_query",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {}
                    },
                    {
                      "name": "pg_autoscaler",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {
                        "sleep_interval": {
                          "name": "sleep_interval",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "60",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        }
                      }
                    },
                    {
                      "name": "progress",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {}
                    },
                    {
                      "name": "prometheus",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {
                        "rbd_stats_pools": {
                          "name": "rbd_stats_pools",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "rbd_stats_pools_refresh_interval": {
                          "name": "rbd_stats_pools_refresh_interval",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "scrape_interval": {
                          "name": "scrape_interval",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "server_addr": {
                          "name": "server_addr",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "server_port": {
                          "name": "server_port",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        }
                      }
                    },
                    {
                      "name": "restful",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {
                        "key_file": {
                          "name": "key_file",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "server_addr": {
                          "name": "server_addr",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "server_port": {
                          "name": "server_port",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        }
                      }
                    },
                    {
                      "name": "rook",
                      "can_run": false,
                      "error_string": "`kubernetes` python module not found",
                      "module_options": {}
                    },
                    {
                      "name": "selftest",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {
                        "testkey": {
                          "name": "testkey",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "testlkey": {
                          "name": "testlkey",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "testnewline": {
                          "name": "testnewline",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        }
                      }
                    },
                    {
                      "name": "smart",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {}
                    },
                    {
                      "name": "status",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {}
                    },
                    {
                      "name": "telegraf",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {
                        "address": {
                          "name": "address",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "unixgram:///tmp/telegraf.sock",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "interval": {
                          "name": "interval",
                          "type": "secs",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "15",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        }
                      }
                    },
                    {
                      "name": "telemetry",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {
                        "contact": {
                          "name": "contact",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "None",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "description": {
                          "name": "description",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "None",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "enabled": {
                          "name": "enabled",
                          "type": "bool",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "True",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "interval": {
                          "name": "interval",
                          "type": "int",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "72",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "leaderboard": {
                          "name": "leaderboard",
                          "type": "bool",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "False",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "organization": {
                          "name": "organization",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "None",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "proxy": {
                          "name": "proxy",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "None",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "url": {
                          "name": "url",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "https://telemetry.ceph.com/report",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        }
                      }
                    },
                    {
                      "name": "test_orchestrator",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {}
                    },
                    {
                      "name": "volumes",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {}
                    },
                    {
                      "name": "zabbix",
                      "can_run": true,
                      "error_string": "",
                      "module_options": {
                        "identifier": {
                          "name": "identifier",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "interval": {
                          "name": "interval",
                          "type": "secs",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "60",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "zabbix_host": {
                          "name": "zabbix_host",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "None",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "zabbix_port": {
                          "name": "zabbix_port",
                          "type": "int",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "10051",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        },
                        "zabbix_sender": {
                          "name": "zabbix_sender",
                          "type": "str",
                          "level": "advanced",
                          "flags": 0,
                          "default_value": "/usr/bin/zabbix_sender",
                          "min": "",
                          "max": "",
                          "enum_allowed": [],
                          "desc": "",
                          "long_desc": "",
                          "tags": [],
                          "see_also": []
                        }
                      }
                    }
                  ],
                  "services": {
                    "dashboard": "https://localhost:41839/",
                    "restful": "https://ceph-dev:42839/"
                  },
                  "always_on_modules": {
                    "nautilus": [
                      "balancer",
                      "crash",
                      "devicehealth",
                      "progress",
                      "status",
                      "volumes"
                    ]
                  },
                  "active_change": "2019-01-10 03:32:43.251324"
                },
                "pools": [
                  {
                    "pool": 1,
                    "pool_name": "cephfs.a.meta",
                    "flags": 1,
                    "flags_names": "hashpspool",
                    "type": 1,
                    "size": 3,
                    "min_size": 1,
                    "crush_rule": 0,
                    "object_hash": 2,
                    "pg_autoscale_mode": "warn",
                    "pg_num": 8,
                    "pg_placement_num": 8,
                    "pg_placement_num_target": 8,
                    "pg_num_target": 8,
                    "pg_num_pending": 8,
                    "pg_num_dec_last_epoch_started": 0,
                    "pg_num_dec_last_epoch_clean": 0,
                    "auid": 0,
                    "snap_mode": "selfmanaged",
                    "snap_seq": 0,
                    "snap_epoch": 0,
                    "pool_snaps": [],
                    "quota_max_bytes": 0,
                    "quota_max_objects": 0,
                    "tiers": [],
                    "tier_of": -1,
                    "read_tier": -1,
                    "write_tier": -1,
                    "cache_mode": "none",
                    "target_max_bytes": 0,
                    "target_max_objects": 0,
                    "cache_target_dirty_ratio_micro": 400000,
                    "cache_target_dirty_high_ratio_micro": 600000,
                    "cache_target_full_ratio_micro": 800000,
                    "cache_min_flush_age": 0,
                    "cache_min_evict_age": 0,
                    "erasure_code_profile": "",
                    "hit_set_params": {
                      "type": "none"
                    },
                    "hit_set_period": 0,
                    "hit_set_count": 0,
                    "use_gmt_hitset": true,
                    "min_read_recency_for_promote": 0,
                    "min_write_recency_for_promote": 0,
                    "hit_set_grade_decay_rate": 0,
                    "hit_set_search_last_n": 0,
                    "grade_table": [],
                    "stripe_width": 0,
                    "expected_num_objects": 0,
                    "fast_read": false,
                    "options": {},
                    "application_metadata": {
                      "cephfs": {
                        "metadata": "a"
                      }
                    },
                    "create_time": "2019-01-10 03:33:17.954064",
                    "last_change": "15",
                    "last_force_op_resend": "0",
                    "last_force_op_resend_prenautilus": "0",
                    "last_force_op_resend_preluminous": "0",
                    "removed_snaps": "[]",
                    "pg_status": {
                      "active+clean": 8
                    },
                    "stats": {
                      "stored": {
                        "latest": 2286,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            2286
                          ]
                        ]
                      },
                      "objects": {
                        "latest": 22,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            22
                          ]
                        ]
                      },
                      "kb_used": {
                        "latest": 1536,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            1536
                          ]
                        ]
                      },
                      "bytes_used": {
                        "latest": 1572864,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            1572864
                          ]
                        ]
                      },
                      "percent_used": {
                        "latest": 0.00005489326940733008,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0.00005489326940733008
                          ]
                        ]
                      },
                      "max_avail": {
                        "latest": 9550519296,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            9550519296
                          ]
                        ]
                      },
                      "quota_objects": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "quota_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "dirty": {
                        "latest": 22,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            22
                          ]
                        ]
                      },
                      "rd": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "rd_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "wr": {
                        "latest": 45,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            45
                          ]
                        ]
                      },
                      "wr_bytes": {
                        "latest": 13312,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            13312
                          ]
                        ]
                      },
                      "compress_bytes_used": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "compress_under_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "stored_raw": {
                        "latest": 6858,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            6858
                          ]
                        ]
                      }
                    }
                  },
                  {
                    "pool": 2,
                    "pool_name": "cephfs.a.data",
                    "flags": 1,
                    "flags_names": "hashpspool",
                    "type": 1,
                    "size": 3,
                    "min_size": 1,
                    "crush_rule": 0,
                    "object_hash": 2,
                    "pg_autoscale_mode": "warn",
                    "pg_num": 8,
                    "pg_placement_num": 8,
                    "pg_placement_num_target": 8,
                    "pg_num_target": 8,
                    "pg_num_pending": 8,
                    "pg_num_dec_last_epoch_started": 0,
                    "pg_num_dec_last_epoch_clean": 0,
                    "auid": 0,
                    "snap_mode": "selfmanaged",
                    "snap_seq": 0,
                    "snap_epoch": 0,
                    "pool_snaps": [],
                    "quota_max_bytes": 0,
                    "quota_max_objects": 0,
                    "tiers": [],
                    "tier_of": -1,
                    "read_tier": -1,
                    "write_tier": -1,
                    "cache_mode": "none",
                    "target_max_bytes": 0,
                    "target_max_objects": 0,
                    "cache_target_dirty_ratio_micro": 400000,
                    "cache_target_dirty_high_ratio_micro": 600000,
                    "cache_target_full_ratio_micro": 800000,
                    "cache_min_flush_age": 0,
                    "cache_min_evict_age": 0,
                    "erasure_code_profile": "",
                    "hit_set_params": {
                      "type": "none"
                    },
                    "hit_set_period": 0,
                    "hit_set_count": 0,
                    "use_gmt_hitset": true,
                    "min_read_recency_for_promote": 0,
                    "min_write_recency_for_promote": 0,
                    "hit_set_grade_decay_rate": 0,
                    "hit_set_search_last_n": 0,
                    "grade_table": [],
                    "stripe_width": 0,
                    "expected_num_objects": 0,
                    "fast_read": false,
                    "options": {},
                    "application_metadata": {
                      "cephfs": {
                        "data": "a"
                      }
                    },
                    "create_time": "2019-01-10 03:33:18.864813",
                    "last_change": "16",
                    "last_force_op_resend": "0",
                    "last_force_op_resend_prenautilus": "0",
                    "last_force_op_resend_preluminous": "0",
                    "removed_snaps": "[]",
                    "pg_status": {
                      "active+clean": 8
                    },
                    "stats": {
                      "stored": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "objects": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "kb_used": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "bytes_used": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "percent_used": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "max_avail": {
                        "latest": 9550519296,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            9550519296
                          ]
                        ]
                      },
                      "quota_objects": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "quota_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "dirty": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "rd": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "rd_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "wr": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "wr_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "compress_bytes_used": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "compress_under_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "stored_raw": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      }
                    }
                  },
                  {
                    "pool": 3,
                    "pool_name": ".rgw.root",
                    "flags": 1,
                    "flags_names": "hashpspool",
                    "type": 1,
                    "size": 3,
                    "min_size": 1,
                    "crush_rule": 0,
                    "object_hash": 2,
                    "pg_autoscale_mode": "warn",
                    "pg_num": 8,
                    "pg_placement_num": 8,
                    "pg_placement_num_target": 8,
                    "pg_num_target": 8,
                    "pg_num_pending": 8,
                    "pg_num_dec_last_epoch_started": 0,
                    "pg_num_dec_last_epoch_clean": 0,
                    "auid": 0,
                    "snap_mode": "selfmanaged",
                    "snap_seq": 0,
                    "snap_epoch": 0,
                    "pool_snaps": [],
                    "quota_max_bytes": 0,
                    "quota_max_objects": 0,
                    "tiers": [],
                    "tier_of": -1,
                    "read_tier": -1,
                    "write_tier": -1,
                    "cache_mode": "none",
                    "target_max_bytes": 0,
                    "target_max_objects": 0,
                    "cache_target_dirty_ratio_micro": 400000,
                    "cache_target_dirty_high_ratio_micro": 600000,
                    "cache_target_full_ratio_micro": 800000,
                    "cache_min_flush_age": 0,
                    "cache_min_evict_age": 0,
                    "erasure_code_profile": "",
                    "hit_set_params": {
                      "type": "none"
                    },
                    "hit_set_period": 0,
                    "hit_set_count": 0,
                    "use_gmt_hitset": true,
                    "min_read_recency_for_promote": 0,
                    "min_write_recency_for_promote": 0,
                    "hit_set_grade_decay_rate": 0,
                    "hit_set_search_last_n": 0,
                    "grade_table": [],
                    "stripe_width": 0,
                    "expected_num_objects": 0,
                    "fast_read": false,
                    "options": {},
                    "application_metadata": {
                      "rgw": {}
                    },
                    "create_time": "2019-01-10 03:33:20.837161",
                    "last_change": "17",
                    "last_force_op_resend": "0",
                    "last_force_op_resend_prenautilus": "0",
                    "last_force_op_resend_preluminous": "0",
                    "removed_snaps": "[]",
                    "pg_status": {
                      "active+clean": 8
                    },
                    "stats": {
                      "stored": {
                        "latest": 1173,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            1173
                          ]
                        ]
                      },
                      "objects": {
                        "latest": 4,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            4
                          ]
                        ]
                      },
                      "kb_used": {
                        "latest": 768,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            768
                          ]
                        ]
                      },
                      "bytes_used": {
                        "latest": 786432,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            786432
                          ]
                        ]
                      },
                      "percent_used": {
                        "latest": 0.00002744738776527811,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0.00002744738776527811
                          ]
                        ]
                      },
                      "max_avail": {
                        "latest": 9550519296,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            9550519296
                          ]
                        ]
                      },
                      "quota_objects": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "quota_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "dirty": {
                        "latest": 4,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            4
                          ]
                        ]
                      },
                      "rd": {
                        "latest": 76,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            76
                          ]
                        ]
                      },
                      "rd_bytes": {
                        "latest": 77824,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            77824
                          ]
                        ]
                      },
                      "wr": {
                        "latest": 4,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            4
                          ]
                        ]
                      },
                      "wr_bytes": {
                        "latest": 4096,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            4096
                          ]
                        ]
                      },
                      "compress_bytes_used": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "compress_under_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "stored_raw": {
                        "latest": 3519,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            3519
                          ]
                        ]
                      }
                    }
                  },
                  {
                    "pool": 4,
                    "pool_name": "default.rgw.control",
                    "flags": 1,
                    "flags_names": "hashpspool",
                    "type": 1,
                    "size": 3,
                    "min_size": 1,
                    "crush_rule": 0,
                    "object_hash": 2,
                    "pg_autoscale_mode": "warn",
                    "pg_num": 8,
                    "pg_placement_num": 8,
                    "pg_placement_num_target": 8,
                    "pg_num_target": 8,
                    "pg_num_pending": 8,
                    "pg_num_dec_last_epoch_started": 0,
                    "pg_num_dec_last_epoch_clean": 0,
                    "auid": 0,
                    "snap_mode": "selfmanaged",
                    "snap_seq": 0,
                    "snap_epoch": 0,
                    "pool_snaps": [],
                    "quota_max_bytes": 0,
                    "quota_max_objects": 0,
                    "tiers": [],
                    "tier_of": -1,
                    "read_tier": -1,
                    "write_tier": -1,
                    "cache_mode": "none",
                    "target_max_bytes": 0,
                    "target_max_objects": 0,
                    "cache_target_dirty_ratio_micro": 400000,
                    "cache_target_dirty_high_ratio_micro": 600000,
                    "cache_target_full_ratio_micro": 800000,
                    "cache_min_flush_age": 0,
                    "cache_min_evict_age": 0,
                    "erasure_code_profile": "",
                    "hit_set_params": {
                      "type": "none"
                    },
                    "hit_set_period": 0,
                    "hit_set_count": 0,
                    "use_gmt_hitset": true,
                    "min_read_recency_for_promote": 0,
                    "min_write_recency_for_promote": 0,
                    "hit_set_grade_decay_rate": 0,
                    "hit_set_search_last_n": 0,
                    "grade_table": [],
                    "stripe_width": 0,
                    "expected_num_objects": 0,
                    "fast_read": false,
                    "options": {},
                    "application_metadata": {
                      "rgw": {}
                    },
                    "create_time": "2019-01-10 03:33:22.538496",
                    "last_change": "19",
                    "last_force_op_resend": "0",
                    "last_force_op_resend_prenautilus": "0",
                    "last_force_op_resend_preluminous": "0",
                    "removed_snaps": "[]",
                    "pg_status": {
                      "active+clean": 8
                    },
                    "stats": {
                      "stored": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "objects": {
                        "latest": 8,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            8
                          ]
                        ]
                      },
                      "kb_used": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "bytes_used": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "percent_used": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "max_avail": {
                        "latest": 9550519296,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            9550519296
                          ]
                        ]
                      },
                      "quota_objects": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "quota_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "dirty": {
                        "latest": 8,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            8
                          ]
                        ]
                      },
                      "rd": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "rd_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "wr": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "wr_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "compress_bytes_used": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "compress_under_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "stored_raw": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      }
                    }
                  },
                  {
                    "pool": 5,
                    "pool_name": "default.rgw.meta",
                    "flags": 1,
                    "flags_names": "hashpspool",
                    "type": 1,
                    "size": 3,
                    "min_size": 1,
                    "crush_rule": 0,
                    "object_hash": 2,
                    "pg_autoscale_mode": "warn",
                    "pg_num": 8,
                    "pg_placement_num": 8,
                    "pg_placement_num_target": 8,
                    "pg_num_target": 8,
                    "pg_num_pending": 8,
                    "pg_num_dec_last_epoch_started": 0,
                    "pg_num_dec_last_epoch_clean": 0,
                    "auid": 0,
                    "snap_mode": "selfmanaged",
                    "snap_seq": 0,
                    "snap_epoch": 0,
                    "pool_snaps": [],
                    "quota_max_bytes": 0,
                    "quota_max_objects": 0,
                    "tiers": [],
                    "tier_of": -1,
                    "read_tier": -1,
                    "write_tier": -1,
                    "cache_mode": "none",
                    "target_max_bytes": 0,
                    "target_max_objects": 0,
                    "cache_target_dirty_ratio_micro": 400000,
                    "cache_target_dirty_high_ratio_micro": 600000,
                    "cache_target_full_ratio_micro": 800000,
                    "cache_min_flush_age": 0,
                    "cache_min_evict_age": 0,
                    "erasure_code_profile": "",
                    "hit_set_params": {
                      "type": "none"
                    },
                    "hit_set_period": 0,
                    "hit_set_count": 0,
                    "use_gmt_hitset": true,
                    "min_read_recency_for_promote": 0,
                    "min_write_recency_for_promote": 0,
                    "hit_set_grade_decay_rate": 0,
                    "hit_set_search_last_n": 0,
                    "grade_table": [],
                    "stripe_width": 0,
                    "expected_num_objects": 0,
                    "fast_read": false,
                    "options": {},
                    "application_metadata": {
                      "rgw": {}
                    },
                    "create_time": "2019-01-10 03:33:24.590135",
                    "last_change": "21",
                    "last_force_op_resend": "0",
                    "last_force_op_resend_prenautilus": "0",
                    "last_force_op_resend_preluminous": "0",
                    "removed_snaps": "[]",
                    "pg_status": {
                      "active+clean": 8
                    },
                    "stats": {
                      "stored": {
                        "latest": 2988,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            2988
                          ]
                        ]
                      },
                      "objects": {
                        "latest": 16,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            16
                          ]
                        ]
                      },
                      "kb_used": {
                        "latest": 3072,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            3072
                          ]
                        ]
                      },
                      "bytes_used": {
                        "latest": 3145728,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            3145728
                          ]
                        ]
                      },
                      "percent_used": {
                        "latest": 0.00010978051432175562,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0.00010978051432175562
                          ]
                        ]
                      },
                      "max_avail": {
                        "latest": 9550519296,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            9550519296
                          ]
                        ]
                      },
                      "quota_objects": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "quota_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "dirty": {
                        "latest": 16,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            16
                          ]
                        ]
                      },
                      "rd": {
                        "latest": 12,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            12
                          ]
                        ]
                      },
                      "rd_bytes": {
                        "latest": 10240,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            10240
                          ]
                        ]
                      },
                      "wr": {
                        "latest": 25,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            25
                          ]
                        ]
                      },
                      "wr_bytes": {
                        "latest": 17408,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            17408
                          ]
                        ]
                      },
                      "compress_bytes_used": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "compress_under_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "stored_raw": {
                        "latest": 8964,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            8964
                          ]
                        ]
                      }
                    }
                  },
                  {
                    "pool": 6,
                    "pool_name": "default.rgw.log",
                    "flags": 1,
                    "flags_names": "hashpspool",
                    "type": 1,
                    "size": 3,
                    "min_size": 1,
                    "crush_rule": 0,
                    "object_hash": 2,
                    "pg_autoscale_mode": "warn",
                    "pg_num": 8,
                    "pg_placement_num": 8,
                    "pg_placement_num_target": 8,
                    "pg_num_target": 8,
                    "pg_num_pending": 8,
                    "pg_num_dec_last_epoch_started": 0,
                    "pg_num_dec_last_epoch_clean": 0,
                    "auid": 0,
                    "snap_mode": "selfmanaged",
                    "snap_seq": 0,
                    "snap_epoch": 0,
                    "pool_snaps": [],
                    "quota_max_bytes": 0,
                    "quota_max_objects": 0,
                    "tiers": [],
                    "tier_of": -1,
                    "read_tier": -1,
                    "write_tier": -1,
                    "cache_mode": "none",
                    "target_max_bytes": 0,
                    "target_max_objects": 0,
                    "cache_target_dirty_ratio_micro": 400000,
                    "cache_target_dirty_high_ratio_micro": 600000,
                    "cache_target_full_ratio_micro": 800000,
                    "cache_min_flush_age": 0,
                    "cache_min_evict_age": 0,
                    "erasure_code_profile": "",
                    "hit_set_params": {
                      "type": "none"
                    },
                    "hit_set_period": 0,
                    "hit_set_count": 0,
                    "use_gmt_hitset": true,
                    "min_read_recency_for_promote": 0,
                    "min_write_recency_for_promote": 0,
                    "hit_set_grade_decay_rate": 0,
                    "hit_set_search_last_n": 0,
                    "grade_table": [],
                    "stripe_width": 0,
                    "expected_num_objects": 0,
                    "fast_read": false,
                    "options": {},
                    "application_metadata": {
                      "rgw": {}
                    },
                    "create_time": "2019-01-10 03:33:26.514656",
                    "last_change": "23",
                    "last_force_op_resend": "0",
                    "last_force_op_resend_prenautilus": "0",
                    "last_force_op_resend_preluminous": "0",
                    "removed_snaps": "[]",
                    "pg_status": {
                      "active+clean": 8
                    },
                    "stats": {
                      "stored": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "objects": {
                        "latest": 207,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            207
                          ]
                        ]
                      },
                      "kb_used": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "bytes_used": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "percent_used": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "max_avail": {
                        "latest": 9550519296,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            9550519296
                          ]
                        ]
                      },
                      "quota_objects": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "quota_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "dirty": {
                        "latest": 207,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            207
                          ]
                        ]
                      },
                      "rd": {
                        "latest": 2798,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            2798
                          ]
                        ]
                      },
                      "rd_bytes": {
                        "latest": 2653184,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            2653184
                          ]
                        ]
                      },
                      "wr": {
                        "latest": 1844,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            1844
                          ]
                        ]
                      },
                      "wr_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "compress_bytes_used": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "compress_under_bytes": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      },
                      "stored_raw": {
                        "latest": 0,
                        "rate": 0,
                        "series": [
                          [
                            1547094495.2750568,
                            0
                          ]
                        ]
                      }
                    }
                  }
                ],
                "df": {
                  "stats": {
                    "total_bytes": 32413556736,
                    "total_avail_bytes": 28975693824,
                    "total_used_bytes": 216637440,
                    "total_used_raw_bytes": 3437862912,
                    "total_used_raw_ratio": 0.10606250166893005,
                    "total_objects": 257
                  },
                  "pools": [
                    {
                      "name": "cephfs.a.meta",
                      "id": 1,
                      "stats": {
                        "stored": 2286,
                        "objects": 22,
                        "kb_used": 1536,
                        "bytes_used": 1572864,
                        "percent_used": 0.00005489326940733008,
                        "max_avail": 9550519296,
                        "quota_objects": 0,
                        "quota_bytes": 0,
                        "dirty": 22,
                        "rd": 0,
                        "rd_bytes": 0,
                        "wr": 45,
                        "wr_bytes": 13312,
                        "compress_bytes_used": 0,
                        "compress_under_bytes": 0,
                        "stored_raw": 6858
                      }
                    },
                    {
                      "name": "cephfs.a.data",
                      "id": 2,
                      "stats": {
                        "stored": 0,
                        "objects": 0,
                        "kb_used": 0,
                        "bytes_used": 0,
                        "percent_used": 0,
                        "max_avail": 9550519296,
                        "quota_objects": 0,
                        "quota_bytes": 0,
                        "dirty": 0,
                        "rd": 0,
                        "rd_bytes": 0,
                        "wr": 0,
                        "wr_bytes": 0,
                        "compress_bytes_used": 0,
                        "compress_under_bytes": 0,
                        "stored_raw": 0
                      }
                    },
                    {
                      "name": ".rgw.root",
                      "id": 3,
                      "stats": {
                        "stored": 1173,
                        "objects": 4,
                        "kb_used": 768,
                        "bytes_used": 786432,
                        "percent_used": 0.00002744738776527811,
                        "max_avail": 9550519296,
                        "quota_objects": 0,
                        "quota_bytes": 0,
                        "dirty": 4,
                        "rd": 76,
                        "rd_bytes": 77824,
                        "wr": 4,
                        "wr_bytes": 4096,
                        "compress_bytes_used": 0,
                        "compress_under_bytes": 0,
                        "stored_raw": 3519
                      }
                    },
                    {
                      "name": "default.rgw.control",
                      "id": 4,
                      "stats": {
                        "stored": 0,
                        "objects": 8,
                        "kb_used": 0,
                        "bytes_used": 0,
                        "percent_used": 0,
                        "max_avail": 9550519296,
                        "quota_objects": 0,
                        "quota_bytes": 0,
                        "dirty": 8,
                        "rd": 0,
                        "rd_bytes": 0,
                        "wr": 0,
                        "wr_bytes": 0,
                        "compress_bytes_used": 0,
                        "compress_under_bytes": 0,
                        "stored_raw": 0
                      }
                    },
                    {
                      "name": "default.rgw.meta",
                      "id": 5,
                      "stats": {
                        "stored": 2988,
                        "objects": 16,
                        "kb_used": 3072,
                        "bytes_used": 3145728,
                        "percent_used": 0.00010978051432175562,
                        "max_avail": 9550519296,
                        "quota_objects": 0,
                        "quota_bytes": 0,
                        "dirty": 16,
                        "rd": 12,
                        "rd_bytes": 10240,
                        "wr": 25,
                        "wr_bytes": 17408,
                        "compress_bytes_used": 0,
                        "compress_under_bytes": 0,
                        "stored_raw": 8964
                      }
                    },
                    {
                      "name": "default.rgw.log",
                      "id": 6,
                      "stats": {
                        "stored": 0,
                        "objects": 207,
                        "kb_used": 0,
                        "bytes_used": 0,
                        "percent_used": 0,
                        "max_avail": 9550519296,
                        "quota_objects": 0,
                        "quota_bytes": 0,
                        "dirty": 207,
                        "rd": 2798,
                        "rd_bytes": 2653184,
                        "wr": 1844,
                        "wr_bytes": 0,
                        "compress_bytes_used": 0,
                        "compress_under_bytes": 0,
                        "stored_raw": 0
                      }
                    }
                  ]
                },
                "client_perf": {
                  "read_bytes_sec": 0,
                  "read_op_per_sec": 0,
                  "write_bytes_sec": 0,
                  "write_op_per_sec": 0,
                  "recovering_bytes_per_sec": 0
                },
                "hosts": 1,
                "rgw": 1,
                "iscsi_daemons": 0
              }
            }
          }
        },
        "summary": "health full | 集群监控信息（全）",
        "operationId": "HEALTH_FULL",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/cluster_conf": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "level": {
                    "type": "string"
                  },
                  "desc": {
                    "type": "string"
                  },
                  "long_desc": {
                    "type": "string"
                  },
                  "default": {
                    "type": [
                      "integer",
                      "string"
                    ]
                  },
                  "daemon_default": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "services": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "see_also": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "enum_values": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "min": {
                    "type": "string"
                  },
                  "max": {
                    "type": "string"
                  },
                  "can_update_at_runtime": {
                    "type": "boolean"
                  },
                  "flags": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "name": "admin_socket",
                  "type": "str",
                  "level": "advanced",
                  "desc": "path for the runtime control socket file, used by the 'ceph daemon' command",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "$run_dir/$cluster-$name.asok",
                  "tags": [],
                  "services": [
                    "common"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "admin_socket_mode",
                  "type": "str",
                  "level": "advanced",
                  "desc": "file mode to set for the admin socket file, e.g, '0755'",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "common"
                  ],
                  "see_also": [
                    "admin_socket"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "auth_client_required",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "cephx, none",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "auth_cluster_required",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "cephx",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "auth_debug",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "auth_mon_ticket_ttl",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 43200,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "auth_service_required",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "cephx",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "auth_service_ticket_ttl",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 3600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "auth_supported",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "bdev_aio",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bdev_aio_max_queue_depth",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1024,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bdev_aio_poll_ms",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 250,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bdev_aio_reap_max",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 16,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bdev_async_discard",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bdev_block_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "4096"
                },
                {
                  "name": "bdev_debug_aio",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bdev_debug_aio_suicide_timeout",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 60,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bdev_debug_inflight_ios",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bdev_enable_discard",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bdev_inject_crash",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bdev_inject_crash_flush_delay",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bdev_nvme_retry_count",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": -1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bdev_nvme_unbind_from_kernel",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluefs_alloc_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1048576"
                },
                {
                  "name": "bluefs_allocator",
                  "type": "str",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": "bitmap",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "bluefs_buffered_io",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluefs_compact_log_sync",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluefs_log_compact_min_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluefs_log_compact_min_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "16777216"
                },
                {
                  "name": "bluefs_max_log_runway",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "4194304"
                },
                {
                  "name": "bluefs_max_prefetch",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1048576"
                },
                {
                  "name": "bluefs_min_flush_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "524288"
                },
                {
                  "name": "bluefs_min_log_runway",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1048576"
                },
                {
                  "name": "bluefs_preextend_wal_files",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluefs_sync_write",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_2q_cache_kin_ratio",
                  "type": "float",
                  "level": "dev",
                  "desc": "2Q paper suggests .5",
                  "long_desc": "",
                  "default": 0.5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_2q_cache_kout_ratio",
                  "type": "float",
                  "level": "dev",
                  "desc": "2Q paper suggests .5",
                  "long_desc": "",
                  "default": 0.5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_allocator",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Allocator policy",
                  "long_desc": "",
                  "default": "bitmap",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [
                    "bitmap",
                    "stupid"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "bluestore_bitmapallocator_blocks_per_zone",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1024"
                },
                {
                  "name": "bluestore_bitmapallocator_span_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1024"
                },
                {
                  "name": "bluestore_blobid_prealloc",
                  "type": "uint",
                  "level": "dev",
                  "desc": "Number of unique blob ids to preallocate at a time",
                  "long_desc": "",
                  "default": 10240,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_block_create",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Create bluestore_block_path if it doesn't exist",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "bluestore_block_path",
                    "bluestore_block_size"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ]
                },
                {
                  "name": "bluestore_block_db_create",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Create bluestore_block_db_path if it doesn't exist",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "bluestore_block_db_path",
                    "bluestore_block_db_size"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ]
                },
                {
                  "name": "bluestore_block_db_path",
                  "type": "str",
                  "level": "dev",
                  "desc": "Path for db block device",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ]
                },
                {
                  "name": "bluestore_block_db_size",
                  "type": "uint",
                  "level": "dev",
                  "desc": "Size of file to create for bluestore_block_db_path",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ]
                },
                {
                  "name": "bluestore_block_path",
                  "type": "str",
                  "level": "dev",
                  "desc": "Path to block device/file",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ]
                },
                {
                  "name": "bluestore_block_preallocate_file",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Preallocate file created via bluestore_block*_create",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ]
                },
                {
                  "name": "bluestore_block_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "Size of file to create for backing bluestore",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ],
                  "default": "10737418240"
                },
                {
                  "name": "bluestore_block_wal_create",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Create bluestore_block_wal_path if it doesn't exist",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "bluestore_block_wal_path",
                    "bluestore_block_wal_size"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ]
                },
                {
                  "name": "bluestore_block_wal_path",
                  "type": "str",
                  "level": "dev",
                  "desc": "Path to block device/file backing bluefs wal",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ]
                },
                {
                  "name": "bluestore_block_wal_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "Size of file to create for bluestore_block_wal_path",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ],
                  "default": "100663296"
                },
                {
                  "name": "bluestore_bluefs",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Use BlueFS to back rocksdb",
                  "long_desc": "BlueFS allows rocksdb to share the same physical device(s) as the rest of BlueStore.  It should be used in all cases unless testing/developing an alternative metadata database for BlueStore.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ]
                },
                {
                  "name": "bluestore_bluefs_balance_failure_dump_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "How frequently (in seconds) to dump information on allocation failure occurred during BlueFS space rebalance",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_bluefs_balance_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "How frequently (in seconds) to balance free space between BlueFS and BlueStore",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_bluefs_env_mirror",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Mirror bluefs data to file system for testing/validation",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ]
                },
                {
                  "name": "bluestore_bluefs_gift_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Maximum fraction of free space to give to BlueFS at once",
                  "long_desc": "",
                  "default": 0.02,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_bluefs_max_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Maximum fraction of free storage devoted to BlueFS",
                  "long_desc": "",
                  "default": 0.9,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_bluefs_min",
                  "type": "size",
                  "level": "advanced",
                  "desc": "minimum disk space allocated to BlueFS (e.g., at mkfs)",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1073741824"
                },
                {
                  "name": "bluestore_bluefs_min_free",
                  "type": "size",
                  "level": "advanced",
                  "desc": "minimum free space allocated to BlueFS",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1073741824"
                },
                {
                  "name": "bluestore_bluefs_min_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Minimum fraction of free space devoted to BlueFS",
                  "long_desc": "",
                  "default": 0.02,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_bluefs_reclaim_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Maximum fraction of free space to reclaim from BlueFS at once",
                  "long_desc": "",
                  "default": 0.2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_cache_autotune",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Automatically tune the ratio of caches while respecting min values.",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "bluestore_cache_size",
                    "bluestore_cache_meta_ratio"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_cache_autotune_chunk_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "The chunk size in bytes to allocate to caches when cache autotune is enabled.",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "bluestore_cache_autotune"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "33554432"
                },
                {
                  "name": "bluestore_cache_autotune_interval",
                  "type": "float",
                  "level": "dev",
                  "desc": "The number of seconds to wait between rebalances when cache autotune is enabled.",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "bluestore_cache_autotune"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_cache_kv_ratio",
                  "type": "float",
                  "level": "dev",
                  "desc": "Ratio of bluestore cache to devote to kv database (rocksdb)",
                  "long_desc": "",
                  "default": 0.4,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "bluestore_cache_size"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_cache_meta_ratio",
                  "type": "float",
                  "level": "dev",
                  "desc": "Ratio of bluestore cache to devote to metadata",
                  "long_desc": "",
                  "default": 0.4,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "bluestore_cache_size"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_cache_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "Cache size (in bytes) for BlueStore",
                  "long_desc": "This includes data and metadata cached by BlueStore as well as memory devoted to rocksdb's cache(s).",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "0"
                },
                {
                  "name": "bluestore_cache_size_hdd",
                  "type": "size",
                  "level": "dev",
                  "desc": "Default bluestore_cache_size for rotational media",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1073741824"
                },
                {
                  "name": "bluestore_cache_size_ssd",
                  "type": "size",
                  "level": "dev",
                  "desc": "Default bluestore_cache_size for non-rotational (solid state) media",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "3221225472"
                },
                {
                  "name": "bluestore_cache_trim_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "How frequently we trim the bluestore cache",
                  "long_desc": "",
                  "default": 0.05,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_cache_trim_max_skip_pinned",
                  "type": "uint",
                  "level": "dev",
                  "desc": "Max pinned cache entries we consider before giving up",
                  "long_desc": "",
                  "default": 64,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_cache_type",
                  "type": "str",
                  "level": "dev",
                  "desc": "Cache replacement algorithm",
                  "long_desc": "",
                  "default": "2q",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [
                    "2q",
                    "lru"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "bluestore_clone_cow",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Use copy-on-write when cloning objects (versus reading and rewriting them at clone time)",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "bluestore_compression_algorithm",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Default compression algorithm to use when writing object data",
                  "long_desc": "This controls the default compressor to use (if any) if the per-pool property is not set.  Note that zstd is *not* recommended for bluestore due to high CPU overhead when compressing small amounts of data.",
                  "default": "snappy",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [
                    "",
                    "snappy",
                    "zlib",
                    "zstd",
                    "lz4"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "bluestore_compression_max_blob_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Maximum chunk size to apply compression to when non-random access is expected for an object.",
                  "long_desc": "Chunks larger than this are broken into smaller chunks before being compressed",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "default": "0"
                },
                {
                  "name": "bluestore_compression_max_blob_size_hdd",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Default value of bluestore_compression_max_blob_size for rotational media",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "default": "524288"
                },
                {
                  "name": "bluestore_compression_max_blob_size_ssd",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Default value of bluestore_compression_max_blob_size for non-rotational (solid state) media",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "default": "65536"
                },
                {
                  "name": "bluestore_compression_min_blob_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Maximum chunk size to apply compression to when random access is expected for an object.",
                  "long_desc": "Chunks larger than this are broken into smaller chunks before being compressed",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "default": "0"
                },
                {
                  "name": "bluestore_compression_min_blob_size_hdd",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Default value of bluestore_compression_min_blob_size for rotational media",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "default": "131072"
                },
                {
                  "name": "bluestore_compression_min_blob_size_ssd",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Default value of bluestore_compression_min_blob_size for non-rotational (solid state) media",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "default": "8192"
                },
                {
                  "name": "bluestore_compression_mode",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Default policy for using compression when pool does not specify",
                  "long_desc": "'none' means never use compression.  'passive' means use compression when clients hint that data is compressible.  'aggressive' means use compression unless clients hint that data is not compressible.  This option is used when the per-pool property for the compression mode is not present.",
                  "default": "none",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [
                    "none",
                    "passive",
                    "aggressive",
                    "force"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "bluestore_compression_required_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Compression ratio required to store compressed data",
                  "long_desc": "If we compress data and get less than this we discard the result and store the original uncompressed data.",
                  "default": 0.875,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "bluestore_csum_type",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Default checksum algorithm to use",
                  "long_desc": "crc32c, xxhash32, and xxhash64 are available.  The _16 and _8 variants use only a subset of the bits for more compact (but less reliable) checksumming.",
                  "default": "crc32c",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [
                    "none",
                    "crc32c",
                    "crc32c_16",
                    "crc32c_8",
                    "xxhash32",
                    "xxhash64"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "bluestore_debug_freelist",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_debug_fsck_abort",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_debug_inject_bug21040",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_debug_inject_csum_err_probability",
                  "type": "float",
                  "level": "dev",
                  "desc": "inject crc verification errors into bluestore device reads",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_debug_inject_read_err",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_debug_misc",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_debug_no_reuse_blocks",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_debug_omit_block_device_write",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_debug_omit_kv_commit",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_debug_permit_any_bdev_label",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_debug_prefill",
                  "type": "float",
                  "level": "dev",
                  "desc": "simulate fragmentation",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_debug_prefragment_max",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1048576"
                },
                {
                  "name": "bluestore_debug_random_read_err",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_debug_randomize_serial_transaction",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_debug_small_allocations",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_default_buffered_read",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Cache read results by default (unless hinted NOCACHE or WONTNEED)",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "bluestore_default_buffered_write",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Cache writes by default (unless hinted NOCACHE or WONTNEED)",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "bluestore_deferred_batch_ops",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Max number of deferred writes before we flush the deferred write queue",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "bluestore_deferred_batch_ops_hdd",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Default bluestore_deferred_batch_ops for rotational media",
                  "long_desc": "",
                  "default": 64,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "bluestore_deferred_batch_ops_ssd",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Default bluestore_deferred_batch_ops for non-rotational (solid state) media",
                  "long_desc": "",
                  "default": 16,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "bluestore_extent_map_inline_shard_prealloc_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "Preallocated buffer for inline shards",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "256"
                },
                {
                  "name": "bluestore_extent_map_shard_max_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "Max size (bytes) for a single extent map shard before splitting",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1200"
                },
                {
                  "name": "bluestore_extent_map_shard_min_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "Min size (bytes) for a single extent map shard before merging",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "150"
                },
                {
                  "name": "bluestore_extent_map_shard_target_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "Target size (bytes) for a single extent map shard",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "500"
                },
                {
                  "name": "bluestore_extent_map_shard_target_size_slop",
                  "type": "float",
                  "level": "dev",
                  "desc": "Ratio above/below target for a shard when trying to align to an existing extent or blob boundary",
                  "long_desc": "",
                  "default": 0.2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_freelist_blocks_per_key",
                  "type": "size",
                  "level": "dev",
                  "desc": "Block (and bits) per database key",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "128"
                },
                {
                  "name": "bluestore_fsck_on_mkfs",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Run fsck after mkfs",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_fsck_on_mkfs_deep",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Run deep fsck after mkfs",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_fsck_on_mount",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Run fsck at mount",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_fsck_on_mount_deep",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Run deep fsck at mount",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_fsck_on_umount",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Run fsck at umount",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_fsck_on_umount_deep",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Run deep fsck at umount",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_gc_enable_blob_threshold",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "bluestore_gc_enable_total_threshold",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "bluestore_kvbackend",
                  "type": "str",
                  "level": "dev",
                  "desc": "Key value database to use for bluestore",
                  "long_desc": "",
                  "default": "rocksdb",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ]
                },
                {
                  "name": "bluestore_max_alloc_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Maximum size of a single allocation (0 for no max)",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ],
                  "default": "0"
                },
                {
                  "name": "bluestore_max_blob_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "default": "0"
                },
                {
                  "name": "bluestore_max_blob_size_hdd",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "default": "524288"
                },
                {
                  "name": "bluestore_max_blob_size_ssd",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "default": "65536"
                },
                {
                  "name": "bluestore_max_deferred_txc",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Max transactions with deferred writes that can accumulate before we force flush deferred writes",
                  "long_desc": "",
                  "default": 32,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_min_alloc_size",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Minimum allocation size to allocate for an object",
                  "long_desc": "A smaller allocation size generally means less data is read and then rewritten when a copy-on-write operation is triggered (e.g., when writing to something that was recently snapshotted).  Similarly, less data is journaled before performing an overwrite (writes smaller than min_alloc_size must first pass through the BlueStore journal).  Larger values of min_alloc_size reduce the amount of metadata required to describe the on-disk layout and reduce overall fragmentation.",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ]
                },
                {
                  "name": "bluestore_min_alloc_size_hdd",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Default min_alloc_size value for rotational media",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ],
                  "default": "65536"
                },
                {
                  "name": "bluestore_min_alloc_size_ssd",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Default min_alloc_size value for non-rotational (solid state)  media",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ],
                  "default": "16384"
                },
                {
                  "name": "bluestore_nid_prealloc",
                  "type": "int",
                  "level": "dev",
                  "desc": "Number of unique object ids to preallocate at a time",
                  "long_desc": "",
                  "default": 1024,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_no_per_pool_stats_tolerance",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Specified how to treat lack of per-pool stats, e.g. caused by an upgrade",
                  "long_desc": "'until_fsck' will tolerate the case for regular ops and fail on fsck or repair, the latter will fix the issue, 'until_repair' will tolerate for regular ops and fsck. Repair indicates and fixes the issue, 'enforce' will unconditionally use global stats mode.",
                  "default": "until_repair",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [
                    "enforce",
                    "until_repair",
                    "until_fsck"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "bluestore_prefer_deferred_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Writes smaller than this size will be written to the journal and then asynchronously written to the device.  This can be beneficial when using rotational media where seeks are expensive, and is helpful both with and without solid state journal/wal devices.",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "default": "0"
                },
                {
                  "name": "bluestore_prefer_deferred_size_hdd",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Default bluestore_prefer_deferred_size for rotational media",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "default": "32768"
                },
                {
                  "name": "bluestore_prefer_deferred_size_ssd",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Default bluestore_prefer_deferred_size for non-rotational (solid state) media",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "default": "0"
                },
                {
                  "name": "bluestore_retry_disk_reads",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Number of read retries on checksum validation error",
                  "long_desc": "Retries to read data from the disk this many times when checksum validation fails to handle spurious read errors gracefully.",
                  "default": 3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": 0,
                  "max": 255,
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "bluestore_rocksdb_cf",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Enable use of rocksdb column families for bluestore metadata",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_rocksdb_cfs",
                  "type": "str",
                  "level": "dev",
                  "desc": "List of whitespace-separate key/value pairs where key is CF name and value is CF options",
                  "long_desc": "",
                  "default": "M= P= L=",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "bluestore_rocksdb_options",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Rocksdb options",
                  "long_desc": "",
                  "default": "compression=kNoCompression,max_write_buffer_number=4,min_write_buffer_number_to_merge=1,recycle_log_file_num=4,write_buffer_size=268435456,writable_file_max_buffer_size=0,compaction_readahead_size=2097152",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "bluestore_spdk_coremask",
                  "type": "str",
                  "level": "dev",
                  "desc": "A hexadecimal bit mask of the cores to run on. Note the core numbering can change between platforms and should be determined beforehand",
                  "long_desc": "",
                  "default": "0x1",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "bluestore_spdk_io_sleep",
                  "type": "uint",
                  "level": "dev",
                  "desc": "Time period to wait if there is no completed I/O from polling",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_spdk_max_io_completion",
                  "type": "uint",
                  "level": "dev",
                  "desc": "Maximal I/Os to be batched completed while checking queue pair completions, 0 means let spdk library determine it",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_spdk_mem",
                  "type": "size",
                  "level": "dev",
                  "desc": "Amount of dpdk memory size in MB",
                  "long_desc": "If running multiple SPDK instances per node, you must specify the amount of dpdk memory size in MB each instance will use, to make sure each instance uses its own dpdk memory",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "512"
                },
                {
                  "name": "bluestore_sync_submit_transaction",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Try to submit metadata transaction to rocksdb in queuing thread context",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "bluestore_throttle_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Maximum bytes in flight before we throttle IO submission",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "default": "67108864"
                },
                {
                  "name": "bluestore_throttle_cost_per_io",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Overhead added to transaction cost (in bytes) for each IO",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "default": "0"
                },
                {
                  "name": "bluestore_throttle_cost_per_io_hdd",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Default bluestore_throttle_cost_per_io for rotational media",
                  "long_desc": "",
                  "default": 670000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "bluestore_throttle_cost_per_io_ssd",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Default bluestore_throttle_cost_per_io for non-rotation (solid state) media",
                  "long_desc": "",
                  "default": 4000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "bluestore_throttle_deferred_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Maximum bytes for deferred writes before we throttle IO submission",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "default": "134217728"
                },
                {
                  "name": "cephx_cluster_require_signatures",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "cephx_cluster_require_version",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Cephx version required by the cluster from clients (1 = pre-mimic, 2 = mimic+)",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "cephx_require_signatures",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "cephx_require_version",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Cephx version required (1 = pre-mimic, 2 = mimic+)",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "cephx_service_require_signatures",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "cephx_service_require_version",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Cephx version required from ceph services (1 = pre-mimic, 2 = mimic+)",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "cephx_sign_messages",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "chdir",
                  "type": "str",
                  "level": "advanced",
                  "desc": "path to chdir(2) to after daemonizing",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [
                    "service"
                  ],
                  "services": [
                    "mon",
                    "mgr",
                    "osd",
                    "mds"
                  ],
                  "see_also": [
                    "daemonize"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update"
                  ]
                },
                {
                  "name": "client_acl_type",
                  "type": "str",
                  "level": "advanced",
                  "desc": "ACL type to enforce (none or \"posix_acl\")",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "client_cache_mid",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mid-point of client cache LRU",
                  "long_desc": "",
                  "default": 0.75,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_cache_size",
                  "type": "size",
                  "level": "basic",
                  "desc": "soft maximum number of directory entries in client cache",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "16384"
                },
                {
                  "name": "client_caps_release_delay",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_check_pool_perm",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "confirm access to inode's data pool/namespace described in file layout",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_debug_force_sync_read",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_debug_getattr_caps",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_debug_inject_tick_delay",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_die_on_failed_dentry_invalidate",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "kill the client when no dentry invalidation options are available",
                  "long_desc": "The CephFS client requires a mechanism to invalidate dentries in the caller (e.g. the kernel for ceph-fuse) when capabilities must be recalled. If the client cannot do this then the MDS cache cannot shrink which can cause the MDS to fail.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_die_on_failed_remount",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_dirsize_rbytes",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "set the directory size as the number of file bytes recursively used",
                  "long_desc": "This option enables a CephFS feature that stores the recursive directory size (the bytes used by files in the directory and its descendents) in the st_size field of the stat structure.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_force_lazyio",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_inject_fixed_oldest_tid",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_inject_release_failure",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_max_inline_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "4096"
                },
                {
                  "name": "client_mds_namespace",
                  "type": "str",
                  "level": "advanced",
                  "desc": "CephFS file system name to mount",
                  "long_desc": "Use this with ceph-fuse, or with any process that uses libcephfs.  Programs using libcephfs may also pass the filesystem name into mount(), which will override this setting. If no filesystem name is given in mount() or this setting, the default filesystem will be mounted (usually the first created).",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "client_metadata",
                  "type": "str",
                  "level": "advanced",
                  "desc": "metadata key=value comma-delimited pairs appended to session metadata",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "client_mount_gid",
                  "type": "int",
                  "level": "advanced",
                  "desc": "gid to mount as",
                  "long_desc": "",
                  "default": -1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_mount_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "timeout for mounting CephFS (seconds)",
                  "long_desc": "",
                  "default": 300,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_mount_uid",
                  "type": "int",
                  "level": "advanced",
                  "desc": "uid to mount as",
                  "long_desc": "",
                  "default": -1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_mountpoint",
                  "type": "str",
                  "level": "advanced",
                  "desc": "default mount-point",
                  "long_desc": "",
                  "default": "/",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "client_notify_timeout",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_oc",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "enable object caching",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_oc_max_dirty",
                  "type": "size",
                  "level": "advanced",
                  "desc": "maximum size of dirty pages in object cache",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "104857600"
                },
                {
                  "name": "client_oc_max_dirty_age",
                  "type": "float",
                  "level": "advanced",
                  "desc": "maximum age of dirty pages in object cache (seconds)",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_oc_max_objects",
                  "type": "int",
                  "level": "advanced",
                  "desc": "maximum number of objects in cache",
                  "long_desc": "",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_oc_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "maximum size of object cache",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "209715200"
                },
                {
                  "name": "client_oc_target_dirty",
                  "type": "size",
                  "level": "advanced",
                  "desc": "target size of dirty pages object cache",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "8388608"
                },
                {
                  "name": "client_permissions",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "client-enforced permission checking",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_quota_df",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "show quota usage for statfs (df)",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_readahead_max_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "maximum bytes to readahead in a file (zero is unlimited)",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "0"
                },
                {
                  "name": "client_readahead_max_periods",
                  "type": "int",
                  "level": "advanced",
                  "desc": "maximum stripe periods to readahead in a file",
                  "long_desc": "",
                  "default": 4,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_readahead_min",
                  "type": "size",
                  "level": "advanced",
                  "desc": "minimum bytes to readahead in a file",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "131072"
                },
                {
                  "name": "client_reconnect_stale",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "reconnect when the session becomes stale",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_snapdir",
                  "type": "str",
                  "level": "advanced",
                  "desc": "pseudo directory for snapshot access to a directory",
                  "long_desc": "",
                  "default": ".snap",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "client_tick_interval",
                  "type": "float",
                  "level": "dev",
                  "desc": "seconds between client upkeep ticks",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_trace",
                  "type": "str",
                  "level": "dev",
                  "desc": "file containing trace of client operations",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "client_try_dentry_invalidate",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_use_faked_inos",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "client_use_random_mds",
                  "type": "bool",
                  "level": "dev",
                  "desc": "issue new requests to a random active MDS",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "clog_to_graylog",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Make daemons send cluster log to graylog",
                  "long_desc": "",
                  "default": "false",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "clog_to_graylog_host",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Graylog host to cluster log messages",
                  "long_desc": "",
                  "default": "127.0.0.1",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "clog_to_graylog"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "clog_to_graylog_port",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Graylog port number for cluster log messages",
                  "long_desc": "",
                  "default": "12201",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "clog_to_graylog"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "clog_to_monitors",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Make daemons send cluster log messages to monitors",
                  "long_desc": "",
                  "default": "default=true",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "clog_to_syslog",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Make daemons send cluster log messages to syslog",
                  "long_desc": "",
                  "default": "false",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "clog_to_syslog_facility",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Syslog facility for cluster log messages",
                  "long_desc": "",
                  "default": "default=daemon audit=local0",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "clog_to_syslog"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "clog_to_syslog_level",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Syslog level for cluster log messages",
                  "long_desc": "",
                  "default": "info",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "clog_to_syslog"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "cluster_addr",
                  "type": "addr",
                  "level": "basic",
                  "desc": "cluster-facing address to bind to",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [
                    "network"
                  ],
                  "services": [
                    "osd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [],
                  "default": "-"
                },
                {
                  "name": "cluster_network",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Network(s) from which to choose a cluster address to bind to",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [
                    "network"
                  ],
                  "services": [
                    "osd"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "cluster_network_interface",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Interface name(s) from which to choose an address from a cluster_network to bind to; cluster_network must also be specified.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [
                    "network"
                  ],
                  "services": [
                    "mon",
                    "mds",
                    "osd",
                    "mgr"
                  ],
                  "see_also": [
                    "cluster_network"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "compressor_zlib_isal",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Use Intel ISA-L accelerated zlib implementation if available",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "compressor_zlib_level",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Zlib compression level to use",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "crash_dir",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Directory where crash reports are archived",
                  "long_desc": "",
                  "default": "/var/lib/ceph/crash",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "crush_location",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "crush_location_hook",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "crush_location_hook_timeout",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "daemonize",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "whether to daemonize (background) after startup",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": true,
                  "tags": [
                    "service"
                  ],
                  "services": [
                    "mon",
                    "mgr",
                    "osd",
                    "mds"
                  ],
                  "see_also": [
                    "pid_file",
                    "chdir"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "no_mon_update"
                  ]
                },
                {
                  "name": "debug_asok",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for asok",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_asok_assert_abort",
                  "type": "bool",
                  "level": "dev",
                  "desc": "allow commands 'assert' and 'abort' via asok for testing crash dumps etc",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "debug_asserts_on_shutdown",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Enable certain asserts to check for refcounting bugs on shutdown; see http://tracker.ceph.com/issues/21738",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "debug_auth",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for auth",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_bdev",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for bdev",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/3",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "osd",
                      "value": "20/20"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "debug_bluefs",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for bluefs",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "osd",
                      "value": "20/20"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "debug_bluestore",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for bluestore",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "osd",
                      "value": "20/20"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "debug_buffer",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for buffer",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/1",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_civetweb",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for civetweb",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/10",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_client",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for client",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_compressor",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for compressor",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_context",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for context",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/1",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_crush",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for crush",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/1",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_crypto",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for crypto",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_deliberately_leak_memory",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "debug_dpdk",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for dpdk",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_eventtrace",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for eventtrace",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_filer",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for filer",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/1",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_filestore",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for filestore",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/3",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "osd",
                      "value": "20/20"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "debug_finisher",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for finisher",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/1",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_fuse",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for fuse",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_heartbeatmap",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for heartbeatmap",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_javaclient",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for javaclient",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_journal",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for journal",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/3",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "osd",
                      "value": "20/20"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "debug_journaler",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for journaler",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_kinetic",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for kinetic",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_kstore",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for kstore",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_leveldb",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for leveldb",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "4/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_lockdep",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for lockdep",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/1",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_mds",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for mds",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "mds",
                      "value": "20/20"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "debug_mds_balancer",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for mds_balancer",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_mds_locker",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for mds_locker",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_mds_log",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for mds_log",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_mds_log_expire",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for mds_log_expire",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_mds_migrator",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for mds_migrator",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_memdb",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for memdb",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "4/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_mgr",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for mgr",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "mgr",
                      "value": "20/20"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "debug_mgrc",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for mgrc",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "osd",
                      "value": "20/20"
                    },
                    {
                      "section": "mds",
                      "value": "20/20"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "debug_mon",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for mon",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "mgr",
                      "value": "20/20"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "debug_monc",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for monc",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/10",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "mgr",
                      "value": "20/20"
                    },
                    {
                      "section": "osd",
                      "value": "20/20"
                    },
                    {
                      "section": "mds",
                      "value": "20/20"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "debug_ms",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for ms",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "mgr",
                      "value": "1/1"
                    },
                    {
                      "section": "osd",
                      "value": "1/1"
                    },
                    {
                      "section": "mds",
                      "value": "1/1"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "debug_none",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for none",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_objclass",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for objclass",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "osd",
                      "value": "20/20"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "debug_objectcacher",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for objectcacher",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_objecter",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for objecter",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/1",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "osd",
                      "value": "20/20"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "debug_optracker",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for optracker",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_osd",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for osd",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "osd",
                      "value": "25/25"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "debug_paxos",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for paxos",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_perfcounter",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for perfcounter",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_rados",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for rados",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_rbd",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for rbd",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_rbd_mirror",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for rbd_mirror",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_rbd_replay",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for rbd_replay",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_refs",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for refs",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/0",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_reserver",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for reserver",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/1",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "osd",
                      "value": "10/10"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "debug_rgw",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for rgw",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_rgw_sync",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for rgw_sync",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_rocksdb",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for rocksdb",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "4/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "osd",
                      "value": "20/20"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "debug_striper",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for striper",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/1",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_throttle",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for throttle",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/1",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_timer",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for timer",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/1",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_tp",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for tp",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "0/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "debug_xio",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Debug level for xio",
                  "long_desc": "The value takes the form 'N' or 'N/M' where N and M are values between 0 and 99.  N is the debug level to log (all values below this are included), and M is the level to gather and buffer in memory.  In the event of a crash, the most recent items <= M are dumped to the log file.",
                  "default": "1/5",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "device_failure_prediction_mode",
                  "type": "str",
                  "level": "basic",
                  "desc": "Method used to predict device failures",
                  "long_desc": "To disable prediction, use 'none',  'local' uses a prediction model that runs inside the mgr daemon.  'cloud' will share metrics with a cloud service and query the service for devicelife expectancy.",
                  "default": "none",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [
                    "none",
                    "local",
                    "cloud"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "enable_experimental_unrecoverable_data_corrupting_features",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Enable named (or all with '*') experimental features that may be untested, dangerous, and/or cause permanent data loss",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "erasure_code_dir",
                  "type": "str",
                  "level": "advanced",
                  "desc": "directory where erasure-code plugins can be found",
                  "long_desc": "",
                  "default": "/usr/local/lib64/ceph/erasure-code",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon",
                    "osd"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "err_to_graylog",
                  "type": "bool",
                  "level": "basic",
                  "desc": "send critical error log lines to remote graylog server",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "log_to_graylog",
                    "log_graylog_host",
                    "log_graylog_port"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "err_to_stderr",
                  "type": "bool",
                  "level": "basic",
                  "desc": "send critical error log lines to stderr",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": true,
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "err_to_syslog",
                  "type": "bool",
                  "level": "basic",
                  "desc": "send critical error log lines to syslog facility",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "event_tracing",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "fatal_signal_handlers",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "whether to register signal handlers for SIGABRT etc that dump a stack trace",
                  "long_desc": "This is normally true for daemons and values for libraries.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [
                    "service"
                  ],
                  "services": [
                    "mon",
                    "mgr",
                    "osd",
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filer_max_purge_ops",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Max in-flight operations for purging a striped range (e.g., MDS journal)",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filer_max_truncate_ops",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Max in-flight operations for truncating/deleting a striped sequence (e.g., MDS journal)",
                  "long_desc": "",
                  "default": 128,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_apply_finisher_threads",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_blackhole",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_btrfs_clone_range",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Use btrfs clone_range ioctl to efficiently duplicate objects",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_btrfs_snap",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_caller_concurrency",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_collect_device_partition_information",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Collect metadata about the backing file system on OSD startup",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_commit_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Seconds before backing file system is considered hung",
                  "long_desc": "",
                  "default": 600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_debug_inject_read_err",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_debug_omap_check",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_debug_random_read_err",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_debug_verify_split",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_dump_file",
                  "type": "str",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "filestore_expected_throughput_bytes",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Expected throughput of backend device (aids throttling calculations)",
                  "long_desc": "",
                  "default": 209715200,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_expected_throughput_ops",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Expected through of backend device in IOPS (aids throttling calculations)",
                  "long_desc": "",
                  "default": 200,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_fadvise",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Use posix_fadvise(2) to pass hints to file system",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_fail_eio",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_fd_cache_shards",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 16,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_fd_cache_size",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 128,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_fiemap",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Use fiemap ioctl(2) to determine which parts of objects are sparse",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_fiemap_threshold",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "4096"
                },
                {
                  "name": "filestore_fsync_flushes_journal_data",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_index_retry_probability",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_inject_stall",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_journal_parallel",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_journal_trailing",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_journal_writeahead",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_kill_at",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_max_alloc_hint_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1048576"
                },
                {
                  "name": "filestore_max_inline_xattr_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "0"
                },
                {
                  "name": "filestore_max_inline_xattr_size_btrfs",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "2048"
                },
                {
                  "name": "filestore_max_inline_xattr_size_other",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "512"
                },
                {
                  "name": "filestore_max_inline_xattr_size_xfs",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "65536"
                },
                {
                  "name": "filestore_max_inline_xattrs",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_max_inline_xattrs_btrfs",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_max_inline_xattrs_other",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_max_inline_xattrs_xfs",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_max_sync_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Period between calls to syncfs(2) and journal trims (seconds)",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_max_xattr_value_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "0"
                },
                {
                  "name": "filestore_max_xattr_value_size_btrfs",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "65536"
                },
                {
                  "name": "filestore_max_xattr_value_size_other",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1024"
                },
                {
                  "name": "filestore_max_xattr_value_size_xfs",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "65536"
                },
                {
                  "name": "filestore_merge_threshold",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": -10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_min_sync_interval",
                  "type": "float",
                  "level": "dev",
                  "desc": "Minimum period between calls to syncfs(2)",
                  "long_desc": "",
                  "default": 0.01,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_odsync_write",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Write with O_DSYNC",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_omap_backend",
                  "type": "str",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": "rocksdb",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "filestore_omap_backend_path",
                  "type": "str",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "filestore_omap_header_cache_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1024"
                },
                {
                  "name": "filestore_ondisk_finisher_threads",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_op_thread_suicide_timeout",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Seconds before a worker thread is considered dead",
                  "long_desc": "",
                  "default": 180,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_op_thread_timeout",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Seconds before a worker thread is considered stalled",
                  "long_desc": "",
                  "default": 60,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_op_threads",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Threads used to apply changes to backing file system",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_punch_hole",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Use fallocate(2) FALLOC_FL_PUNCH_HOLE to efficiently zero ranges of objects",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_queue_high_delay_multiple",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_queue_high_delay_multiple_bytes",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_queue_high_delay_multiple_ops",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_queue_high_threshhold",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.9,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_queue_low_threshhold",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_queue_max_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Max (written) bytes in flight",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "104857600"
                },
                {
                  "name": "filestore_queue_max_delay_multiple",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_queue_max_delay_multiple_bytes",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_queue_max_delay_multiple_ops",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_queue_max_ops",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Max IO operations in flight",
                  "long_desc": "",
                  "default": 50,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_rocksdb_options",
                  "type": "str",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": "max_background_jobs=10,compaction_readahead_size=2097152,compression=kNoCompression",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "filestore_seek_data_hole",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Use lseek(2) SEEK_HOLE and SEEK_DATA to determine which parts of objects are sparse",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_sloppy_crc",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_sloppy_crc_block_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "65536"
                },
                {
                  "name": "filestore_splice",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Use splice(2) to more efficiently copy data between files",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_split_multiple",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_split_rand_factor",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 20,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_update_to",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_wbthrottle_btrfs_bytes_hard_limit",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Block writes when this many bytes haven't been flushed (fsynced) (btrfs)",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "419430400"
                },
                {
                  "name": "filestore_wbthrottle_btrfs_bytes_start_flusher",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Start flushing (fsyncing) when this many bytes are written(btrfs)",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "41943040"
                },
                {
                  "name": "filestore_wbthrottle_btrfs_inodes_hard_limit",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Block writing when this many inodes have outstanding writes (btrfs)",
                  "long_desc": "",
                  "default": 5000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_wbthrottle_btrfs_inodes_start_flusher",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Start flushing (fsyncing) when this many distinct inodes have been modified (btrfs)",
                  "long_desc": "",
                  "default": 500,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_wbthrottle_btrfs_ios_hard_limit",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Block writes when this many IOs haven't been flushed (fsynced) (btrfs)",
                  "long_desc": "",
                  "default": 5000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_wbthrottle_btrfs_ios_start_flusher",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Start flushing (fsyncing) when this many IOs are written (brtrfs)",
                  "long_desc": "",
                  "default": 500,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_wbthrottle_enable",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Enabling throttling of operations to backing file system",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_wbthrottle_xfs_bytes_hard_limit",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Block writes when this many bytes haven't been flushed (fsynced) (xfs)",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "419430400"
                },
                {
                  "name": "filestore_wbthrottle_xfs_bytes_start_flusher",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Start flushing (fsyncing) when this many bytes are written(xfs)",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "41943040"
                },
                {
                  "name": "filestore_wbthrottle_xfs_inodes_hard_limit",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Block writing when this many inodes have outstanding writes (xfs)",
                  "long_desc": "",
                  "default": 5000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_wbthrottle_xfs_inodes_start_flusher",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Start flushing (fsyncing) when this many distinct inodes have been modified (xfs)",
                  "long_desc": "",
                  "default": 500,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_wbthrottle_xfs_ios_hard_limit",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Block writes when this many IOs haven't been flushed (fsynced) (xfs)",
                  "long_desc": "",
                  "default": 5000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_wbthrottle_xfs_ios_start_flusher",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Start flushing (fsyncing) when this many IOs are written (xfs)",
                  "long_desc": "",
                  "default": 500,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_xfs_extsize",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Use XFS extsize ioctl(2) to hint allocator about expected write sizes",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "filestore_zfs_snap",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "fio_dir",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "/tmp/fio",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "fsid",
                  "type": "uuid",
                  "level": "basic",
                  "desc": "cluster fsid (uuid)",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [
                    "service"
                  ],
                  "services": [
                    "common"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update"
                  ],
                  "default": "00000000-0000-0000-0000-000000000000"
                },
                {
                  "name": "fuse_allow_other",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "pass allow_other to FUSE on mount",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "fuse_atomic_o_trunc",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "pass atomic_o_trunc flag to FUSE on mount",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "fuse_big_writes",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "big_writes is deprecated in libfuse 3.0.0",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "fuse_debug",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "fuse_default_permissions",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "pass default_permisions to FUSE on mount",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "fuse_disable_pagecache",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "disable page caching in the kernel for this FUSE mount",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "fuse_max_write",
                  "type": "size",
                  "level": "advanced",
                  "desc": "set the maximum number of bytes in a single write operation",
                  "long_desc": "Set the maximum number of bytes in a single write operation that may pass atomically through FUSE. The FUSE default is 128kB and may be indicated by setting this option to 0.",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "0"
                },
                {
                  "name": "fuse_multithreaded",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "allow parallel processing through FUSE library",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "fuse_require_active_mds",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "require active MDSs in the file system when mounting",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "fuse_set_user_groups",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "check for ceph-fuse to consider supplementary groups for permissions",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "fuse_syncfs_on_mksnap",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "synchronize all local metadata/file changes after snapshot",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "fuse_use_invalidate_cb",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "use fuse 2.8+ invalidate callback to keep page cache consistent",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "gss_ktab_client_file",
                  "type": "str",
                  "level": "advanced",
                  "desc": "GSS/KRB5 Keytab file for client authentication",
                  "long_desc": "This sets the full path for the GSS/Kerberos client keytab file location.",
                  "default": "/var/lib/ceph/$name/gss_client_$name.ktab",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon",
                    "osd"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "gss_target_name",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "This sets the gss target service name.",
                  "default": "ceph",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon",
                    "osd"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "heartbeat_file",
                  "type": "str",
                  "level": "advanced",
                  "desc": "File to touch on successful internal heartbeat",
                  "long_desc": "If set, this file will be touched every time an internal heartbeat check succeeds.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "heartbeat_interval"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "heartbeat_inject_failure",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "heartbeat_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Frequency of internal heartbeat checks (seconds)",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "host",
                  "type": "str",
                  "level": "basic",
                  "desc": "local hostname",
                  "long_desc": "if blank, ceph assumes the short hostname (hostname -s)",
                  "default": "",
                  "daemon_default": "",
                  "tags": [
                    "network"
                  ],
                  "services": [
                    "common"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update"
                  ]
                },
                {
                  "name": "inject_early_sigterm",
                  "type": "bool",
                  "level": "dev",
                  "desc": "send ourselves a SIGTERM early during startup",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journal_aio",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journal_align_min_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "65536"
                },
                {
                  "name": "journal_block_align",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journal_block_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "4096"
                },
                {
                  "name": "journal_dio",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journal_discard",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journal_force_aio",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journal_ignore_corruption",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journal_max_write_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Max bytes in flight to journal",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "10485760"
                },
                {
                  "name": "journal_max_write_entries",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Max IOs in flight to journal",
                  "long_desc": "",
                  "default": 100,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journal_replay_from",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journal_throttle_high_multiple",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journal_throttle_high_threshhold",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.9,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journal_throttle_low_threshhold",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.6,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journal_throttle_max_multiple",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journal_write_header_frequency",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journal_zero_on_create",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journaler_prefetch_periods",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Number of striping periods to prefetch while reading MDS journal",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": 2,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journaler_prezero_periods",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Number of striping periods to zero head of MDS journal write position",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": 2,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "journaler_write_head_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Interval in seconds between journal header updates (to help bound replay time)",
                  "long_desc": "",
                  "default": 15,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "key",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Authentication key",
                  "long_desc": "A CephX authentication key, base64 encoded.  It normally looks something like 'AQAtut9ZdMbNJBAAHz6yBAWyJyz2yYRyeMWDag=='.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "keyfile",
                    "keyring"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update"
                  ]
                },
                {
                  "name": "keyfile",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Path to a file containing a key",
                  "long_desc": "The file should contain a CephX authentication key and optionally a trailing newline, but nothing else.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "key"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update"
                  ]
                },
                {
                  "name": "keyring",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Path to a keyring file.",
                  "long_desc": "A keyring file is an INI-style formatted file where the section names are client or daemon names (e.g., 'osd.0') and each section contains a 'key' property with CephX authentication key as the value.",
                  "default": "/etc/ceph/$cluster.$name.keyring,/etc/ceph/$cluster.keyring,/etc/ceph/keyring,/etc/ceph/keyring.bin,",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "key",
                    "keyfile"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update"
                  ]
                },
                {
                  "name": "kinetic_hmac_key",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "asdfasdf",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "kinetic_host",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "kinetic_port",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 8123,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "kinetic_use_ssl",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "kinetic_user_id",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "kstore_backend",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "rocksdb",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "kstore_default_stripe_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "65536"
                },
                {
                  "name": "kstore_fsck_on_mount",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "kstore_fsck_on_mount_deep",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "kstore_max_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "67108864"
                },
                {
                  "name": "kstore_max_ops",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 512,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "kstore_nid_prealloc",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1024,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "kstore_onode_map_size",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1024,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "kstore_rocksdb_options",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "compression=kNoCompression",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "kstore_sync_submit_transaction",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "kstore_sync_transaction",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "leveldb_block_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "0"
                },
                {
                  "name": "leveldb_bloom_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "leveldb_cache_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "134217728"
                },
                {
                  "name": "leveldb_compact_on_mount",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "leveldb_compression",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "leveldb_log",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "/dev/null",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "leveldb_log_to_ceph_log",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "leveldb_max_open_files",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "leveldb_paranoid",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "leveldb_write_buffer_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "8388608"
                },
                {
                  "name": "lockdep",
                  "type": "bool",
                  "level": "dev",
                  "desc": "enable lockdep lock dependency analyzer",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "common"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "no_mon_update"
                  ]
                },
                {
                  "name": "lockdep_force_backtrace",
                  "type": "bool",
                  "level": "dev",
                  "desc": "always gather current backtrace at every lock",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "common"
                  ],
                  "see_also": [
                    "lockdep"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "log_coarse_timestamps",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "timestamp log entries from coarse system clock to improve performance",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [
                    "performance",
                    "service"
                  ],
                  "services": [
                    "common"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "log_file",
                  "type": "str",
                  "level": "basic",
                  "desc": "path to log file",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "/var/log/ceph/$cluster-$name.log",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "log_to_stderr",
                    "err_to_stderr",
                    "log_to_syslog",
                    "err_to_syslog"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "log_flush_on_exit",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "set a process exit handler to ensure the log is flushed on exit",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "log_graylog_host",
                  "type": "str",
                  "level": "basic",
                  "desc": "address or hostname of graylog server to log to",
                  "long_desc": "",
                  "default": "127.0.0.1",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "log_to_graylog",
                    "err_to_graylog",
                    "log_graylog_port"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "log_graylog_port",
                  "type": "int",
                  "level": "basic",
                  "desc": "port number for the remote graylog server",
                  "long_desc": "",
                  "default": 12201,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "log_graylog_host"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "log_max_new",
                  "type": "int",
                  "level": "advanced",
                  "desc": "max unwritten log entries to allow before waiting to flush to the log",
                  "long_desc": "",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "log_max_recent"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "log_max_recent",
                  "type": "int",
                  "level": "advanced",
                  "desc": "recent log entries to keep in memory to dump in the event of a crash",
                  "long_desc": "The purpose of this option is to log at a higher debug level only to the in-memory buffer, and write out the detailed log messages only if there is a crash.  Only log entries below the lower log level will be written unconditionally to the log.  For example, debug_osd=1/5 will write everything <= 1 to the log unconditionally but keep entries at levels 2-5 in memory.  If there is a seg fault or assertion failure, all entries will be dumped to the log.",
                  "default": 500,
                  "daemon_default": 10000,
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "log_stderr_prefix",
                  "type": "str",
                  "level": "advanced",
                  "desc": "String to prefix log messages with when sent to stderr",
                  "long_desc": "This is useful in container environments when combined with mon_cluster_log_to_stderr.  The mon log prefixes each line with the channel name (e.g., 'default', 'audit'), while log_stderr_prefix can be set to 'debug '.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "mon_cluster_log_to_stderr"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "log_stop_at_utilization",
                  "type": "float",
                  "level": "basic",
                  "desc": "stop writing to the log file when device utilization reaches this ratio",
                  "long_desc": "",
                  "default": 0.97,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "log_file"
                  ],
                  "min": 0,
                  "max": 1,
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "log_to_graylog",
                  "type": "bool",
                  "level": "basic",
                  "desc": "send log lines to remote graylog server",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "err_to_graylog",
                    "log_graylog_host",
                    "log_graylog_port"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "log_to_stderr",
                  "type": "bool",
                  "level": "basic",
                  "desc": "send log lines to stderr",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": false,
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "log_to_syslog",
                  "type": "bool",
                  "level": "basic",
                  "desc": "send log lines to syslog facility",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "max_rotating_auth_attempts",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_action_on_write_error",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "action to take when MDS cannot write to RADOS (0:ignore, 1:read-only, 2:suicide)",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_export_pin",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "allow setting directory export pins to particular ranks",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_fragment_dirs",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "enable directory fragmentation",
                  "long_desc": "Directory fragmentation is a standard feature of CephFS that allows sharding directories across multiple objects for performance and stability. Additionally, this allows fragments to be distributed across multiple active MDSs to increase throughput. Disabling (new) fragmentation should only be done in exceptional circumstances and may lead to performance issues.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_fragment_fast_factor",
                  "type": "float",
                  "level": "advanced",
                  "desc": "ratio of mds_bal_split_size at which fast fragment splitting occurs",
                  "long_desc": "",
                  "default": 1.5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_fragment_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "delay in seconds before interrupting client IO to perform splits",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_fragment_size_max",
                  "type": "int",
                  "level": "advanced",
                  "desc": "maximum size of a directory fragment before new creat/links fail",
                  "long_desc": "",
                  "default": 100000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_idle_threshold",
                  "type": "float",
                  "level": "advanced",
                  "desc": "idle metadata popularity threshold before rebalancing",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "interval between MDS balancer cycles",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_max",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": -1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_max_until",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": -1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_merge_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "size of fragments where merging should occur",
                  "long_desc": "",
                  "default": 50,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_midchunk",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_min_rebalance",
                  "type": "float",
                  "level": "dev",
                  "desc": "amount overloaded over internal target before balancer begins offloading",
                  "long_desc": "",
                  "default": 0.1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_min_start",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_minchunk",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.001,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_mode",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_need_max",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 1.2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_need_min",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.8,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_replicate_threshold",
                  "type": "float",
                  "level": "advanced",
                  "desc": "hot popularity threshold to replicate a subtree",
                  "long_desc": "",
                  "default": 8000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_sample_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "interval in seconds between balancer ticks",
                  "long_desc": "",
                  "default": 3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_split_bits",
                  "type": "int",
                  "level": "advanced",
                  "desc": "power of two child fragments for a fragment on split",
                  "long_desc": "",
                  "default": 3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": 1,
                  "max": 24,
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_split_rd",
                  "type": "float",
                  "level": "advanced",
                  "desc": "hot read popularity threshold for splitting a directory fragment",
                  "long_desc": "",
                  "default": 25000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_split_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "minimum size of directory fragment before splitting",
                  "long_desc": "",
                  "default": 10000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_split_wr",
                  "type": "float",
                  "level": "advanced",
                  "desc": "hot write popularity threshold for splitting a directory fragment",
                  "long_desc": "",
                  "default": 10000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_target_decay",
                  "type": "float",
                  "level": "advanced",
                  "desc": "rate of decay for export targets communicated to clients",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_bal_unreplicate_threshold",
                  "type": "float",
                  "level": "advanced",
                  "desc": "cold popularity threshold to merge subtrees",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_beacon_grace",
                  "type": "float",
                  "level": "advanced",
                  "desc": "tolerance in seconds for missed MDS beacons to monitors",
                  "long_desc": "",
                  "default": 15,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_beacon_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "interval in seconds between MDS beacons to monitors",
                  "long_desc": "",
                  "default": 4,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_cache_memory_limit",
                  "type": "size",
                  "level": "basic",
                  "desc": "target maximum memory usage of MDS cache",
                  "long_desc": "This sets a target maximum memory usage of the MDS cache and is the primary tunable to limit the MDS memory usage. The MDS will try to stay under a reservation of this limit (by default 95%; 1 - mds_cache_reservation) by trimming unused metadata in its cache and recalling cached items in the client caches. It is possible for the MDS to exceed this limit due to slow recall from clients. The mds_health_cache_threshold (150%) sets a cache full threshold for when the MDS signals a cluster health warning.",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1073741824"
                },
                {
                  "name": "mds_cache_mid",
                  "type": "float",
                  "level": "advanced",
                  "desc": "midpoint for MDS cache LRU",
                  "long_desc": "",
                  "default": 0.7,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_cache_reservation",
                  "type": "float",
                  "level": "advanced",
                  "desc": "amount of memory to reserve for future cached objects",
                  "long_desc": "",
                  "default": 0.05,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_cache_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "maximum number of inodes in MDS cache (<=0 is unlimited)",
                  "long_desc": "This tunable is no longer recommended. Use mds_cache_memory_limit.",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_cap_revoke_eviction_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "number of seconds after which clients which have not responded to cap revoke messages by the MDS are evicted.",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_client_prealloc_inos",
                  "type": "int",
                  "level": "advanced",
                  "desc": "number of unused inodes to pre-allocate to clients for file creation",
                  "long_desc": "",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_client_writeable_range_max_inc_objs",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum number of objects in writeable range of a file for a client",
                  "long_desc": "",
                  "default": 1024,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_damage_table_max_entries",
                  "type": "int",
                  "level": "advanced",
                  "desc": "maximum number of damage table entries",
                  "long_desc": "",
                  "default": 10000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_data",
                  "type": "str",
                  "level": "advanced",
                  "desc": "path to MDS data and keyring",
                  "long_desc": "",
                  "default": "/var/lib/ceph/mds/$cluster-$id",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update"
                  ]
                },
                {
                  "name": "mds_debug_auth_pins",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "value": [
                    {
                      "section": "mds",
                      "value": "true"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "mds_debug_frag",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "value": [
                    {
                      "section": "mds",
                      "value": "true"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "mds_debug_scatterstat",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "value": [
                    {
                      "section": "mds",
                      "value": "true"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "mds_debug_subtrees",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "value": [
                    {
                      "section": "mds",
                      "value": "true"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "mds_decay_halflife",
                  "type": "float",
                  "level": "advanced",
                  "desc": "rate of decay for temperature counters on each directory for balancing",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_default_dir_hash",
                  "type": "int",
                  "level": "advanced",
                  "desc": "hash function to select directory fragment for dentry name",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_dir_keys_per_op",
                  "type": "int",
                  "level": "advanced",
                  "desc": "number of directory entries to read in one RADOS operation",
                  "long_desc": "",
                  "default": 16384,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_dir_max_commit_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "maximum size in megabytes for a RADOS write to a directory",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_dirstat_min_interval",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_dump_cache_after_rejoin",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_dump_cache_on_map",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_dump_cache_threshold_file",
                  "type": "size",
                  "level": "dev",
                  "desc": "threshold for cache usage to disallow \"dump cache\" operation to file",
                  "long_desc": "Disallow MDS from dumping caches to file via \"dump cache\" command if cache usage exceeds this threshold.",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "0"
                },
                {
                  "name": "mds_dump_cache_threshold_formatter",
                  "type": "size",
                  "level": "dev",
                  "desc": "threshold for cache usage to disallow \"dump cache\" operation to formatter",
                  "long_desc": "Disallow MDS from dumping caches to formatter via \"dump cache\" command if cache usage exceeds this threshold.",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1073741824"
                },
                {
                  "name": "mds_early_reply",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "additional reply to clients that metadata requests are complete but not yet durable",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_enable_op_tracker",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "track remote operation progression and statistics",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_enforce_unique_name",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "require MDS name is unique in the cluster",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_freeze_tree_timeout",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_hack_allow_loading_invalid_metadata",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "INTENTIONALLY CAUSE DATA LOSS by bypasing checks for invalid metadata on disk. Allows testing repair tools.",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_health_cache_threshold",
                  "type": "float",
                  "level": "advanced",
                  "desc": "threshold for cache size to generate health warning",
                  "long_desc": "",
                  "default": 1.5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_health_summarize_threshold",
                  "type": "int",
                  "level": "advanced",
                  "desc": "threshold of number of clients to summarize late client recall",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_heartbeat_grace",
                  "type": "float",
                  "level": "advanced",
                  "desc": "tolerance in seconds for MDS internal heartbeat",
                  "long_desc": "",
                  "default": 15,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_inject_migrator_session_race",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_inject_traceless_reply_probability",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_journal_format",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_kill_create_at",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_kill_export_at",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_kill_import_at",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_kill_journal_at",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_kill_journal_expire_at",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_kill_journal_replay_at",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_kill_link_at",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_kill_mdstable_at",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_kill_openc_at",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_kill_rename_at",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_log_events_per_segment",
                  "type": "int",
                  "level": "advanced",
                  "desc": "maximum number of events in an MDS journal segment",
                  "long_desc": "",
                  "default": 1024,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_log_max_events",
                  "type": "int",
                  "level": "advanced",
                  "desc": "maximum number of events in the MDS journal (-1 is unlimited)",
                  "long_desc": "",
                  "default": -1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_log_max_segments",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum number of segments which may be untrimmed",
                  "long_desc": "",
                  "default": 128,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_log_pause",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_log_segment_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "size in bytes of each MDS log segment",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "0"
                },
                {
                  "name": "mds_log_skip_corrupt_events",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_max_completed_flushes",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 100000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_max_completed_requests",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 100000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_max_export_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "20971520"
                },
                {
                  "name": "mds_max_file_recover",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum number of files to recover file sizes in parallel",
                  "long_desc": "",
                  "default": 32,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_max_purge_files",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum number of deleted files to purge in parallel",
                  "long_desc": "",
                  "default": 64,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_max_purge_ops",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum number of purge operations performed in parallel",
                  "long_desc": "",
                  "default": 8192,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_max_purge_ops_per_pg",
                  "type": "float",
                  "level": "advanced",
                  "desc": "number of parallel purge operations performed per PG",
                  "long_desc": "",
                  "default": 0.5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_max_ratio_caps_per_client",
                  "type": "float",
                  "level": "dev",
                  "desc": "maximum ratio of current caps that may be recalled during MDS cache pressure",
                  "long_desc": "",
                  "default": 0.8,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_max_retries_on_remount_failure",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of consecutive failed remount attempts for invalidating kernel dcache after which client would abort.",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_max_scrub_ops_in_progress",
                  "type": "int",
                  "level": "advanced",
                  "desc": "maximum number of scrub operations performed in parallel",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_max_xattr_pairs_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "maximum aggregate size of extended attributes on a file",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "65536"
                },
                {
                  "name": "mds_min_caps_per_client",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "minimum number of capabilities a client may hold",
                  "long_desc": "",
                  "default": 100,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_mon_shutdown_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "time to wait for mon to receive damaged MDS rank notification",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_op_complaint_time",
                  "type": "float",
                  "level": "advanced",
                  "desc": "time in seconds to consider an operation blocked after no updates",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_op_history_duration",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "expiration time in seconds of historical operations",
                  "long_desc": "",
                  "default": 600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_op_history_size",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum size for list of historical operations",
                  "long_desc": "",
                  "default": 20,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_op_log_threshold",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_purge_queue_busy_flush_period",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_recall_state_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "timeout for clients late on cap recall to create health warnings",
                  "long_desc": "",
                  "default": 60,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_reconnect_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "timeout in seconds to wait for clients to reconnect during MDS reconnect recovery state",
                  "long_desc": "",
                  "default": 45,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_replay_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "time in seconds between replay of updates to journal by standby replay MDS",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_request_load_average_decay_rate",
                  "type": "float",
                  "level": "advanced",
                  "desc": "rate of decay in seconds for calculating request load average",
                  "long_desc": "",
                  "default": 60,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_root_ino_gid",
                  "type": "int",
                  "level": "advanced",
                  "desc": "default gid for new root directory",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_root_ino_uid",
                  "type": "int",
                  "level": "advanced",
                  "desc": "default uid for new root directory",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_scatter_nudge_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "minimum interval between scatter lock updates",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_session_blacklist_on_evict",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "blacklist clients that have been evicted",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_session_blacklist_on_timeout",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "blacklist clients whose sessions have become stale",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_sessionmap_keys_per_op",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of omap keys to read from the SessionMap in one operation",
                  "long_desc": "",
                  "default": 1024,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_shutdown_check",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_skip_ino",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_snap_max_uid",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum uid of client to perform snapshots",
                  "long_desc": "",
                  "default": 4294967294,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_snap_min_uid",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "minimum uid of client to perform snapshots",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_snap_rstat",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "enabled nested rstat for snapshots",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_standby_for_fscid",
                  "type": "int",
                  "level": "advanced",
                  "desc": "standby only for the file system with the given fscid",
                  "long_desc": "",
                  "default": -1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_standby_for_name",
                  "type": "str",
                  "level": "advanced",
                  "desc": "standby for named MDS daemon when not active",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "mds_standby_for_rank",
                  "type": "int",
                  "level": "basic",
                  "desc": "allow MDS to become a standby:replay daemon",
                  "long_desc": "",
                  "default": -1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_standby_replay",
                  "type": "bool",
                  "level": "basic",
                  "desc": "allow MDS to standby replay for an active MDS",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_thrash_exports",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_thrash_fragments",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_tick_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "time in seconds between upkeep tasks",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_verify_backtrace",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_verify_scatter",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "value": [
                    {
                      "section": "mds",
                      "value": "true"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "mds_wipe_ino_prealloc",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mds_wipe_sessions",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mempool_debug",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "no_mon_update"
                  ]
                },
                {
                  "name": "memstore_device_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1073741824"
                },
                {
                  "name": "memstore_page_set",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "memstore_page_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "65536"
                },
                {
                  "name": "mgr_client_bytes",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "134217728"
                },
                {
                  "name": "mgr_client_messages",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 512,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mgr_client_service_daemon_unregister_timeout",
                  "type": "float",
                  "level": "dev",
                  "desc": "Time to wait during shutdown to deregister service with mgr",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mgr_connect_retry_interval",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "common"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mgr_data",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Filesystem path to the ceph-mgr data directory, used to contain keyring.",
                  "long_desc": "",
                  "default": "/var/lib/ceph/mgr/$cluster-$id",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update"
                  ]
                },
                {
                  "name": "mgr_debug_aggressive_pg_num_changes",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Bypass most throttling and safety checks in pg[p]_num controller",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mgr_initial_modules",
                  "type": "str",
                  "level": "basic",
                  "desc": "List of manager modules to enable when the cluster is first started",
                  "long_desc": "This list of module names is read by the monitor when the cluster is first started after installation, to populate the list of enabled manager modules.  Subsequent updates are done using the 'mgr module [enable|disable]' commands.  List may be comma or space separated.",
                  "default": "restful iostat",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update",
                    "cluster_create"
                  ]
                },
                {
                  "name": "mgr_mds_bytes",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "134217728"
                },
                {
                  "name": "mgr_mds_messages",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 128,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mgr_module_path",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Filesystem path to manager modules.",
                  "long_desc": "",
                  "default": "/usr/local/lib64/ceph/mgr",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "mgr_mon_bytes",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "134217728"
                },
                {
                  "name": "mgr_mon_messages",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 128,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mgr_osd_bytes",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "536870912"
                },
                {
                  "name": "mgr_osd_messages",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 8192,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mgr_service_beacon_grace",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Period in seconds from last beacon to manager dropping state about a monitored service (RGW, rbd-mirror etc)",
                  "long_desc": "",
                  "default": 60,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mgr_stats_period",
                  "type": "int",
                  "level": "basic",
                  "desc": "Period in seconds of OSD/MDS stats reports to manager",
                  "long_desc": "Use this setting to control the granularity of time series data collection from daemons.  Adjust upwards if the manager CPU load is too high, or if you simply do not require the most up to date performance counter data.",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mgr_stats_threshold",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Lowest perfcounter priority collected by mgr",
                  "long_desc": "Daemons only set perf counter data to the manager daemon if the counter has a priority higher than this.",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": 0,
                  "max": 11,
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mgr_tick_period",
                  "type": "secs",
                  "level": "advanced",
                  "desc": "Period in seconds of beacon messages to monitor",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "2"
                },
                {
                  "name": "mon_accept_timeout_factor",
                  "type": "float",
                  "level": "advanced",
                  "desc": "multiple of mon_lease for follower mons to accept proposed state changes before calling a new election",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_lease"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_allow_pool_delete",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "allow pool deletions",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "value": [
                    {
                      "section": "mon",
                      "value": "true"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "mon_cache_target_full_warn_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "issue CACHE_POOL_NEAR_FULL health warning when cache pool utilization exceeds this ratio of usable space",
                  "long_desc": "",
                  "default": 0.66,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update",
                    "cluster_create"
                  ]
                },
                {
                  "name": "mon_client_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "max bytes of outstanding client messages mon will read off the network",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "104857600"
                },
                {
                  "name": "mon_client_hunt_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_client_hunt_interval_backoff",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_client_hunt_interval_max_multiple",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_client_hunt_interval_min_multiple",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_client_hunt_parallel",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_client_max_log_entries_per_message",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_client_ping_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_client_ping_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_clock_drift_allowed",
                  "type": "float",
                  "level": "advanced",
                  "desc": "allowed clock drift (in seconds) between mons before issuing a health warning",
                  "long_desc": "",
                  "default": 0.05,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_clock_drift_warn_backoff",
                  "type": "float",
                  "level": "advanced",
                  "desc": "exponential backoff factor for logging clock drift warnings in the cluster log",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_cluster_log_file",
                  "type": "str",
                  "level": "advanced",
                  "desc": "File(s) to write cluster log to",
                  "long_desc": "This can either be a simple file name to receive all messages, or a list of key/value pairs where the key is the log channel and the value is the filename, which may include $cluster and $channel metavariables",
                  "default": "default=/var/log/ceph/$cluster.$channel.log cluster=/var/log/ceph/$cluster.log",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "mon_cluster_log_file_level",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Lowest level to include is cluster log file",
                  "long_desc": "",
                  "default": "info",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_cluster_log_file"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "mon_cluster_log_to_graylog",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Make monitor send cluster log to graylog",
                  "long_desc": "",
                  "default": "false",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "mon_cluster_log_to_graylog_host",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Graylog host for cluster log messages",
                  "long_desc": "",
                  "default": "127.0.0.1",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_cluster_log_to_graylog"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "mon_cluster_log_to_graylog_port",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Graylog port for cluster log messages",
                  "long_desc": "",
                  "default": "12201",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_cluster_log_to_graylog"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "mon_cluster_log_to_stderr",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Make monitor send cluster log messages to stderr (prefixed by channel)",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "log_stderr_prefix"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_cluster_log_to_syslog",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Make monitor send cluster log messages to syslog",
                  "long_desc": "",
                  "default": "default=false",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "mon_cluster_log_to_syslog_facility",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Syslog facility for cluster log messages",
                  "long_desc": "",
                  "default": "daemon",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_cluster_log_to_syslog"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "mon_cluster_log_to_syslog_level",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Syslog level for cluster log messages",
                  "long_desc": "",
                  "default": "info",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_cluster_log_to_syslog"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "mon_compact_on_bootstrap",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_compact_on_start",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_compact_on_trim",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_config_key_max_entry_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Defines the number of bytes allowed to be held in a single config-key entry",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "65536"
                },
                {
                  "name": "mon_cpu_threads",
                  "type": "int",
                  "level": "advanced",
                  "desc": "worker threads for CPU intensive background work",
                  "long_desc": "",
                  "default": 4,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_crush_min_required_version",
                  "type": "str",
                  "level": "advanced",
                  "desc": "minimum ceph release to use for mon_warn_on_legacy_crush_tunables",
                  "long_desc": "",
                  "default": "firefly",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [
                    "mon_warn_on_legacy_crush_tunables"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "mon_daemon_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "max bytes of outstanding mon messages mon will read off the network",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "419430400"
                },
                {
                  "name": "mon_data",
                  "type": "str",
                  "level": "advanced",
                  "desc": "path to mon database",
                  "long_desc": "",
                  "default": "/var/lib/ceph/mon/$cluster-$id",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update"
                  ]
                },
                {
                  "name": "mon_data_avail_crit",
                  "type": "int",
                  "level": "advanced",
                  "desc": "issue MON_DISK_CRIT health error when mon available space below this percentage",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "value": [
                    {
                      "section": "mon",
                      "value": "1"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "mon_data_avail_warn",
                  "type": "int",
                  "level": "advanced",
                  "desc": "isue MON_DISK_LOW health warning when mon available space below this percentage",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "value": [
                    {
                      "section": "mon",
                      "value": "2"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "mon_data_size_warn",
                  "type": "size",
                  "level": "advanced",
                  "desc": "issue MON_DISK_BIG health warning when mon database is above this size",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "16106127360"
                },
                {
                  "name": "mon_debug_block_osdmap_trim",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Block OSDMap trimming while the option is enabled.",
                  "long_desc": "Blocking OSDMap trimming may be quite helpful to easily reproduce states in which the monitor keeps (hundreds of) thousands of osdmaps.",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_debug_deprecated_as_obsolete",
                  "type": "bool",
                  "level": "dev",
                  "desc": "treat deprecated mon commands as obsolete",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_debug_dump_json",
                  "type": "bool",
                  "level": "dev",
                  "desc": "dump paxos transasctions to log as json",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_debug_dump_transactions"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_debug_dump_location",
                  "type": "str",
                  "level": "dev",
                  "desc": "file to dump paxos transactions to",
                  "long_desc": "",
                  "default": "/var/log/ceph/$cluster-$name.tdump",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_debug_dump_transactions"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "mon_debug_dump_transactions",
                  "type": "bool",
                  "level": "dev",
                  "desc": "dump paxos transactions to log",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_debug_dump_location"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_debug_extra_checks",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Enable some additional monitor checks",
                  "long_desc": "Enable some additional monitor checks that would be too expensive to run on production systems, or would only be relevant while testing or debugging.",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_debug_no_initial_persistent_features",
                  "type": "bool",
                  "level": "dev",
                  "desc": "do not set any monmap features for new mon clusters",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "cluster_create"
                  ]
                },
                {
                  "name": "mon_debug_no_require_bluestore_for_ec_overwrites",
                  "type": "bool",
                  "level": "dev",
                  "desc": "do not require bluestore OSDs to enable EC overwrites on a rados pool",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_debug_no_require_mimic",
                  "type": "bool",
                  "level": "dev",
                  "desc": "do not set mimic feature for new mon clusters",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "cluster_create"
                  ]
                },
                {
                  "name": "mon_debug_no_require_nautilus",
                  "type": "bool",
                  "level": "dev",
                  "desc": "do not set nautilus feature for new mon clusters",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "cluster_create"
                  ]
                },
                {
                  "name": "mon_debug_unsafe_allow_tier_with_nonempty_snaps",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_delta_reset_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "window duration for rate calculations in 'ceph status'",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon",
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_dns_srv_name",
                  "type": "str",
                  "level": "advanced",
                  "desc": "name of DNS SRV record to check for monitor addresses",
                  "long_desc": "",
                  "default": "ceph-mon",
                  "daemon_default": "",
                  "tags": [
                    "network"
                  ],
                  "services": [
                    "common"
                  ],
                  "see_also": [
                    "mon_host"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update"
                  ]
                },
                {
                  "name": "mon_election_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "maximum time for a mon election (seconds)",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_enable_op_tracker",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "enable/disable MON op tracking",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_fake_pool_delete",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "fake pool deletions by renaming the rados pool",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_force_quorum_join",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "force mon to rejoin quorum even though it was just removed",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_force_standby_active",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "allow use of MDS daemons in standby-replay as replacements",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_globalid_prealloc",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of globalid values to preallocate",
                  "long_desc": "This setting caps how many new clients can authenticate with the cluster before the monitors have to perform a write to preallocate more.  Large values burn through the 64-bit ID space more quickly.",
                  "default": 10000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_health_log_update_period",
                  "type": "int",
                  "level": "dev",
                  "desc": "minimum time in seconds between log messages about each health check",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": 0,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_health_max_detail",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "max detailed pgs to report in health detail",
                  "long_desc": "",
                  "default": 50,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_health_to_clog",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "log monitor health to cluster log",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_health_to_clog_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "frequency to log monitor health to cluster log",
                  "long_desc": "",
                  "default": 3600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_health_to_clog"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_health_to_clog_tick_interval",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 60,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_host",
                  "type": "str",
                  "level": "basic",
                  "desc": "list of hosts or addresses to search for a monitor",
                  "long_desc": "This is a comma, whitespace, or semicolon separated list of IP addresses or hostnames. Hostnames are resolved via DNS and all A or AAAA records are included in the search list.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "common"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update"
                  ]
                },
                {
                  "name": "mon_initial_members",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update",
                    "cluster_create"
                  ]
                },
                {
                  "name": "mon_inject_pg_merge_bounce_probability",
                  "type": "float",
                  "level": "dev",
                  "desc": "probability of failing and reverting a pg_num decrement",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_inject_sync_get_chunk_delay",
                  "type": "float",
                  "level": "dev",
                  "desc": "inject delay during sync (seconds)",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_inject_transaction_delay_max",
                  "type": "float",
                  "level": "dev",
                  "desc": "max duration of injected delay in paxos",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_inject_transaction_delay_probability",
                  "type": "float",
                  "level": "dev",
                  "desc": "probability of injecting a delay in paxos",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_keyvaluedb",
                  "type": "str",
                  "level": "advanced",
                  "desc": "database backend to use for the mon database",
                  "long_desc": "",
                  "default": "rocksdb",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "enum_values": [
                    "leveldb",
                    "rocksdb"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ]
                },
                {
                  "name": "mon_lease",
                  "type": "float",
                  "level": "advanced",
                  "desc": "lease interval between quorum monitors (seconds)",
                  "long_desc": "This setting controls how sensitive your mon quorum is to intermittent network issues or other failures.",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_lease_ack_timeout_factor",
                  "type": "float",
                  "level": "advanced",
                  "desc": "multiple of mon_lease for the lease ack interval before calling new election",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_lease"
                  ],
                  "min": 1.0001,
                  "max": 100,
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_lease_renew_interval_factor",
                  "type": "float",
                  "level": "advanced",
                  "desc": "multiple of mon_lease for the lease renewal interval",
                  "long_desc": "Leases must be renewed before they time out.  A smaller value means frequent renewals, while a value close to 1 makes a lease expiration more likely.",
                  "default": 0.6,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_lease"
                  ],
                  "min": 0,
                  "max": 0.9999999,
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_log_max_summary",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of recent cluster log messages to retain",
                  "long_desc": "",
                  "default": 50,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_max_log_entries_per_event",
                  "type": "int",
                  "level": "advanced",
                  "desc": "max cluster log entries per paxos event",
                  "long_desc": "",
                  "default": 4096,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_max_log_epochs",
                  "type": "int",
                  "level": "advanced",
                  "desc": "max number of past cluster log epochs to store",
                  "long_desc": "",
                  "default": 500,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_max_mdsmap_epochs",
                  "type": "int",
                  "level": "advanced",
                  "desc": "max number of FSMaps/MDSMaps to store",
                  "long_desc": "",
                  "default": 500,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_max_mgrmap_epochs",
                  "type": "int",
                  "level": "advanced",
                  "desc": "max number of MgrMaps to store",
                  "long_desc": "",
                  "default": 500,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_max_osd",
                  "type": "int",
                  "level": "advanced",
                  "desc": "max number of OSDs in a cluster",
                  "long_desc": "",
                  "default": 10000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_max_pg_per_osd",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Max number of PGs per OSD the cluster will allow",
                  "long_desc": "If the number of PGs per OSD exceeds this, a health warning will be visible in `ceph status`.  This is also used in automated PG management, as the threshold at which some pools' pg_num may be shrunk in order to enable increasing the pg_num of others.",
                  "default": 250,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": 1,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_max_pool_pg_num",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 65536,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_max_snap_prune_per_epoch",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "max number of pruned snaps we will process in a single OSDMap epoch",
                  "long_desc": "",
                  "default": 100,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_mds_blacklist_interval",
                  "type": "float",
                  "level": "dev",
                  "desc": "Duration in seconds that blacklist entries for MDS daemons remain in the OSD map",
                  "long_desc": "",
                  "default": 86400,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": 3600,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_mds_force_trim_to",
                  "type": "int",
                  "level": "dev",
                  "desc": "force mons to trim mdsmaps/fsmaps through this epoch",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_mds_skip_sanity",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "skip sanity checks on fsmap/mdsmap",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_mgr_beacon_grace",
                  "type": "secs",
                  "level": "advanced",
                  "desc": "Period in seconds from last beacon to monitor marking a manager daemon as failed",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "30"
                },
                {
                  "name": "mon_mgr_digest_period",
                  "type": "int",
                  "level": "dev",
                  "desc": "Period in seconds between monitor-to-manager health/status updates",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_mgr_inactive_grace",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Period in seconds after cluster creation during which cluster may have no active manager",
                  "long_desc": "This grace period enables the cluster to come up cleanly without raising spurious health check failures about managers that aren't online yet",
                  "default": 60,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_mgr_mkfs_grace",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Period in seconds that the cluster may have no active manager before this is reported as an ERR rather than a WARN",
                  "long_desc": "",
                  "default": 120,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_mgr_proxy_client_bytes_ratio",
                  "type": "float",
                  "level": "dev",
                  "desc": "ratio of mon_client_bytes that can be consumed by proxied mgr commands before we error out to client",
                  "long_desc": "",
                  "default": 0.3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_min_osdmap_epochs",
                  "type": "int",
                  "level": "advanced",
                  "desc": "min number of OSDMaps to store",
                  "long_desc": "",
                  "default": 500,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_op_complaint_time",
                  "type": "secs",
                  "level": "advanced",
                  "desc": "time after which to consider a monitor operation blocked after no updates",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "30"
                },
                {
                  "name": "mon_op_history_duration",
                  "type": "secs",
                  "level": "advanced",
                  "desc": "expiration time in seconds of historical MON OPS",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "600"
                },
                {
                  "name": "mon_op_history_size",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "max number of completed ops to track",
                  "long_desc": "",
                  "default": 20,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_op_history_slow_op_size",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "max number of slow historical MON OPS to keep",
                  "long_desc": "",
                  "default": 20,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_op_history_slow_op_threshold",
                  "type": "secs",
                  "level": "advanced",
                  "desc": "duration of an op to be considered as a historical slow op",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "10"
                },
                {
                  "name": "mon_op_log_threshold",
                  "type": "int",
                  "level": "advanced",
                  "desc": "max number of slow ops to display",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_adjust_down_out_interval",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "increase the mon_osd_down_out_interval if an OSD appears to be laggy",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_osd_adjust_heartbeat_grace"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_adjust_heartbeat_grace",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "increase OSD heartbeat grace if peers appear to be laggy",
                  "long_desc": "If an OSD is marked down but then marks itself back up, it implies it wasn't actually down but was unable to respond to heartbeats.  If this option is true, we can use the laggy_probability and laggy_interval values calculated to model this situation to increase the heartbeat grace period for this OSD so that it isn't marked down again.  laggy_probability is an estimated probability that the given OSD is down because it is laggy (not actually down), and laggy_interval is an estiate on how long it stays down when it is laggy.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_osd_laggy_halflife",
                    "mon_osd_laggy_weight",
                    "mon_osd_laggy_max_interval"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_auto_mark_auto_out_in",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "mark any OSD that comes up that was automatically marked 'out' back 'in'",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_osd_down_out_interval"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_auto_mark_in",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "mark any OSD that comes up 'in'",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_auto_mark_new_in",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "mark any new OSD that comes up 'in'",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_backfillfull_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.9,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update",
                    "cluster_create"
                  ]
                },
                {
                  "name": "mon_osd_blacklist_default_expire",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Duration in seconds that blacklist entries for clients remain in the OSD map",
                  "long_desc": "",
                  "default": 3600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_cache_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "maximum number of OSDMaps to cache in memory",
                  "long_desc": "",
                  "default": 500,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_crush_smoke_test",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "perform a smoke test on any new CRUSH map before accepting changes",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_destroyed_out_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "mark any OSD 'out' that has been 'destroy'ed for this long (seconds)",
                  "long_desc": "",
                  "default": 600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_down_out_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "mark any OSD 'out' that has been 'down' for this long (seconds)",
                  "long_desc": "",
                  "default": 600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_down_out_subtree_limit",
                  "type": "str",
                  "level": "advanced",
                  "desc": "do not automatically mark OSDs 'out' if an entire subtree of this size is down",
                  "long_desc": "",
                  "default": "rack",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_osd_down_out_interval"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "mon_osd_err_op_age_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "issue REQUEST_STUCK health error if OSD ops are slower than is age (seconds)",
                  "long_desc": "",
                  "default": 128,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_force_trim_to",
                  "type": "int",
                  "level": "dev",
                  "desc": "force mons to trim osdmaps through this epoch",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_full_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "full ratio of OSDs to be set during initial creation of the cluster",
                  "long_desc": "",
                  "default": 0.95,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update",
                    "cluster_create"
                  ]
                },
                {
                  "name": "mon_osd_initial_require_min_compat_client",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "jewel",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update",
                    "cluster_create"
                  ]
                },
                {
                  "name": "mon_osd_laggy_halflife",
                  "type": "int",
                  "level": "advanced",
                  "desc": "halflife of OSD 'lagginess' factor",
                  "long_desc": "",
                  "default": 3600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_laggy_max_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "cap value for period for OSD to be marked for laggy_interval calculation",
                  "long_desc": "",
                  "default": 300,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_laggy_weight",
                  "type": "float",
                  "level": "advanced",
                  "desc": "how heavily to weight OSD marking itself back up in overall laggy_probability",
                  "long_desc": "1.0 means that an OSD marking itself back up (because it was marked down but not actually dead) means a 100% laggy_probability; 0.0 effectively disables tracking of laggy_probability.",
                  "default": 0.3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": 0,
                  "max": 1,
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_mapping_pgs_per_chunk",
                  "type": "int",
                  "level": "dev",
                  "desc": "granularity of PG placement calculation background work",
                  "long_desc": "",
                  "default": 4096,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_max_creating_pgs",
                  "type": "int",
                  "level": "advanced",
                  "desc": "maximum number of PGs the mon will create at once",
                  "long_desc": "",
                  "default": 1024,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_max_initial_pgs",
                  "type": "int",
                  "level": "advanced",
                  "desc": "maximum number of PGs a pool will created with",
                  "long_desc": "If the user specifies more PGs than this, the cluster will subsequently split PGs after the pool is created in order to reach the target.",
                  "default": 1024,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_min_down_reporters",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of OSDs from different subtrees who need to report a down OSD for it to count",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_osd_reporter_subtree_level"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_min_in_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "do not automatically mark OSDs 'out' if fewer than this many OSDs are 'in'",
                  "long_desc": "",
                  "default": 0.75,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_osd_down_out_interval"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_min_up_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "do not automatically mark OSDs 'out' if fewer than this many OSDs are 'up'",
                  "long_desc": "",
                  "default": 0.3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_osd_down_out_interval"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_nearfull_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "nearfull ratio for OSDs to be set during initial creation of cluster",
                  "long_desc": "",
                  "default": 0.85,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update",
                    "cluster_create"
                  ]
                },
                {
                  "name": "mon_osd_prime_pg_temp",
                  "type": "bool",
                  "level": "dev",
                  "desc": "minimize peering work by priming pg_temp values after a map change",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_prime_pg_temp_max_estimate",
                  "type": "float",
                  "level": "advanced",
                  "desc": "calculate all PG mappings if estimated fraction of PGs that change is above this amount",
                  "long_desc": "",
                  "default": 0.25,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_prime_pg_temp_max_time",
                  "type": "float",
                  "level": "dev",
                  "desc": "maximum time to spend precalculating PG mappings on map change (seconds)",
                  "long_desc": "",
                  "default": 0.5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_report_timeout",
                  "type": "int",
                  "level": "advanced",
                  "desc": "time before OSDs who do not report to the mons are marked down (seconds)",
                  "long_desc": "",
                  "default": 900,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_reporter_subtree_level",
                  "type": "str",
                  "level": "advanced",
                  "desc": "in which level of parent bucket the reporters are counted",
                  "long_desc": "",
                  "default": "host",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "mon",
                      "value": "osd"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "mon_osd_snap_trim_queue_warn_on",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Warn when snap trim queue is that large (or larger).",
                  "long_desc": "Warn when snap trim queue length for at least one PG crosses this value, as this is indicator of snap trimmer not keeping up, wasting disk space",
                  "default": 32768,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osd_warn_op_age",
                  "type": "float",
                  "level": "advanced",
                  "desc": "issue REQUEST_SLOW health warning if OSD ops are slower than this age (seconds)",
                  "long_desc": "",
                  "default": 32,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osdmap_full_prune_enabled",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "enables pruning full osdmap versions when we go over a given number of maps",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_osdmap_full_prune_min",
                    "mon_osdmap_full_prune_interval",
                    "mon_osdmap_full_prune_txsize"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osdmap_full_prune_interval",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "interval between maps that will not be pruned; maps in the middle will be pruned.",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_osdmap_full_prune_enabled",
                    "mon_osdmap_full_prune_interval",
                    "mon_osdmap_full_prune_txsize"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osdmap_full_prune_min",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "minimum number of versions in the store to trigger full map pruning",
                  "long_desc": "",
                  "default": 10000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_osdmap_full_prune_enabled",
                    "mon_osdmap_full_prune_interval",
                    "mon_osdmap_full_prune_txsize"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_osdmap_full_prune_txsize",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of maps we will prune per iteration",
                  "long_desc": "",
                  "default": 100,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_osdmap_full_prune_enabled",
                    "mon_osdmap_full_prune_interval",
                    "mon_osdmap_full_prune_txsize"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_pg_check_down_all_threshold",
                  "type": "float",
                  "level": "advanced",
                  "desc": "threshold of down osds after which we check all pgs",
                  "long_desc": "",
                  "default": 0.5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_pg_stuck_threshold",
                  "type": "int",
                  "level": "advanced",
                  "desc": "number of seconds after which pgs can be considered stuck inactive, unclean, etc",
                  "long_desc": "see doc/control.rst under dump_stuck for more info",
                  "default": 60,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_pg_warn_max_object_skew",
                  "type": "float",
                  "level": "advanced",
                  "desc": "max skew few average in objects per pg",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_pg_warn_min_objects",
                  "type": "int",
                  "level": "advanced",
                  "desc": "do not warn below this object #",
                  "long_desc": "",
                  "default": 10000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_pg_warn_min_per_osd",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "minimal number PGs per (in) osd before we warn the admin",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "value": [
                    {
                      "section": "global",
                      "value": "3"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "mon_pg_warn_min_pool_objects",
                  "type": "int",
                  "level": "advanced",
                  "desc": "do not warn on pools below this object #",
                  "long_desc": "",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_pool_quota_crit_threshold",
                  "type": "int",
                  "level": "advanced",
                  "desc": "percent of quota at which to issue errors",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_pool_quota_warn_threshold",
                  "type": "int",
                  "level": "advanced",
                  "desc": "percent of quota at which to issue warnings",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_probe_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "timeout for querying other mons during bootstrap pre-election phase (seconds)",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_reweight_max_change",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.05,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_reweight_max_osds",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 4,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_reweight_min_bytes_per_osd",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "104857600"
                },
                {
                  "name": "mon_reweight_min_pgs_per_osd",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_rocksdb_options",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "write_buffer_size=33554432,compression=kNoCompression,level_compaction_dynamic_level_bytes=true",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "mon_scrub_inject_crc_mismatch",
                  "type": "float",
                  "level": "dev",
                  "desc": "probability for injecting crc mismatches into mon scrub",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_scrub_inject_missing_keys",
                  "type": "float",
                  "level": "dev",
                  "desc": "probability for injecting missing keys into mon scrub",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_scrub_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "frequency for scrubbing mon database",
                  "long_desc": "",
                  "default": 86400,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_scrub_max_keys",
                  "type": "int",
                  "level": "advanced",
                  "desc": "max keys per on scrub chunk/step",
                  "long_desc": "",
                  "default": 100,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_scrub_timeout",
                  "type": "int",
                  "level": "advanced",
                  "desc": "timeout to restart scrub of mon quorum participant does not respond for the latest chunk",
                  "long_desc": "",
                  "default": 300,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_session_timeout",
                  "type": "int",
                  "level": "advanced",
                  "desc": "close inactive mon client connections after this many seconds",
                  "long_desc": "",
                  "default": 300,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_smart_report_timeout",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Timeout (in seconds) for smarctl to run, default is set to 5",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_stat_smooth_intervals",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of PGMaps stats over which we calc the average read/write throughput of the whole cluster",
                  "long_desc": "",
                  "default": 6,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": 1,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_subscribe_interval",
                  "type": "float",
                  "level": "dev",
                  "desc": "subscribe interval for pre-jewel clients",
                  "long_desc": "",
                  "default": 86400,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_sync_debug",
                  "type": "bool",
                  "level": "dev",
                  "desc": "enable extra debugging during mon sync",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_sync_max_payload_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "target max message payload for mon sync",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1048576"
                },
                {
                  "name": "mon_sync_provider_kill_at",
                  "type": "int",
                  "level": "dev",
                  "desc": "kill mon sync requester at specific point",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_sync_requester_kill_at",
                  "type": "int",
                  "level": "dev",
                  "desc": "kill mon sync requestor at specific point",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_sync_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "timeout before canceling sync if syncing mon does not respond",
                  "long_desc": "",
                  "default": 60,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_target_pg_per_osd",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Automated PG management creates this many PGs per OSD",
                  "long_desc": "When creating pools, the automated PG management logic will attempt to reach this target.  In some circumstances, it may exceed this target, up to the ``mon_max_pg_per_osd`` limit. Conversely, a lower number of PGs per OSD may be created if the cluster is not yet fully utilised",
                  "default": 100,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": 1,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_tick_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "interval for internal mon background checks",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_timecheck_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "frequency of clock synchronization checks between monitors (seconds)",
                  "long_desc": "",
                  "default": 300,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_timecheck_skew_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "frequency of clock synchronization (re)checks between monitors while clocks are believed to be skewed (seconds)",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "mon_timecheck_interval"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_warn_not_deep_scrubbed",
                  "type": "int",
                  "level": "advanced",
                  "desc": "if non-zero, issue PG_NOT_DEEP_SCRUBBED when PG(s) have not been scrubbed for more than this long beyond the configured mon_scrub_interval (seconds)",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "osd_deep_scrub_interval"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_warn_not_scrubbed",
                  "type": "int",
                  "level": "advanced",
                  "desc": "if non-zero, issue PG_NOT_SCRUBBED when PG(s) have not been scrubbed for more than this long beyond the configured mon_scrub_interval (seconds)",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "osd_scrub_min_interval"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_warn_on_cache_pools_without_hit_sets",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "issue CACHE_POOL_NO_HIT_SET health warning for cache pools that do not have hit sets configured",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_warn_on_crush_straw_calc_version_zero",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "issue OLD_CRUSH_STRAW_CALC_VERSION health warning if the CRUSH map's straw_calc_version is zero",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_warn_on_legacy_crush_tunables",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "issue OLD_CRUSH_TUNABLES health warning if CRUSH tunables are older than mon_crush_min_required_version",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [
                    "mon_crush_min_required_version"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_warn_on_misplaced",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Issue a health warning if there are misplaced objects",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_warn_on_osd_down_out_interval_zero",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "issue OSD_NO_DOWN_OUT_INTERVAL health warning if mon_osd_down_out_interval is zero",
                  "long_desc": "Having mon_osd_down_out_interval set to 0 means that down OSDs are not marked out automatically and the cluster does not heal itself without administrator intervention.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [
                    "mon_osd_down_out_interval"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "mon_warn_on_pool_no_app",
                  "type": "bool",
                  "level": "dev",
                  "desc": "issue POOL_APP_NOT_ENABLED health warning if pool has not application enabled",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "monmap",
                  "type": "str",
                  "level": "advanced",
                  "desc": "path to MonMap file",
                  "long_desc": "This option is normally used during mkfs, but can also be used to identify which monitors to connect to.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update",
                    "create"
                  ]
                },
                {
                  "name": "ms_async_affinity_cores",
                  "type": "str",
                  "level": "advanced",
                  "desc": "List of cores to set worker thread affinity",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "ms_async_set_affinity"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "ms_async_max_op_threads",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Maximum threadpool size of AsyncMessenger",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "ms_async_op_threads"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_async_op_threads",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Threadpool size for AsyncMessenger (ms_type=async)",
                  "long_desc": "",
                  "default": 3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": 1,
                  "max": 24,
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_async_rdma_buffer_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "131072"
                },
                {
                  "name": "ms_async_rdma_cm",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_async_rdma_device_name",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "ms_async_rdma_dscp",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 96,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_async_rdma_enable_hugepage",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_async_rdma_local_gid",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "ms_async_rdma_polling_us",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_async_rdma_port_num",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_async_rdma_receive_buffers",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 32768,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_async_rdma_receive_queue_len",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 4096,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_async_rdma_roce_ver",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_async_rdma_send_buffers",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1024,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_async_rdma_sl",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_async_rdma_support_srq",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_async_rdma_type",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "ib",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "ms_async_set_affinity",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Set CPU affinity for AsyncMessenger worker threads",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_bind_before_connect",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Call bind(2) on client sockets",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_bind_ipv4",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Bind servers to IPv4 address(es)",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "ms_bind_ipv6"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_bind_ipv6",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Bind servers to IPv6 address(es)",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "ms_bind_ipv4"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_bind_msgr1",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Bind servers to msgr1 (legacy) protocol address(es)",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "ms_bind_msgr2"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_bind_msgr2",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Bind servers to msgr2 (nautilus+) protocol address(es)",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "ms_bind_msgr1"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_bind_port_max",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Highest port number to bind daemon(s) to",
                  "long_desc": "",
                  "default": 7300,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_bind_port_min",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Lowest port number to bind daemon(s) to",
                  "long_desc": "",
                  "default": 6800,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_bind_prefer_ipv4",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Prefer IPV4 over IPV6 address(es)",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_bind_retry_count",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Number of attempts to make while bind(2)ing to a port",
                  "long_desc": "",
                  "default": 3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_bind_retry_delay",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Delay between bind(2) attempts (seconds)",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_cluster_type",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Messenger implementation to use for the internal cluster network",
                  "long_desc": "If not specified, use ms_type",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "ms_type"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "ms_crc_data",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Set and/or verify crc32c checksum on data payload sent over network",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_crc_header",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Set and/or verify crc32c checksum on header payload sent over network",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_die_on_bad_msg",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Induce a daemon crash/exit when a bad network message is received",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_die_on_old_message",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Induce a daemon crash/exit when a old, undecodable message is received",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_die_on_skipped_message",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Induce a daemon crash/exit if sender skips a message sequence number",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_die_on_unhandled_msg",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Induce a daemon crash/exit when an unrecognized message is received",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_dispatch_throttle_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Limit messages that are read off the network but still being processed",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "104857600"
                },
                {
                  "name": "ms_dpdk_coremask",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "0xF",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "ms_async_op_threads"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "ms_dpdk_debug_allow_loopback",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_dpdk_gateway_ipv4_addr",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "ms_dpdk_host_ipv4_addr",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "ms_dpdk_hugepages",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "ms_dpdk_hw_flow_control",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_dpdk_hw_queue_weight",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_dpdk_lro",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_dpdk_memory_channel",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "4",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "ms_dpdk_netmask_ipv4_addr",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "ms_dpdk_pmd",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "ms_dpdk_port_id",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_dpdk_rx_buffer_count_per_core",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 8192,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_dump_corrupt_message_level",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Log level at which to hexdump corrupt messages we receive",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_dump_on_send",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Hexdump message to debug log on message send",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_initial_backoff",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Initial backoff after a network error is detected (seconds)",
                  "long_desc": "",
                  "default": 0.2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_inject_delay_max",
                  "type": "float",
                  "level": "dev",
                  "desc": "Max delay to inject",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_inject_delay_msg_type",
                  "type": "str",
                  "level": "dev",
                  "desc": "Message type to inject delays for",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "ms_inject_delay_probability",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_inject_delay_type",
                  "type": "str",
                  "level": "dev",
                  "desc": "Entity type to inject delays for",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "ms_inject_internal_delays",
                  "type": "float",
                  "level": "dev",
                  "desc": "Inject various internal delays to induce races (seconds)",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_inject_socket_failures",
                  "type": "uint",
                  "level": "dev",
                  "desc": "Inject a socket failure every Nth socket operation",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_max_accept_failures",
                  "type": "int",
                  "level": "advanced",
                  "desc": "The maximum number of consecutive failed accept() calls before considering the daemon is misconfigured and abort it.",
                  "long_desc": "",
                  "default": 4,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_max_backoff",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Maximum backoff after a network error before retrying (seconds)",
                  "long_desc": "",
                  "default": 15,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "ms_initial_backoff"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_pq_max_tokens_per_priority",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 16777216,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_pq_min_cost",
                  "type": "size",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "65536"
                },
                {
                  "name": "ms_public_type",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Messenger implementation to use for the public network",
                  "long_desc": "If not specified, use ms_type",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "ms_type"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "ms_rwthread_stack_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Size of stack for SimpleMessenger read/write threads",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1048576"
                },
                {
                  "name": "ms_tcp_listen_backlog",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Size of queue of incoming connections for accept(2)",
                  "long_desc": "",
                  "default": 512,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_tcp_nodelay",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Disable Nagle's algorithm and send queued network traffic immediately",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_tcp_prefetch_max_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Maximum amount of data to prefetch out of the socket receive buffer",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "4096"
                },
                {
                  "name": "ms_tcp_rcvbuf",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Size of TCP socket receive buffer",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "0"
                },
                {
                  "name": "ms_tcp_read_timeout",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Time before an idle TCP connection is closed (seconds)",
                  "long_desc": "",
                  "default": 900,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "ms_type",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Messenger implementation to use for network communication",
                  "long_desc": "",
                  "default": "async+posix",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "nss_db_path",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "objecter_completion_locks_per_session",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 32,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "objecter_debug_inject_relock_delay",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "objecter_inflight_op_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Max in-flight data in bytes (both directions)",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "104857600"
                },
                {
                  "name": "objecter_inflight_ops",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Max in-flight operations",
                  "long_desc": "",
                  "default": 1024,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "objecter_inject_no_watch_ping",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "objecter_retry_writes_after_first_reply",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "objecter_tick_interval",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "objecter_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Seconds before in-flight op is considered 'laggy' and we query mon for the latest OSDMap",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "objectstore_blackhole",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_agent_delay_time",
                  "type": "float",
                  "level": "advanced",
                  "desc": "how long agent should sleep if it has no work to do",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_agent_hist_halflife",
                  "type": "int",
                  "level": "advanced",
                  "desc": "halflife of agent atime and temp histograms",
                  "long_desc": "",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_agent_max_low_ops",
                  "type": "int",
                  "level": "advanced",
                  "desc": "maximum concurrent low-priority tiering operations for tiering agent",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_agent_max_ops",
                  "type": "int",
                  "level": "advanced",
                  "desc": "maximum concurrent tiering operations for tiering agent",
                  "long_desc": "",
                  "default": 4,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_agent_min_evict_effort",
                  "type": "float",
                  "level": "advanced",
                  "desc": "minimum effort to expend evicting clean objects",
                  "long_desc": "",
                  "default": 0.1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": 0,
                  "max": 0.99,
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_agent_quantize_effort",
                  "type": "float",
                  "level": "advanced",
                  "desc": "size of quantize unit for eviction effort",
                  "long_desc": "",
                  "default": 0.1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_agent_slop",
                  "type": "float",
                  "level": "advanced",
                  "desc": "slop factor to avoid switching tiering flush and eviction mode",
                  "long_desc": "",
                  "default": 0.02,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_allow_recovery_below_min_size",
                  "type": "bool",
                  "level": "dev",
                  "desc": "allow replicated pools to recover with < min_size active members",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "osd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_async_recovery_min_cost",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "A mixture measure of number of current log entries difference and historical missing objects,  above which we switch to use asynchronous recovery when appropriate",
                  "long_desc": "",
                  "default": 100,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_auto_mark_unfound_lost",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_backfill_retry_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "how frequently to retry backfill reservations after being denied (e.g., due to a full OSD)",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_backfill_scan_max",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 512,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_backfill_scan_min",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 64,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_backoff_on_degraded",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_backoff_on_peering",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_backoff_on_unfound",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_beacon_report_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 300,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_bench_duration",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_bench_large_size_max_throughput",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "104857600"
                },
                {
                  "name": "osd_bench_max_block_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "67108864"
                },
                {
                  "name": "osd_bench_small_size_max_iops",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 100,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_blkin_trace_all",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_check_for_log_corruption",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_check_max_object_name_len_on_startup",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_class_default_list",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "cephfs hello journal lock log numops otp rbd refcount rgw timeindex user version cas",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "osd_class_dir",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "/usr/local/lib64/rados-classes",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "osd_class_load_list",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "cephfs hello journal lock log numops otp rbd refcount rgw timeindex user version cas",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "osd_class_update_on_start",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "set OSD device class on startup",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_client_message_cap",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum number of in-flight client requests",
                  "long_desc": "",
                  "default": 100,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_client_message_size_cap",
                  "type": "size",
                  "level": "advanced",
                  "desc": "maximum memory to devote to in-flight client requests",
                  "long_desc": "If this value is exceeded, the OSD will not read any new client data off of the network until memory is freed.",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "524288000"
                },
                {
                  "name": "osd_client_op_priority",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 63,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_client_watch_timeout",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mds_client"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_command_max_records",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 256,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_command_thread_suicide_timeout",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 900,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_command_thread_timeout",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_copyfrom_max_chunk",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "8388608",
                  "value": [
                    {
                      "section": "osd",
                      "value": "524288"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "osd_crush_chooseleaf_type",
                  "type": "int",
                  "level": "dev",
                  "desc": "default chooseleaf type for osdmaptool --create",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ]
                },
                {
                  "name": "osd_crush_initial_weight",
                  "type": "float",
                  "level": "advanced",
                  "desc": "if >= 0, initial CRUSH weight for newly created OSDs",
                  "long_desc": "If this value is negative, the size of the OSD in TiB is used.",
                  "default": -1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_crush_update_on_start",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "update OSD CRUSH location on startup",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_crush_update_weight_set",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "update CRUSH weight-set weights when updating weights",
                  "long_desc": "If this setting is true, we will update the weight-set weights when adjusting an item's weight, effectively making changes take effect immediately, and discarding any previous optimization in the weight-set value.  Setting this value to false will leave it to the balancer to (slowly, presumably) adjust weights to approach the new target value.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_data",
                  "type": "str",
                  "level": "advanced",
                  "desc": "path to OSD data",
                  "long_desc": "",
                  "default": "/var/lib/ceph/osd/$cluster-$id",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update"
                  ]
                },
                {
                  "name": "osd_debug_crash_on_ignored_backoff",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_debug_deep_scrub_sleep",
                  "type": "float",
                  "level": "dev",
                  "desc": "Inject an expensive sleep during deep scrub IO to make it easier to induce preemption",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_debug_drop_ping_duration",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_debug_drop_ping_probability",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_debug_inject_copyfrom_error",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_debug_inject_dispatch_delay_duration",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_debug_inject_dispatch_delay_probability",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_debug_misdirected_ops",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "value": [
                    {
                      "section": "osd",
                      "value": "true"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "osd_debug_op_order",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "value": [
                    {
                      "section": "osd",
                      "value": "true"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "osd_debug_pg_log_writeout",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_debug_random_push_read_error",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_debug_reject_backfill_probability",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_debug_shutdown",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Turn up debug levels during shutdown",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_debug_skip_full_check_in_backfill_reservation",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_debug_skip_full_check_in_recovery",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_debug_verify_cached_snaps",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_debug_verify_missing_on_start",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_debug_verify_snaps",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_debug_verify_stray_on_activate",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_deep_scrub_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Deep scrub each PG (i.e., verify data checksums) at least this often",
                  "long_desc": "",
                  "default": 604800,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_deep_scrub_keys",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Number of keys to read from an object at a time during deep scrub",
                  "long_desc": "",
                  "default": 1024,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_deep_scrub_large_omap_object_key_threshold",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Warn when we encounter an object with more omap keys than this",
                  "long_desc": "",
                  "default": 2000000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "osd"
                  ],
                  "see_also": [
                    "osd_deep_scrub_large_omap_object_value_sum_threshold"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_deep_scrub_large_omap_object_value_sum_threshold",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Warn when we encounter an object with more omap key bytes than this",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "osd"
                  ],
                  "see_also": [
                    "osd_deep_scrub_large_omap_object_key_threshold"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1073741824"
                },
                {
                  "name": "osd_deep_scrub_randomize_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Ratio of deep scrub interval to randomly vary",
                  "long_desc": "This prevents a deep scrub 'stampede' by randomly varying the scrub intervals so that they are soon uniformly distributed over the week",
                  "default": 0.15,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_deep_scrub_interval"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_deep_scrub_stride",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Number of bytes to read from an object at a time during deep scrub",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "524288"
                },
                {
                  "name": "osd_deep_scrub_update_digest_min_age",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Update overall object digest only if object was last modified longer ago than this",
                  "long_desc": "",
                  "default": 7200,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_default_data_pool_replay_window",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 45,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_default_notify_timeout",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_delete_sleep",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Time in seconds to sleep before next removal transaction (overrides values below)",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_delete_sleep_hdd",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Time in seconds to sleep before next removal transaction for HDDs",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_delete_sleep_hybrid",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Time in seconds to sleep before next removal transaction when data is on HDD and journal is on SSD",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_delete_sleep_ssd",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Time in seconds to sleep before next removal transaction for SSDs",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_discard_disconnected_ops",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_enable_op_tracker",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_erasure_code_plugins",
                  "type": "str",
                  "level": "advanced",
                  "desc": "erasure code plugins to load",
                  "long_desc": "",
                  "default": "jerasure lrc isa",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon",
                    "osd"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "startup"
                  ]
                },
                {
                  "name": "osd_failsafe_full_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.97,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_fast_fail_on_connection_refused",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_fast_info",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_find_best_info_ignore_history_les",
                  "type": "bool",
                  "level": "dev",
                  "desc": "ignore last_epoch_started value when peering AND PROBABLY LOSE DATA",
                  "long_desc": "THIS IS AN EXTREMELY DANGEROUS OPTION THAT SHOULD ONLY BE USED AT THE DIRECTION OF A DEVELOPER.  It makes peering ignore the last_epoch_started value when peering, which can allow the OSD to believe an OSD has an authoritative view of a PG's contents even when it is in fact old and stale, typically leading to data loss (by believing a stale PG is up to date).",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_force_auth_primary_missing_objects",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Approximate missing objects above which to force auth_log_shard to be primary temporarily",
                  "long_desc": "",
                  "default": 100,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_force_recovery_pg_log_entries_factor",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1.3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_function_tracing",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_heartbeat_grace",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 20,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_heartbeat_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Interval (in seconds) between peer pings",
                  "long_desc": "",
                  "default": 6,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": 1,
                  "max": 86400,
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_heartbeat_min_healthy_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.33,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_heartbeat_min_peers",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_heartbeat_min_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Minimum heartbeat packet size in bytes. Will add dummy payload if heartbeat packet is smaller than this.",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "2000"
                },
                {
                  "name": "osd_heartbeat_use_min_delay_socket",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_hit_set_max_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 100000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_hit_set_min_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_hit_set_namespace",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": ".ceph-internal",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "osd_ignore_stale_divergent_priors",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_inject_bad_map_crc_probability",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_inject_failure_on_pg_removal",
                  "type": "bool",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_journal",
                  "type": "str",
                  "level": "advanced",
                  "desc": "path to OSD journal (when FileStore backend is in use)",
                  "long_desc": "",
                  "default": "/var/lib/ceph/osd/$cluster-$id/journal",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update"
                  ]
                },
                {
                  "name": "osd_journal_flush_on_shutdown",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "flush FileStore journal contents during clean OSD shutdown",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_journal_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "size of FileStore journal (in MiB)",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ],
                  "default": "5120"
                },
                {
                  "name": "osd_kill_backfill_at",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_loop_before_reset_tphandle",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 64,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_map_cache_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 50,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_map_dedup",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_map_message_max",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 40,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_map_share_max_epochs",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 40,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_attr_name_len",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 100,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_attr_size",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_backfills",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum number of concurrent backfills per OSD",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_markdown_count",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_markdown_period",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_object_name_len",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 2048,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_object_namespace_len",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 256,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_object_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "134217728"
                },
                {
                  "name": "osd_max_omap_bytes_per_request",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1073741824"
                },
                {
                  "name": "osd_max_omap_entries_per_request",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 131072,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_pg_blocked_by",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 16,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_pg_log_entries",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum number of entries to maintain in the PG log when degraded before we trim",
                  "long_desc": "",
                  "default": 3000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "osd"
                  ],
                  "see_also": [
                    "osd_min_pg_log_entries",
                    "osd_pg_log_dups_tracked"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_pg_per_osd_hard_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Maximum number of PG per OSD, a factor of 'mon_max_pg_per_osd'",
                  "long_desc": "OSD will refuse to instantiate PG if the number of PG it serves exceeds this number.",
                  "default": 3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "mon_max_pg_per_osd"
                  ],
                  "min": 1,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_pgls",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum number of results when listing objects in a pool",
                  "long_desc": "",
                  "default": 1024,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_push_cost",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "8388608"
                },
                {
                  "name": "osd_max_push_objects",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_scrubs",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Maximum concurrent scrubs on a single OSD",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_snap_prune_intervals_per_epoch",
                  "type": "uint",
                  "level": "dev",
                  "desc": "Max number of snap intervals to report to mgr in pg_stat_t",
                  "long_desc": "",
                  "default": 512,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_trimming_pgs",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_max_write_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Maximum size of a RADOS write operation in megabytes",
                  "long_desc": "This setting prevents clients from doing very large writes to RADOS.  If you set this to a value below what clients expect, they will receive an error when attempting to write to the cluster.",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "90",
                  "min": "4"
                },
                {
                  "name": "osd_memory_base",
                  "type": "uint",
                  "level": "dev",
                  "desc": "When tcmalloc and cache autotuning is enabled, estimate the minimum amount of memory in bytes the OSD will need.",
                  "long_desc": "",
                  "default": 805306368,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "bluestore_cache_autotune"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_memory_cache_min",
                  "type": "uint",
                  "level": "dev",
                  "desc": "When tcmalloc and cache autotuning is enabled, set the minimum amount of memory used for caches.",
                  "long_desc": "",
                  "default": 134217728,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "bluestore_cache_autotune"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_memory_cache_resize_interval",
                  "type": "float",
                  "level": "dev",
                  "desc": "When tcmalloc and cache autotuning is enabled, wait this many seconds between resizing caches.",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "bluestore_cache_autotune"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_memory_expected_fragmentation",
                  "type": "float",
                  "level": "dev",
                  "desc": "When tcmalloc and cache autotuning is enabled, estimate the percent of memory fragmentation.",
                  "long_desc": "",
                  "default": 0.15,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "bluestore_cache_autotune"
                  ],
                  "min": 0,
                  "max": 1,
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_memory_target",
                  "type": "uint",
                  "level": "basic",
                  "desc": "When tcmalloc and cache autotuning is enabled, try to keep this many bytes mapped in memory.",
                  "long_desc": "",
                  "default": 4294967296,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "bluestore_cache_autotune"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_min_pg_log_entries",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "minimum number of entries to maintain in the PG log",
                  "long_desc": "",
                  "default": 3000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "osd"
                  ],
                  "see_also": [
                    "osd_max_pg_log_entries",
                    "osd_pg_log_dups_tracked"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_min_recovery_priority",
                  "type": "int",
                  "level": "advanced",
                  "desc": "minimum priority below which recovery is not performed",
                  "long_desc": "The purpose here is to prevent the cluster from doing *any* lower priority work (e.g., rebalancing) below this threshold and focus solely on higher priority work (e.g., replicating degraded objects).",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_mon_ack_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_mon_heartbeat_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_mon_report_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Frequency of OSD reports to mon for peer failures, fullness status changes",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_mon_report_max_in_flight",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_mon_shutdown_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_num_op_tracker_shard",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 32,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_objecter_finishers",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "startup"
                  ]
                },
                {
                  "name": "osd_objectstore",
                  "type": "str",
                  "level": "advanced",
                  "desc": "backend type for an OSD (like filestore or bluestore)",
                  "long_desc": "",
                  "default": "filestore",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [
                    "bluestore",
                    "filestore",
                    "memstore",
                    "kstore"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ]
                },
                {
                  "name": "osd_objectstore_fuse",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_objectstore_tracing",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_complaint_time",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_history_duration",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_history_size",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 20,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_history_slow_op_size",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 20,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_history_slow_op_threshold",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_log_threshold",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_num_shards",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "startup"
                  ]
                },
                {
                  "name": "osd_op_num_shards_hdd",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "startup"
                  ]
                },
                {
                  "name": "osd_op_num_shards_ssd",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 8,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "startup"
                  ]
                },
                {
                  "name": "osd_op_num_threads_per_shard",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "startup"
                  ]
                },
                {
                  "name": "osd_op_num_threads_per_shard_hdd",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "startup"
                  ]
                },
                {
                  "name": "osd_op_num_threads_per_shard_ssd",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "startup"
                  ]
                },
                {
                  "name": "osd_op_pq_max_tokens_per_priority",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 4194304,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_pq_min_cost",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "65536"
                },
                {
                  "name": "osd_op_queue",
                  "type": "str",
                  "level": "advanced",
                  "desc": "which operation queue algorithm to use",
                  "long_desc": "which operation queue algorithm to use; mclock_opclass and mclock_client are currently experimental",
                  "default": "wpq",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue_cut_off"
                  ],
                  "enum_values": [
                    "wpq",
                    "prioritized",
                    "mclock_opclass",
                    "mclock_client",
                    "debug_random"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "startup"
                  ]
                },
                {
                  "name": "osd_op_queue_cut_off",
                  "type": "str",
                  "level": "advanced",
                  "desc": "the threshold between high priority ops and low priority ops",
                  "long_desc": "the threshold between high priority ops that use strict priority ordering and low priority ops that use a fairness algorithm that may or may not incorporate priority",
                  "default": "low",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue"
                  ],
                  "enum_values": [
                    "low",
                    "high",
                    "debug_random"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_anticipation_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock anticipation timeout in seconds",
                  "long_desc": "the amount of time that mclock waits until the unused resource is forfeited",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_scrub_lim"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_client_op_lim",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock limit of client operator requests",
                  "long_desc": "mclock limit of client operator requests when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the limit",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_scrub_lim",
                    "osd_op_queue_mclock_anticipation_timeout"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_client_op_res",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock reservation of client operator requests",
                  "long_desc": "mclock reservation of client operator requests when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the reservation",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_scrub_lim",
                    "osd_op_queue_mclock_anticipation_timeout"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_client_op_wgt",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock weight of client operator requests",
                  "long_desc": "mclock weight of client operator requests when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the weight",
                  "default": 500,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_scrub_lim",
                    "osd_op_queue_mclock_anticipation_timeout"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_osd_rep_op_lim",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock limit of osd replication operation requests and replies",
                  "long_desc": "mclock limit of osd sub-operation requests when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the limit",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_scrub_lim",
                    "osd_op_queue_mclock_anticipation_timeout"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_osd_rep_op_res",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock reservation of osd replication operation requests and replies",
                  "long_desc": "mclock reservation of replication operation requests and replies when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the reservation",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_scrub_lim",
                    "osd_op_queue_mclock_anticipation_timeout"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_osd_rep_op_wgt",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock weight of osd replication operation requests and replies",
                  "long_desc": "mclock weight of osd replication operation requests and replies when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the weight",
                  "default": 500,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_scrub_lim",
                    "osd_op_queue_mclock_anticipation_timeout"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_peering_event_lim",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock weight of limit peering events",
                  "long_desc": "mclock weight of limit requests when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the limit",
                  "default": 0.001,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_wgt"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_peering_event_res",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock reservation of peering events",
                  "long_desc": "mclock reservation of scrub requests when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the reservation",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_scrub_lim"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_peering_event_wgt",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock weight of peering events",
                  "long_desc": "mclock weight of scrub requests when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the weight",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_lim"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_pg_delete_lim",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock weight of pg delete work limit requests",
                  "long_desc": "mclock weight of limit pg delete work when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the limit",
                  "default": 0.001,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_wgt"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_pg_delete_res",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock reservation of pg delete work",
                  "long_desc": "mclock reservation of pg delete work when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the reservation",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_scrub_lim"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_pg_delete_wgt",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock weight of pg delete work",
                  "long_desc": "mclock weight of pg delete work when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the weight",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_lim"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_recov_lim",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock limit of recovery requests",
                  "long_desc": "mclock limit of recovery requests when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the limit",
                  "default": 0.001,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_scrub_lim",
                    "osd_op_queue_mclock_anticipation_timeout"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_recov_res",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock reservation of recovery requests",
                  "long_desc": "mclock reservation of recovery requests when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the reservation",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_scrub_lim",
                    "osd_op_queue_mclock_anticipation_timeout"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_recov_wgt",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock weight of recovery requests",
                  "long_desc": "mclock weight of recovery requests when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the weight",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_scrub_lim",
                    "osd_op_queue_mclock_anticipation_timeout"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_scrub_lim",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock weight of limit requests",
                  "long_desc": "mclock weight of limit requests when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the limit",
                  "default": 0.001,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_anticipation_timeout"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_scrub_res",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock reservation of scrub requests",
                  "long_desc": "mclock reservation of scrub requests when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the reservation",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_scrub_lim",
                    "osd_op_queue_mclock_anticipation_timeout"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_scrub_wgt",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock weight of scrub requests",
                  "long_desc": "mclock weight of scrub requests when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the weight",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_lim",
                    "osd_op_queue_mclock_anticipation_timeout"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_snap_lim",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock limit of snaptrim requests",
                  "long_desc": "mclock limit of snaptrim requests when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the limit",
                  "default": 0.001,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_scrub_lim",
                    "osd_op_queue_mclock_anticipation_timeout"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_snap_res",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock reservation of snaptrim requests",
                  "long_desc": "mclock reservation of snaptrim requests when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the reservation",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_wgt",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_scrub_lim",
                    "osd_op_queue_mclock_anticipation_timeout"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_queue_mclock_snap_wgt",
                  "type": "float",
                  "level": "advanced",
                  "desc": "mclock weight of snaptrim requests",
                  "long_desc": "mclock weight of snaptrim requests when osd_op_queue is either 'mclock_opclass' or 'mclock_client'; higher values increase the weight",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_op_queue",
                    "osd_op_queue_mclock_client_op_res",
                    "osd_op_queue_mclock_client_op_wgt",
                    "osd_op_queue_mclock_client_op_lim",
                    "osd_op_queue_mclock_osd_rep_op_res",
                    "osd_op_queue_mclock_osd_rep_op_wgt",
                    "osd_op_queue_mclock_osd_rep_op_lim",
                    "osd_op_queue_mclock_snap_res",
                    "osd_op_queue_mclock_snap_lim",
                    "osd_op_queue_mclock_recov_res",
                    "osd_op_queue_mclock_recov_wgt",
                    "osd_op_queue_mclock_recov_lim",
                    "osd_op_queue_mclock_scrub_res",
                    "osd_op_queue_mclock_scrub_wgt",
                    "osd_op_queue_mclock_scrub_lim",
                    "osd_op_queue_mclock_anticipation_timeout"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_thread_suicide_timeout",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 150,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_op_thread_timeout",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 15,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_open_classes_on_start",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_os_flags",
                  "type": "uint",
                  "level": "dev",
                  "desc": "flags to skip filestore omap or journal initialization",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_peering_op_priority",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 255,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pg_delete_cost",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1048576"
                },
                {
                  "name": "osd_pg_delete_priority",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pg_epoch_max_lag_factor",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Max multiple of the map cache that PGs can lag before we throttle map injest",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_map_cache_size"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pg_epoch_persisted_max_stale",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 40,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pg_log_dups_tracked",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "how many versions back to track in order to detect duplicate ops; this is combined with both the regular pg log entries and additional minimal dup detection entries",
                  "long_desc": "",
                  "default": 3000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "osd"
                  ],
                  "see_also": [
                    "osd_min_pg_log_entries",
                    "osd_max_pg_log_entries"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pg_log_trim_max",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum number of entries to remove at once from the PG log",
                  "long_desc": "",
                  "default": 10000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "osd"
                  ],
                  "see_also": [
                    "osd_min_pg_log_entries",
                    "osd_max_pg_log_entries"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pg_log_trim_min",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 100,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pg_max_concurrent_snap_trims",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pg_object_context_cache_count",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 64,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pg_stat_report_interval_max",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 500,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pool_default_cache_max_evict_check_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pool_default_cache_min_evict_age",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pool_default_cache_min_flush_age",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pool_default_cache_target_dirty_high_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.6,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pool_default_cache_target_dirty_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.4,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pool_default_cache_target_full_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.8,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pool_default_crush_rule",
                  "type": "int",
                  "level": "advanced",
                  "desc": "CRUSH rule for newly created pools",
                  "long_desc": "",
                  "default": -1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pool_default_ec_fast_read",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "set ec_fast_read for new erasure-coded pools",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pool_default_erasure_code_profile",
                  "type": "str",
                  "level": "advanced",
                  "desc": "default erasure code profile for new erasure-coded pools",
                  "long_desc": "",
                  "default": "plugin=jerasure technique=reed_sol_van k=2 m=1",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "osd_pool_default_flag_hashpspool",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "set hashpspool (better hashing scheme) flag on new pools",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pool_default_flag_nodelete",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "set nodelete flag on new pools",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pool_default_flag_nopgchange",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "set nopgchange flag on new pools",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pool_default_flag_nosizechange",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "set nosizechange flag on new pools",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pool_default_flags",
                  "type": "int",
                  "level": "dev",
                  "desc": "(integer) flags to set on new pools",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pool_default_hit_set_bloom_fpp",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.05,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "osd_tier_default_cache_hit_set_type"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_pool_default_min_size",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "the minimal number of copies allowed to write to a degraded pool for new replicated pools",
                  "long_desc": "0 means no specific default; ceph will use size-size/2",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "osd_pool_default_size"
                  ],
                  "min": 0,
                  "max": 255,
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "global",
                      "value": "1"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "osd_pool_default_pg_autoscale_mode",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Default PG autoscaling behavior for new pools",
                  "long_desc": "",
                  "default": "warn",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [
                    "off",
                    "warn",
                    "on"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "osd_pool_default_pg_num",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of PGs for new pools",
                  "long_desc": "",
                  "default": 8,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "osd_pool_default_pgp_num",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of PGs for placement purposes (0 to match pg_num)",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [
                    "osd_pool_default_pg_num"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "osd_pool_default_size",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "the number of copies of an object for new replicated pools",
                  "long_desc": "",
                  "default": 3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": 0,
                  "max": 10,
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ],
                  "value": [
                    {
                      "section": "global",
                      "value": "3"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "osd_pool_default_type",
                  "type": "str",
                  "level": "advanced",
                  "desc": "default type of pool to create",
                  "long_desc": "",
                  "default": "replicated",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "enum_values": [
                    "replicated",
                    "erasure"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "osd_pool_erasure_code_stripe_unit",
                  "type": "size",
                  "level": "advanced",
                  "desc": "the amount of data (in bytes) in a data chunk, per stripe",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "4096"
                },
                {
                  "name": "osd_pool_use_gmt_hitset",
                  "type": "bool",
                  "level": "dev",
                  "desc": "use UTC for hitset timestamps",
                  "long_desc": "This setting only exists for compatibility with hammer (and older) clusters.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_push_per_object_cost",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1000"
                },
                {
                  "name": "osd_read_ec_check_for_errors",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_recover_clone_overlap",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_recover_clone_overlap_limit",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_recovery_cost",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "20971520"
                },
                {
                  "name": "osd_recovery_delay_start",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_recovery_max_active",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_recovery_max_chunk",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "8388608"
                },
                {
                  "name": "osd_recovery_max_omap_entries_per_chunk",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 8096,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_recovery_max_single_start",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_recovery_op_priority",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_recovery_op_warn_multiple",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 16,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_recovery_priority",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_recovery_retry_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "how frequently to retry recovery reservations after being denied (e.g., due to a full OSD)",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_recovery_sleep",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Time in seconds to sleep before next recovery or backfill op",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_recovery_sleep_hdd",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Time in seconds to sleep before next recovery or backfill op for HDDs",
                  "long_desc": "",
                  "default": 0.1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_recovery_sleep_hybrid",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Time in seconds to sleep before next recovery or backfill op when data is on HDD and journal is on SSD",
                  "long_desc": "",
                  "default": 0.025,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_recovery_sleep_ssd",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Time in seconds to sleep before next recovery or backfill op for SSDs",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_requested_scrub_priority",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 120,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_rollback_to_cluster_snap",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "osd_scrub_auto_repair",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Automatically repair damaged objects detected during scrub",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_scrub_auto_repair_num_errors",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Maximum number of detected errors to automatically repair",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_scrub_auto_repair"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_scrub_backoff_ratio",
                  "type": "float",
                  "level": "dev",
                  "desc": "Backoff ratio after a failed scrub scheduling attempt",
                  "long_desc": "",
                  "default": 0.66,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_scrub_begin_hour",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Restrict scrubbing to this hour of the day or later",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_scrub_end_hour"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_scrub_begin_week_day",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Restrict scrubbing to this day of the week or later",
                  "long_desc": "0 or 7 = Sunday, 1 = Monday, etc.",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_scrub_end_week_day"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_scrub_chunk_max",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Maximum number of objects to scrub in a single chunk",
                  "long_desc": "",
                  "default": 25,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_scrub_chunk_min"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_scrub_chunk_min",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Minimum number of objects to scrub in a single chunk",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_scrub_chunk_max"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_scrub_cost",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Cost for scrub operations in work queue",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "52428800"
                },
                {
                  "name": "osd_scrub_during_recovery",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Allow scrubbing when PGs on the OSD are undergoing recovery",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_scrub_end_hour",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Restrict scrubbing to hours of the day earlier than this",
                  "long_desc": "",
                  "default": 24,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_scrub_begin_hour"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_scrub_end_week_day",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Restrict scrubbing to days of the week earlier than this",
                  "long_desc": "0 or 7 = Sunday, 1 = Monday, etc.",
                  "default": 7,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_scrub_begin_week_day"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_scrub_interval_randomize_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Ratio of scrub interval to randomly vary",
                  "long_desc": "This prevents a scrub 'stampede' by randomly varying the scrub intervals so that they are soon uniformly distributed over the week",
                  "default": 0.5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_scrub_min_interval"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_scrub_invalid_stats",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_scrub_load_threshold",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Allow scrubbing when system load divided by number of CPUs is below this value",
                  "long_desc": "",
                  "default": 0.5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "value": [
                    {
                      "section": "osd",
                      "value": "2000.000000"
                    }
                  ],
                  "source": "mon"
                },
                {
                  "name": "osd_scrub_max_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Scrub each PG no less often than this interval",
                  "long_desc": "",
                  "default": 604800,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_scrub_min_interval"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_scrub_max_preemptions",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Set the maximum number of times we will preempt a deep scrub due to a client operation before blocking client IO to complete the scrub",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_scrub_min_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Scrub each PG no more often than this interval",
                  "long_desc": "",
                  "default": 86400,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [
                    "osd_scrub_max_interval"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_scrub_priority",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Priority for scrub operations in work queue",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_scrub_sleep",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Duration to inject a delay during scrubbing",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_shutdown_pgref_assert",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_skip_data_digest",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Do not store full-object checksums if the backend (bluestore) does its own checksums.  Only usable with all BlueStore OSDs.",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_smart_report_timeout",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Timeout (in seconds) for smarctl to run, default is set to 5",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_snap_trim_cost",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1048576"
                },
                {
                  "name": "osd_snap_trim_priority",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_snap_trim_sleep",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_stats_ack_timeout_decay",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.9,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_stats_ack_timeout_factor",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_target_transaction_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_tier_default_cache_hit_set_count",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 4,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_tier_default_cache_hit_set_grade_decay_rate",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 20,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_tier_default_cache_hit_set_period",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1200,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_tier_default_cache_hit_set_search_last_n",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_tier_default_cache_hit_set_type",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "bloom",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [
                    "bloom",
                    "explicit_hash",
                    "explicit_object"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "osd_tier_default_cache_min_read_recency_for_promote",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of recent HitSets the object must appear in to be promoted (on read)",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_tier_default_cache_min_write_recency_for_promote",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of recent HitSets the object must appear in to be promoted (on write)",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_tier_default_cache_mode",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "writeback",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [
                    "none",
                    "writeback",
                    "forward",
                    "readonly",
                    "readforward",
                    "readproxy",
                    "proxy"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "osd_tier_promote_max_bytes_sec",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "5242880"
                },
                {
                  "name": "osd_tier_promote_max_objects_sec",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 25,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_tracing",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_use_stale_snap",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osd_uuid",
                  "type": "uuid",
                  "level": "advanced",
                  "desc": "uuid label for a new OSD",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "create"
                  ],
                  "default": "00000000-0000-0000-0000-000000000000"
                },
                {
                  "name": "osd_verify_sparse_read_holes",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "osdc_blkin_trace_all",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "paxos_kill_at",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "paxos_max_join_drift",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "paxos_min",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 500,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "paxos_min_wait",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0.05,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "paxos_propose_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "paxos_service_trim_max",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 500,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "paxos_service_trim_min",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 250,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "paxos_stash_full_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 25,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "paxos_trim_max",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 500,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "paxos_trim_min",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 250,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "perf",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Enable internal performance metrics",
                  "long_desc": "If enabled, collect and expose internal health metrics",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "pid_file",
                  "type": "str",
                  "level": "advanced",
                  "desc": "path to write a pid file (if any)",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [
                    "service"
                  ],
                  "services": [
                    "mon",
                    "mgr",
                    "osd",
                    "mds"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "plugin_crypto_accelerator",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Crypto accelerator library to use",
                  "long_desc": "",
                  "default": "crypto_isal",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "plugin_dir",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Base directory for dynamically loaded plugins",
                  "long_desc": "",
                  "default": "/usr/local/lib64/ceph",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon",
                    "osd"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "public_addr",
                  "type": "addr",
                  "level": "basic",
                  "desc": "public-facing address to bind to",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon",
                    "mds",
                    "osd",
                    "mgr"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [],
                  "default": "-"
                },
                {
                  "name": "public_bind_addr",
                  "type": "addr",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "mon"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [],
                  "default": "-"
                },
                {
                  "name": "public_network",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Network(s) from which to choose a public address to bind to",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [
                    "network"
                  ],
                  "services": [
                    "mon",
                    "mds",
                    "osd",
                    "mgr"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "public_network_interface",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Interface name(s) from which to choose an address from a public_network to bind to; public_network must also be specified.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [
                    "network"
                  ],
                  "services": [
                    "mon",
                    "mds",
                    "osd",
                    "mgr"
                  ],
                  "see_also": [
                    "public_network"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "qat_compressor_enabled",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Enable Intel QAT acceleration support for compression if available",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rados_mon_op_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rados_osd_op_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rados_tracing",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_atime_update_interval",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "RBD Image access timestamp refresh interval. Set to 0 to disable access timestamp update.",
                  "long_desc": "",
                  "default": 60,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": 0,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_auto_exclusive_lock_until_manual_request",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "automatically acquire/release exclusive lock until it is explicitly requested",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_balance_parent_reads",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "distribute parent read requests to random OSD",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_balance_snap_reads",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "distribute snap read requests to random OSD",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_blacklist_expire_seconds",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of seconds to blacklist - set to 0 for OSD default",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_blacklist_on_break_lock",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "whether to blacklist clients whose lock was broken",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_blkin_trace_all",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "create a blkin trace for all RBD requests",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_cache",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "whether to enable caching (writeback unless rbd_cache_max_dirty is 0)",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_cache_block_writes_upfront",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "whether to block writes to the cache before the aio_write call completes",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_cache_max_dirty",
                  "type": "size",
                  "level": "advanced",
                  "desc": "dirty limit in bytes - set to 0 for write-through caching",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "25165824"
                },
                {
                  "name": "rbd_cache_max_dirty_age",
                  "type": "float",
                  "level": "advanced",
                  "desc": "seconds in cache before writeback starts",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_cache_max_dirty_object",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "dirty limit for objects - set to 0 for auto calculate from rbd_cache_size",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_cache_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "cache size in bytes",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "33554432"
                },
                {
                  "name": "rbd_cache_target_dirty",
                  "type": "size",
                  "level": "advanced",
                  "desc": "target dirty limit in bytes",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "16777216"
                },
                {
                  "name": "rbd_cache_writethrough_until_flush",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "whether to make writeback caching writethrough until flush is called, to be sure the user of librbd will send flushes so that writeback is safe",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_clone_copy_on_read",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "copy-up parent image blocks to clone upon read request",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_concurrent_management_ops",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "how many operations can be in flight for a management operation like deleting or resizing an image",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": 1,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_default_clone_format",
                  "type": "str",
                  "level": "advanced",
                  "desc": "default internal format for handling clones",
                  "long_desc": "This sets the internal format for tracking cloned images. The setting of '1' requires attaching to protected snapshots that cannot be removed until the clone is removed/flattened. The setting of '2' will allow clones to be attached to any snapshot and permits removing in-use parent snapshots but requires Mimic or later clients. The default setting of 'auto' will use the v2 format if the cluster is configured to require mimic or later clients.",
                  "default": "auto",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "enum_values": [
                    "1",
                    "2",
                    "auto"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "rbd_default_data_pool",
                  "type": "str",
                  "level": "advanced",
                  "desc": "default pool for storing data blocks for new images",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rbd_default_features",
                  "type": "str",
                  "level": "advanced",
                  "desc": "default v2 image features for new images",
                  "long_desc": "RBD features are only applicable for v2 images. This setting accepts either an integer bitmask value or comma-delimited string of RBD feature names. This setting is always internally stored as an integer bitmask value. The mapping between feature bitmask value and feature name is as follows: +1 -> layering, +2 -> striping, +4 -> exclusive-lock, +8 -> object-map, +16 -> fast-diff, +32 -> deep-flatten, +64 -> journaling, +128 -> data-pool",
                  "default": "layering,exclusive-lock,object-map,fast-diff,deep-flatten",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [
                    "runtime"
                  ]
                },
                {
                  "name": "rbd_default_format",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "default image format for new images",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_default_map_options",
                  "type": "str",
                  "level": "advanced",
                  "desc": "default krbd map options",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rbd_default_order",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "default order (data block object size) for new images",
                  "long_desc": "",
                  "default": 22,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_default_pool",
                  "type": "str",
                  "level": "advanced",
                  "desc": "default pool for storing new images",
                  "long_desc": "",
                  "default": "rbd",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rbd_default_stripe_count",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "default stripe count for new images",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_default_stripe_unit",
                  "type": "size",
                  "level": "advanced",
                  "desc": "default stripe width for new images",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "0"
                },
                {
                  "name": "rbd_discard_on_zeroed_write_same",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "discard data on zeroed write same instead of writing zero",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_enable_alloc_hint",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "when writing a object, it will issue a hint to osd backend to indicate the expected size object need",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_journal_commit_age",
                  "type": "float",
                  "level": "advanced",
                  "desc": "commit time interval, seconds",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_journal_max_concurrent_object_sets",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum number of object sets a journal client can be behind before it is automatically unregistered",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_journal_max_payload_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "maximum journal payload size before splitting",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "16384"
                },
                {
                  "name": "rbd_journal_object_flush_age",
                  "type": "float",
                  "level": "advanced",
                  "desc": "maximum age (in seconds) for pending commits",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_journal_object_flush_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "maximum number of pending bytes per journal object",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "0"
                },
                {
                  "name": "rbd_journal_object_flush_interval",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum number of pending commits per journal object",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_journal_object_max_in_flight_appends",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum number of in-flight appends per journal object",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_journal_order",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "default order (object size) for journal data objects",
                  "long_desc": "",
                  "default": 24,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": 12,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_journal_pool",
                  "type": "str",
                  "level": "advanced",
                  "desc": "pool for journal objects",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rbd_journal_splay_width",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of active journal objects",
                  "long_desc": "",
                  "default": 4,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_localize_parent_reads",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "localize parent requests to closest OSD",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_localize_snap_reads",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "localize snap read requests to closest OSD",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirror_concurrent_image_deletions",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum number of image deletions in parallel",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd-mirror"
                  ],
                  "see_also": [],
                  "min": 1,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirror_concurrent_image_syncs",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "maximum number of image syncs in parallel",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd-mirror"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirror_delete_retry_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "interval to check and retry the failed deletion requests",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd-mirror"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirror_image_policy_migration_throttle",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of seconds after which an image can be reshuffled (migrated) again",
                  "long_desc": "",
                  "default": 300,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd-mirror"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirror_image_policy_rebalance_timeout",
                  "type": "float",
                  "level": "advanced",
                  "desc": "number of seconds policy should be idle before trigerring reshuffle (rebalance) of images",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd-mirror"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirror_image_policy_type",
                  "type": "str",
                  "level": "advanced",
                  "desc": "active/active policy type for mapping images to instances",
                  "long_desc": "",
                  "default": "none",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd-mirror"
                  ],
                  "see_also": [],
                  "enum_values": [
                    "none",
                    "simple"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rbd_mirror_image_policy_update_throttle_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "interval (in seconds) to throttle images for mirror daemon peer updates",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd-mirror"
                  ],
                  "see_also": [],
                  "min": 1,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirror_image_state_check_interval",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "interval to get images from pool watcher and set sources in replayer",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd-mirror"
                  ],
                  "see_also": [],
                  "min": 1,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirror_journal_commit_age",
                  "type": "float",
                  "level": "advanced",
                  "desc": "commit time interval, seconds",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd-mirror"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirror_journal_max_fetch_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "maximum bytes to read from each journal data object per fetch",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd-mirror"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "32768"
                },
                {
                  "name": "rbd_mirror_journal_poll_age",
                  "type": "float",
                  "level": "advanced",
                  "desc": "maximum age (in seconds) between successive journal polls",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd-mirror"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirror_leader_heartbeat_interval",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "interval (in seconds) between mirror leader heartbeats",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd-mirror"
                  ],
                  "see_also": [],
                  "min": 1,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirror_leader_max_acquire_attempts_before_break",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of failed attempts to acquire lock after missing heartbeats before breaking lock",
                  "long_desc": "",
                  "default": 3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd-mirror"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirror_leader_max_missed_heartbeats",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of missed heartbeats for non-lock owner to attempt to acquire lock",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd-mirror"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirror_pool_replayers_refresh_interval",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "interval to refresh peers in rbd-mirror daemon",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd-mirror"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirror_sync_point_update_age",
                  "type": "float",
                  "level": "advanced",
                  "desc": "number of seconds between each update of the image sync point object number",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd-mirror"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirroring_delete_delay",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "time-delay in seconds for rbd-mirror delete propagation",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirroring_replay_delay",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "time-delay in seconds for rbd-mirror asynchronous replication",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mirroring_resync_after_disconnect",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "automatically start image resync after mirroring is disconnected due to being laggy",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_move_to_trash_on_remove",
                  "type": "bool",
                  "level": "basic",
                  "desc": "automatically move images to the trash when deleted",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_move_to_trash_on_remove_expire_seconds",
                  "type": "uint",
                  "level": "basic",
                  "desc": "default number of seconds to protect deleted images in the trash",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_mtime_update_interval",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "RBD Image modify timestamp refresh interval. Set to 0 to disable modify timestamp update.",
                  "long_desc": "",
                  "default": 60,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": 0,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_non_blocking_aio",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "process AIO ops from a dispatch thread to prevent blocking",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_op_thread_timeout",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "time in seconds for detecting a hung thread",
                  "long_desc": "",
                  "default": 60,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_op_threads",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of threads to utilize for internal processing",
                  "long_desc": "",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_qos_bps_burst",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "the desired burst limit of IO bytes",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_qos_bps_limit",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "the desired limit of IO bytes per second",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_qos_iops_burst",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "the desired burst limit of IO operations",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_qos_iops_limit",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "the desired limit of IO operations per second",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_qos_read_bps_burst",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "the desired burst limit of read bytes",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_qos_read_bps_limit",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "the desired limit of read bytes per second",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_qos_read_iops_burst",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "the desired burst limit of read operations",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_qos_read_iops_limit",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "the desired limit of read operations per second",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_qos_schedule_tick_min",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "minimum schedule tick (in milliseconds) for QoS",
                  "long_desc": "",
                  "default": 50,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": 1,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_qos_write_bps_burst",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "the desired burst limit of write bytes",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_qos_write_bps_limit",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "the desired limit of write bytes per second",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_qos_write_iops_burst",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "the desired burst limit of write operations",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_qos_write_iops_limit",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "the desired limit of write operations per second",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_readahead_disable_after_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "how many bytes are read in total before readahead is disabled",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "52428800"
                },
                {
                  "name": "rbd_readahead_max_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "set to 0 to disable readahead",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "524288"
                },
                {
                  "name": "rbd_readahead_trigger_requests",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of sequential requests necessary to trigger readahead",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_request_timed_out_seconds",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "number of seconds before maintenance request times out",
                  "long_desc": "",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_skip_partial_discard",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "when trying to discard a range inside an object, set to true to skip zeroing the range",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_sparse_read_threshold_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "threshold for issuing a sparse-read",
                  "long_desc": "minimum number of sequential bytes to read against an object before issuing a sparse-read request to the cluster. 0 implies it must be a full object read to issue a sparse-read, 1 implies always use sparse-read, and any value larger than the maximum object size will disable sparse-read for all requests",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "65536"
                },
                {
                  "name": "rbd_tracing",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "true if LTTng-UST tracepoints should be enabled",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_validate_names",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "validate new image names for RBD compatibility",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rbd_validate_pool",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "validate empty pools for RBD compatibility",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rbd"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "restapi_base_url",
                  "type": "str",
                  "level": "advanced",
                  "desc": "default set by python code",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "restapi_log_level",
                  "type": "str",
                  "level": "advanced",
                  "desc": "default set by python code",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_acl_grants_max_num",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Max number of ACL grants in a single request",
                  "long_desc": "",
                  "default": 100,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_admin_entry",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Path prefix to be used for accessing RGW RESTful admin API.",
                  "long_desc": "",
                  "default": "admin",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_barbican_url",
                  "type": "str",
                  "level": "advanced",
                  "desc": "URL to barbican server.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_bucket_default_quota_max_objects",
                  "type": "int",
                  "level": "basic",
                  "desc": "Default quota for max objects in a bucket",
                  "long_desc": "The default quota configuration for max number of objects in a bucket. A negative number means 'unlimited'.",
                  "default": -1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_bucket_default_quota_max_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Default quota for total size in a bucket",
                  "long_desc": "The default quota configuration for total size of objects in a bucket. A negative number means 'unlimited'.",
                  "default": -1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_bucket_index_max_aio",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Max number of concurrent RADOS requests when handling bucket shards.",
                  "long_desc": "",
                  "default": 8,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_bucket_quota_cache_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "RGW quota stats cache size",
                  "long_desc": "Maximum number of entries in the quota stats cache.",
                  "default": 10000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_bucket_quota_soft_threshold",
                  "type": "float",
                  "level": "basic",
                  "desc": "RGW quota soft threshold",
                  "long_desc": "Threshold from which RGW doesn't rely on cached info for quota decisions. This is done for higher accuracy of the quota mechanism at cost of performance, when getting close to the quota limit. The value configured here is the ratio between the data usage to the max usage as specified by the quota.",
                  "default": 0.95,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_bucket_quota_ttl",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Bucket quota stats cache TTL",
                  "long_desc": "Length of time for bucket stats to be cached within RGW instance.",
                  "default": 600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_cache_enabled",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Enable RGW metadata cache.",
                  "long_desc": "The metadata cache holds metadata entries that RGW requires for processing requests. Metadata entries can be user info, bucket info, and bucket instance info. If not found in the cache, entries will be fetched from the backing RADOS store.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_cache_lru_size"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_cache_expiry_interval",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Number of seconds before entries in the cache are assumed stale and re-fetched. Zero is never.",
                  "long_desc": "The Rados Gateway stores metadata and objects in an internal cache. This should be kept consistent by the OSD's relaying notify events between multiple watching RGW processes. In the event that this notification protocol fails, bounding the length of time that any data in the cache will be assumed valid will ensure that any RGW instance that falls out of sync will eventually recover. This seems to be an issue mostly for large numbers of RGW instances under heavy use. If you would like to turn off cache expiry, set this value to zero.",
                  "default": 900,
                  "daemon_default": "",
                  "tags": [
                    "performance"
                  ],
                  "services": [
                    "rgw",
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_cache_lru_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Max number of items in RGW metadata cache.",
                  "long_desc": "When full, the RGW metadata cache evicts least recently used entries.",
                  "default": 10000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_cache_enabled"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_content_length_compat",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Multiple content length headers compatibility",
                  "long_desc": "Try to handle requests with abiguous multiple content length headers (Content-Length, Http-Content-Length).",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_copy_obj_progress",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Send progress report through copy operation",
                  "long_desc": "If true, RGW will send progress information when copy operation is executed. ",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_copy_obj_progress_every_bytes",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Send copy-object progress info after these many bytes",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1048576"
                },
                {
                  "name": "rgw_cors_rules_max_num",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Max number of cors rules in a single request",
                  "long_desc": "",
                  "default": 100,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_cross_domain_policy",
                  "type": "str",
                  "level": "advanced",
                  "desc": "RGW handle cross domain policy",
                  "long_desc": "Returned cross domain policy when accessing the crossdomain.xml resource (Swift compatiility).",
                  "default": "<allow-access-from domain=\"*\" secure=\"false\" />",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_crypt_default_encryption_key",
                  "type": "str",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_crypt_require_ssl",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Requests including encryption key headers must be sent over ssl",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_crypt_s3_kms_encryption_keys",
                  "type": "str",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_crypt_suppress_logs",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Suppress logs that might print client key",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_curl_low_speed_limit",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "It contains the average transfer speed in bytes per second that the transfer should be below during rgw_curl_low_speed_time seconds for libcurl to consider it to be too slow and abort. Set it zero to disable this.",
                  "default": 1024,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_curl_low_speed_time",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "It contains the time in number seconds that the transfer speed should be below the rgw_curl_low_speed_limit for the library to consider it too slow and abort. Set it zero to disable this.",
                  "default": 300,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_curl_wait_timeout_ms",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_data",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Alternative location for RGW configuration.",
                  "long_desc": "If this is set, the different Ceph system configurables (such as the keyring file will be located in the path that is specified here. ",
                  "default": "/var/lib/ceph/radosgw/$cluster-$id",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": [
                    "no_mon_update"
                  ]
                },
                {
                  "name": "rgw_data_log_changes_size",
                  "type": "int",
                  "level": "dev",
                  "desc": "Max size of pending changes in data log",
                  "long_desc": "RGW will trigger update to the data log if the number of pending entries reached this number.",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_data_log_num_shards",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Number of data log shards",
                  "long_desc": "The number of shards the RGW data log entries will reside in. This affects the data sync parallelism as a shard can only be processed by a single RGW at a time.",
                  "default": 128,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_data_log_obj_prefix",
                  "type": "str",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": "data_log",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_data_log_window",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Data log time window",
                  "long_desc": "The data log keeps information about buckets that have objectst that were modified within a specific timeframe. The sync process then knows which buckets are needed to be scanned for data sync.",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_data_notify_interval_msec",
                  "type": "int",
                  "level": "advanced",
                  "desc": "data changes notification interval to followers",
                  "long_desc": "",
                  "default": 200,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_default_realm_info_oid",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "default.realm",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_default_region_info_oid",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Default region info object id",
                  "long_desc": "Obsolete config option. The rgw_default_zonegroup_info_oid should be used instead.",
                  "default": "default.region",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_default_zonegroup_info_oid"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_default_zone_info_oid",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Default zone info object id",
                  "long_desc": "Name of the RADOS object that holds the default zone information.",
                  "default": "default.zone",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_default_zonegroup_info_oid",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "default.zonegroup",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_defer_to_bucket_acls",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Bucket ACLs override object ACLs",
                  "long_desc": "If not empty, a string that selects that mode of operation. 'recurse' will use bucket's ACL for the authorizaton. 'full-control' will allow users that users that have full control permission on the bucket have access to the object.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_delete_multi_obj_max_num",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Max number of objects in a single multi-object delete request",
                  "long_desc": "",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_dns_name",
                  "type": "str",
                  "level": "advanced",
                  "desc": "The host name that RGW uses.",
                  "long_desc": "This is Needed for virtual hosting of buckets to work properly, unless configured via zonegroup configuration.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_dns_s3website_name",
                  "type": "str",
                  "level": "advanced",
                  "desc": "The host name that RGW uses for static websites (S3)",
                  "long_desc": "This is needed for virtual hosting of buckets, unless configured via zonegroup configuration.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_dynamic_resharding",
                  "type": "bool",
                  "level": "basic",
                  "desc": "Enable dynamic resharding",
                  "long_desc": "If true, RGW will dynamicall increase the number of shards in buckets that have a high number of objects per shard.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_max_objs_per_shard"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_enable_apis",
                  "type": "str",
                  "level": "advanced",
                  "desc": "A list of set of RESTful APIs that rgw handles.",
                  "long_desc": "",
                  "default": "s3, s3website, swift, swift_auth, admin, sts",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_enable_gc_threads",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Enables the garbage collection maintenance thread.",
                  "long_desc": "The garbage collection maintenance thread is responsible for garbage collector maintenance work. The thread itself can be disabled, but in order for garbage collection to work correctly, at least one RGW in each zone needs to have this thread running.  Having the thread enabled on multiple RGW processes within the same zone can spread some of the maintenance work between them.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_enable_quota_threads",
                    "rgw_enable_lc_threads"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_enable_lc_threads",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Enables the lifecycle maintenance thread. This is required on at least one rgw for each zone.",
                  "long_desc": "The lifecycle maintenance thread is responsible for lifecycle related maintenance work. The thread itself can be disabled, but in order for lifecycle to work correctly, at least one RGW in each zone needs to have this thread running. Havingthe thread enabled on multiple RGW processes within the same zone can spread some of the maintenance work between them.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_enable_gc_threads",
                    "rgw_enable_quota_threads"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_enable_ops_log",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Enable ops log",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_log_nonexistent_bucket",
                    "rgw_log_object_name",
                    "rgw_ops_log_rados",
                    "rgw_ops_log_socket_path"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_enable_quota_threads",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Enables the quota maintenance thread.",
                  "long_desc": "The quota maintenance thread is responsible for quota related maintenance work. The thread itself can be disabled, but in order for quota to work correctly, at least one RGW in each zone needs to have this thread running. Having the thread enabled on multiple RGW processes within the same zone can spread some of the maintenance work between them.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_enable_gc_threads",
                    "rgw_enable_lc_threads"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_enable_static_website",
                  "type": "bool",
                  "level": "basic",
                  "desc": "Enable static website APIs",
                  "long_desc": "This configurable controls whether RGW handles the website control APIs. RGW can server static websites if s3website hostnames are configured, and unrelated to this configurable.",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_enable_usage_log",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Enable usage log",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_usage_max_shards"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_enforce_swift_acls",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "RGW enforce swift acls",
                  "long_desc": "Should RGW enforce special Swift-only ACLs. Swift has a special ACL that gives permission to access all objects in a container.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_exit_timeout_secs",
                  "type": "int",
                  "level": "advanced",
                  "desc": "RGW shutdown timeout",
                  "long_desc": "Number of seconds to wait for a process before exiting unconditionally.",
                  "default": 120,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_expose_bucket",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Send Bucket HTTP header with the response",
                  "long_desc": "If true, RGW will send a Bucket HTTP header with the responses. The header will contain the name of the bucket the operation happened on.",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_extended_http_attrs",
                  "type": "str",
                  "level": "advanced",
                  "desc": "RGW support extended HTTP attrs",
                  "long_desc": "Add new set of attributes that could be set on an object. These extra attributes can be set through HTTP header fields when putting the objects. If set, these attributes will return as HTTP fields when doing GET/HEAD on the object.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_fcgi_socket_backlog",
                  "type": "int",
                  "level": "advanced",
                  "desc": "FastCGI socket connection backlog",
                  "long_desc": "Size of FastCGI connection backlog. This reflects the maximum number of new connection requests that RGW can handle concurrently without dropping any. ",
                  "default": 1024,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_host",
                    "rgw_socket_path"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_frontends",
                  "type": "str",
                  "level": "basic",
                  "desc": "RGW frontends configuration",
                  "long_desc": "A comma delimited list of frontends configuration. Each configuration contains the type of the frontend followed by an optional space delimited set of key=value config parameters.",
                  "default": "civetweb port=7480",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_gc_max_concurrent_io",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Max concurrent RADOS IO operations for garbage collection",
                  "long_desc": "The maximum number of concurrent IO operations that the RGW garbage collection thread will use when purging old data.",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_gc_max_objs",
                    "rgw_gc_obj_min_wait",
                    "rgw_gc_processor_max_time",
                    "rgw_gc_max_trim_chunk"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_gc_max_objs",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Number of shards for garbage collector data",
                  "long_desc": "The number of garbage collector data shards, is the number of RADOS objects that RGW will use to store the garbage collection information on.",
                  "default": 32,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_gc_obj_min_wait",
                    "rgw_gc_processor_max_time",
                    "rgw_gc_processor_period",
                    "rgw_gc_max_concurrent_io"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_gc_max_trim_chunk",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Max number of keys to remove from garbage collector log in a single operation",
                  "long_desc": "",
                  "default": 16,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_gc_max_objs",
                    "rgw_gc_obj_min_wait",
                    "rgw_gc_processor_max_time",
                    "rgw_gc_max_concurrent_io"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_gc_obj_min_wait",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Garabge collection object expiration time",
                  "long_desc": "The length of time (in seconds) that the RGW collector will wait before purging a deleted object's data. RGW will not remove object immediately, as object could still have readers. A mechanism exists to increase the object's expiration time when it's being read.",
                  "default": 7200,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_gc_max_objs",
                    "rgw_gc_processor_max_time",
                    "rgw_gc_processor_period",
                    "rgw_gc_max_concurrent_io"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_gc_processor_max_time",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Length of time GC processor can lease shard",
                  "long_desc": "Garbage collection thread in RGW process holds a lease on its data shards. These objects contain the information about the objects that need to be removed. RGW takes a lease in order to prevent multiple RGW processes from handling the same objects concurrently. This time signifies that maximum amount of time that RGW is allowed to hold that lease. In the case where RGW goes down uncleanly, this is the amount of time where processing of that data shard will be blocked.",
                  "default": 3600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_gc_max_objs",
                    "rgw_gc_obj_min_wait",
                    "rgw_gc_processor_period",
                    "rgw_gc_max_concurrent_io"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_gc_processor_period",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Garbage collector cycle run time",
                  "long_desc": "The amount of time between the start of consecutive runs of the garbage collector threads. If garbage collector runs takes more than this period, it will not wait before running again.",
                  "default": 3600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_gc_max_objs",
                    "rgw_gc_obj_min_wait",
                    "rgw_gc_processor_max_time",
                    "rgw_gc_max_concurrent_io",
                    "rgw_gc_max_trim_chunk"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_get_obj_max_req_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "RGW object read chunk size",
                  "long_desc": "The maximum request size of a single object read operation sent to RADOS",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "4194304"
                },
                {
                  "name": "rgw_get_obj_window_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "RGW object read window size",
                  "long_desc": "The window size in bytes for a single object read request",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "16777216"
                },
                {
                  "name": "rgw_healthcheck_disabling_path",
                  "type": "str",
                  "level": "dev",
                  "desc": "Swift health check api can be disabled if a file can be accessed in this path.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_host",
                  "type": "str",
                  "level": "advanced",
                  "desc": "RGW FastCGI host name (for FastCGI over TCP)",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_port",
                    "rgw_fcgi_socket_backlog"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_ignore_get_invalid_range",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Treat invalid (e.g., negative) range request as full",
                  "long_desc": "Treat invalid (e.g., negative) range request as request for the full object (AWS compatibility)",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_init_timeout",
                  "type": "int",
                  "level": "basic",
                  "desc": "Initialization timeout",
                  "long_desc": "The time length (in seconds) that RGW will allow for its initialization. RGW process will give up and quit if initialization is not complete after this amount of time.",
                  "default": 300,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_inject_notify_timeout_probability",
                  "type": "float",
                  "level": "dev",
                  "desc": "Likelihood of ignoring a notify",
                  "long_desc": "This is the probability that the RGW cache will ignore a cache notify message. It exists to help with the development and testing of cache consistency and recovery improvements. Please do not set it in a production cluster, as it actively causes failures. Set this to a floating point value between 0 and 1.",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [
                    "fault injection",
                    "testing"
                  ],
                  "services": [
                    "rgw",
                    "rgw"
                  ],
                  "see_also": [],
                  "min": 0,
                  "max": 1,
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_accepted_admin_roles",
                  "type": "str",
                  "level": "advanced",
                  "desc": "List of roles allowing user to gain admin privileges (Keystone).",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_accepted_roles",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Only users with one of these roles will be served when doing Keystone authentication.",
                  "long_desc": "",
                  "default": "Member, admin",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_admin_domain",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Keystone admin user domain (for Keystone v3).",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_admin_password",
                  "type": "str",
                  "level": "advanced",
                  "desc": "DEPRECATED: Keystone admin password.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_admin_password_path",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Path to a file containing the Keystone admin password.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_admin_project",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Keystone admin user project (for Keystone v3).",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_admin_tenant",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Keystone admin user tenant.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_admin_token",
                  "type": "str",
                  "level": "advanced",
                  "desc": "DEPRECATED: The admin token (shared secret) that is used for the Keystone requests.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_admin_token_path",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Path to a file containing the admin token (shared secret) that is used for the Keystone requests.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_admin_user",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Keystone admin user.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_api_version",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Version of Keystone API to use (2 or 3).",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_barbican_domain",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Keystone barbican user domain.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_barbican_password",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Keystone password for barbican user.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_barbican_project",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Keystone barbican user project (Keystone v3).",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_barbican_tenant",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Keystone barbican user tenant (Keystone v2.0).",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_barbican_user",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Keystone user to access barbican secrets.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_implicit_tenants",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "RGW Keystone implicit tenants creation",
                  "long_desc": "Implicitly create new users in their own tenant with the same name when authenticating via Keystone.",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_revocation_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Keystone cache revocation interval",
                  "long_desc": "Time (in seconds) that RGW waits between requests to Keystone for getting a list of revoked tokens. A revoked token might still be considered valid by RGW for this amount of time.",
                  "default": 900,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_token_cache_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Keystone token cache size",
                  "long_desc": "Max number of Keystone tokens that will be cached. Token that is not cached requires RGW to access the Keystone server when authenticating.",
                  "default": 10000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_url",
                  "type": "str",
                  "level": "basic",
                  "desc": "The URL to the Keystone server.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_keystone_verify_ssl",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Should RGW verify the Keystone server SSL certificate.",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_lc_debug_interval",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": -1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_lc_lock_max_time",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 60,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_lc_max_objs",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Number of lifecycle data shards",
                  "long_desc": "Number of RADOS objects to use for storing lifecycle index. This can affect concurrency of lifecycle maintenance, but requires multiple RGW processes running on the zone to be utilized.",
                  "default": 32,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_lc_max_rules",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Max number of lifecycle rules set on one bucket",
                  "long_desc": "Number of lifecycle rules set on one bucket should be limited.",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_lc_thread_delay",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Delay after processing of bucket listing chunks (i.e., per 1000 entries) in milliseconds",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_ldap_binddn",
                  "type": "str",
                  "level": "advanced",
                  "desc": "LDAP entry RGW will bind with (user match).",
                  "long_desc": "",
                  "default": "uid=admin,cn=users,dc=example,dc=com",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_ldap_dnattr",
                  "type": "str",
                  "level": "advanced",
                  "desc": "LDAP attribute containing RGW user names (to form binddns).",
                  "long_desc": "",
                  "default": "uid",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_ldap_searchdn",
                  "type": "str",
                  "level": "advanced",
                  "desc": "LDAP search base (basedn).",
                  "long_desc": "",
                  "default": "cn=users,cn=accounts,dc=example,dc=com",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_ldap_searchfilter",
                  "type": "str",
                  "level": "advanced",
                  "desc": "LDAP search filter.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_ldap_secret",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Path to file containing credentials for rgw_ldap_binddn.",
                  "long_desc": "",
                  "default": "/etc/openldap/secret",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_ldap_uri",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Space-separated list of LDAP servers in URI format.",
                  "long_desc": "",
                  "default": "ldaps://<ldap.your.domain>",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_lifecycle_work_time",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Lifecycle allowed work time",
                  "long_desc": "Local time window in which the lifecycle maintenance thread can work.",
                  "default": "00:00-06:00",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_list_bucket_min_readahead",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Minimum number of entries to request from rados for bucket listing",
                  "long_desc": "",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_list_buckets_max_chunk",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Max number of buckets to retrieve in a single listing operation",
                  "long_desc": "When RGW fetches lists of user's buckets from the backend, this is the max number of entries it will try to retrieve in a single operation. Note that the backend may choose to return a smaller number of entries.",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_log_http_headers",
                  "type": "str",
                  "level": "basic",
                  "desc": "List of HTTP headers to log",
                  "long_desc": "A comma delimited list of HTTP headers to log when seen, ignores case (e.g., http_x_forwarded_for).",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_log_nonexistent_bucket",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Should RGW log operations on bucket that does not exist",
                  "long_desc": "This config option applies to the ops log. When this option is set, the ops log will log operations that are sent to non existing buckets. These operations inherently fail, and do not correspond to a specific user.",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_enable_ops_log"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_log_object_name",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Ops log object name format",
                  "long_desc": "Defines the format of the RADOS objects names that ops log uses to store ops log data",
                  "default": "%Y-%m-%d-%H-%i-%n",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_enable_ops_log"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_log_object_name_utc",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Should ops log object name based on UTC",
                  "long_desc": "If set, the names of the RADOS objects that hold the ops log data will be based on UTC time zone. If not set, it will use the local time zone.",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_enable_ops_log",
                    "rgw_log_object_name"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_max_attr_name_len",
                  "type": "size",
                  "level": "advanced",
                  "desc": "The maximum length of metadata name. 0 skips the check",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "0"
                },
                {
                  "name": "rgw_max_attr_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "The maximum length of metadata value. 0 skips the check",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "0"
                },
                {
                  "name": "rgw_max_attrs_num_in_req",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "The maximum number of metadata items that can be put via single request",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_max_chunk_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Set RGW max chunk size",
                  "long_desc": "The chunk size is the size of RADOS I/O requests that RGW sends when accessing data objects. RGW read and write operation will never request more than this amount in a single request. This also defines the rgw object head size, as head operations need to be atomic, and anything larger than this would require more than a single operation.",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "4194304"
                },
                {
                  "name": "rgw_max_notify_retries",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Number of attempts to notify peers before giving up.",
                  "long_desc": "The number of times we will attempt to update a peer's cache in the event of error before giving up. This is unlikely to be an issue unless your cluster is very heavily loaded. Beware that increasing this value may cause some operations to take longer in exceptional cases and thus may, rarely, cause clients to time out.",
                  "default": 3,
                  "daemon_default": "",
                  "tags": [
                    "error recovery"
                  ],
                  "services": [
                    "rgw",
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_max_objs_per_shard",
                  "type": "uint",
                  "level": "basic",
                  "desc": "Max objects per shard for dynamic resharding",
                  "long_desc": "This is the max number of objects per bucket index shard that RGW will allow with dynamic resharding. RGW will trigger an automatic reshard operation on the bucket if it exceeds this number.",
                  "default": 100000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_dynamic_resharding"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_max_put_param_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "The maximum size (in bytes) of data input of certain RESTful requests.",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "1048576"
                },
                {
                  "name": "rgw_max_put_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Max size (in bytes) of regular (non multi-part) object upload.",
                  "long_desc": "Plain object upload is capped at this amount of data. In order to upload larger objects, a special upload mechanism is required. The S3 API provides the multi-part upload, and Swift provides DLO and SLO.",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "5368709120"
                },
                {
                  "name": "rgw_max_slo_entries",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Max number of entries in Swift Static Large Object manifest",
                  "long_desc": "",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_md_log_max_shards",
                  "type": "int",
                  "level": "advanced",
                  "desc": "RGW number of metadata log shards",
                  "long_desc": "The number of shards the RGW metadata log entries will reside in. This affects the metadata sync parallelism as a shard can only be processed by a single RGW at a time",
                  "default": 64,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_md_notify_interval_msec",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Length of time to aggregate metadata changes",
                  "long_desc": "Length of time (in milliseconds) in which the master zone aggregates all the metadata changes that occurred, before sending notifications to all the other zones.",
                  "default": 200,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_mime_types_file",
                  "type": "str",
                  "level": "basic",
                  "desc": "Path to local mime types file",
                  "long_desc": "The mime types file is needed in Swift when uploading an object. If object's content type is not specified, RGW will use data from this file to assign a content type to the object.",
                  "default": "/etc/mime.types",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_mp_lock_max_time",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Multipart upload max completion time",
                  "long_desc": "Time length to allow completion of a multipart upload operation. This is done to prevent concurrent completions on the same object with the same upload id.",
                  "default": 600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_multipart_min_part_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Minimum S3 multipart-upload part size",
                  "long_desc": "When doing a multipart upload, each part (other than the last part) should be at least this size.",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "5242880"
                },
                {
                  "name": "rgw_multipart_part_upload_limit",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Max number of parts in multipart upload",
                  "long_desc": "",
                  "default": 10000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_nfs_fhcache_partitions",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 3,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_nfs_fhcache_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 2017,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_nfs_lru_lane_hiwat",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 911,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_nfs_lru_lanes",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 5,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_nfs_max_gc",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 300,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": 1,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_nfs_namespace_expire_secs",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 300,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": 1,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_nfs_write_completion_interval_s",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_num_async_rados_threads",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Number of concurrent RADOS operations in multisite sync",
                  "long_desc": "The number of concurrent RADOS IO operations that will be triggered for handling multisite sync operations. This includes control related work, and not the actual sync operations.",
                  "default": 32,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_num_control_oids",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Number of control objects used for cross-RGW communication.",
                  "long_desc": "RGW uses certain control objects to send messages between different RGW processes running on the same zone. These messages include metadata cache invalidation info that is being sent when metadata is modified (such as user or bucket information). A higher number of control objects allows better concurrency of these messages, at the cost of more resource utilization.",
                  "default": 8,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_num_rados_handles",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Number of librados handles that RGW uses.",
                  "long_desc": "This param affects the number of separate librados handles it uses to connect to the RADOS backend, which directly affects the number of connections RGW will have to each OSD. A higher number affects resource utilization.",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_obj_stripe_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "RGW object stripe size",
                  "long_desc": "The size of an object stripe for RGW objects. This is the maximum size a backing RADOS object will have. RGW objects that are larger than this will span over multiple objects.",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "4194304"
                },
                {
                  "name": "rgw_obj_tombstone_cache_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Max number of entries to keep in tombstone cache",
                  "long_desc": "The tombstone cache is used when doing a multi-zone data sync. RGW keeps there information about removed objects which is needed in order to prevent re-syncing of objects that were already removed.",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_objexp_chunk_size",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 100,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_objexp_gc_interval",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Swift objects expirer garbage collector interval",
                  "long_desc": "",
                  "default": 600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_objexp_hints_num_shards",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Number of object expirer data shards",
                  "long_desc": "The number of shards the (Swift) object expirer will store its data on.",
                  "default": 127,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_olh_pending_timeout_sec",
                  "type": "int",
                  "level": "dev",
                  "desc": "Max time for pending OLH change to complete",
                  "long_desc": "OLH is a versioned object's logical head. Operations on it are journaled and as pending before completion. If an operation doesn't complete with this amount of seconds, we remove the operation from the journal.",
                  "default": 3600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_op_thread_suicide_timeout",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_op_thread_timeout",
                  "type": "int",
                  "level": "dev",
                  "desc": "Timeout for async rados coroutine operations.",
                  "long_desc": "",
                  "default": 600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_op_tracing",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "true if LTTng-UST tracepoints should be enabled",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_opa_token",
                  "type": "str",
                  "level": "advanced",
                  "desc": "The Bearer token OPA uses to authenticate client requests.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_opa_url",
                  "type": "str",
                  "level": "advanced",
                  "desc": "URL to OPA server.",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_opa_verify_ssl",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Should RGW verify the OPA server SSL certificate.",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_ops_log_data_backlog",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Ops log socket backlog",
                  "long_desc": "Maximum amount of data backlog that RGW can keep when ops log is configured to send info through unix domain socket. When data backlog is higher than this, ops log entries will be lost. In order to avoid ops log information loss, the listener needs to clear data (by reading it) quickly enough.",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_enable_ops_log",
                    "rgw_ops_log_socket_path"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "5242880"
                },
                {
                  "name": "rgw_ops_log_rados",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Use RADOS for ops log",
                  "long_desc": "If set, RGW will store ops log information in RADOS.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_enable_ops_log"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_ops_log_socket_path",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Unix domain socket path for ops log.",
                  "long_desc": "Path to unix domain socket that RGW will listen for connection on. When connected, RGW will send ops log data through it.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_enable_ops_log",
                    "rgw_ops_log_data_backlog"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_override_bucket_index_max_shards",
                  "type": "uint",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_period_latest_epoch_info_oid",
                  "type": "str",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": ".latest_epoch",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_period_push_interval",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Period push interval",
                  "long_desc": "Number of seconds to wait before retrying 'period push' operation.",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_period_push_interval_max",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Period push maximum interval",
                  "long_desc": "The max number of seconds to wait before retrying 'period push' after exponential backoff.",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_period_root_pool",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Period root pool",
                  "long_desc": "The period root pool, is the pool where the RGW period configuration located.",
                  "default": ".rgw.root",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_zonegroup_root_pool",
                    "rgw_zone_root_pool",
                    "rgw_realm_root_pool"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_port",
                  "type": "str",
                  "level": "basic",
                  "desc": "RGW FastCGI port number (for FastCGI over TCP)",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_host",
                    "rgw_fcgi_socket_backlog"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_print_continue",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "RGW support of 100-continue",
                  "long_desc": "Should RGW explicitly send 100 (continue) responses. This is mainly relevant when using FastCGI, as some FastCGI modules do not fully support this feature.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_print_prohibited_content_length",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "RGW RFC-7230 compatibility",
                  "long_desc": "Specifies whether RGW violates RFC 7230 and sends Content-Length with 204 or 304 statuses.",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_put_obj_max_window_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "The maximum RADOS write window size (in bytes).",
                  "long_desc": "The window size may be dynamically adjusted, but will not surpass this value.",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_put_obj_min_window_size",
                    "rgw_max_chunk_size"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "67108864"
                },
                {
                  "name": "rgw_put_obj_min_window_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "The minimum RADOS write window size (in bytes).",
                  "long_desc": "The window size determines the total concurrent RADOS writes of a single rgw object. When writing an object RGW will send multiple chunks to RADOS. The total size of the writes does not exceed the window size. The window size can be automatically in order to better utilize the pipe.",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_put_obj_max_window_size",
                    "rgw_max_chunk_size"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "16777216"
                },
                {
                  "name": "rgw_rados_tracing",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "true if LTTng-UST tracepoints should be enabled",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_realm",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_realm_root_pool",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Realm root pool",
                  "long_desc": "The realm root pool, is the pool where the RGW realm configuration located.",
                  "default": ".rgw.root",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_zonegroup_root_pool",
                    "rgw_zone_root_pool",
                    "rgw_period_root_pool"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_region",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Region name",
                  "long_desc": "Obsolete config option. The rgw_zonegroup option should be used instead.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_zonegroup"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_region_root_pool",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Region root pool",
                  "long_desc": "Obsolete config option. The rgw_zonegroup_root_pool should be used instead.",
                  "default": ".rgw.root",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_zonegroup_root_pool"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_relaxed_region_enforcement",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Disable region constraint enforcement",
                  "long_desc": "Enable requests such as bucket creation to succeed irrespective of region restrictions (Jewel compat).",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_relaxed_s3_bucket_names",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "RGW enable relaxed S3 bucket names",
                  "long_desc": "RGW enable relaxed S3 bucket name rules for US region buckets.",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_remote_addr_param",
                  "type": "str",
                  "level": "advanced",
                  "desc": "HTTP header that holds the remote address in incoming requests.",
                  "long_desc": "RGW will use this header to extract requests origin. When RGW runs behind a reverse proxy, the remote address header will point at the proxy's address and not at the originator's address. Therefore it is sometimes possible to have the proxy add the originator's address in a separate HTTP header, which will allow RGW to log it correctly.",
                  "default": "REMOTE_ADDR",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_enable_ops_log"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_request_uri",
                  "type": "str",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_reshard_batch_size",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Number of reshard entries to batch together before sending the operations to the CLS back-end",
                  "long_desc": "",
                  "default": 64,
                  "daemon_default": "",
                  "tags": [
                    "performance"
                  ],
                  "services": [
                    "rgw",
                    "rgw"
                  ],
                  "see_also": [],
                  "min": 8,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_reshard_bucket_lock_duration",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Number of seconds the timeout on the reshard locks (bucket reshard lock and reshard log lock) are set to. As a reshard proceeds these locks can be renewed/extended. If too short, reshards cannot complete and will fail, causing a future reshard attempt. If too long a hung or crashed reshard attempt will keep the bucket locked for an extended period, not allowing RGW to detect the failed reshard attempt and recover.",
                  "long_desc": "",
                  "default": 360,
                  "daemon_default": "",
                  "tags": [
                    "performance"
                  ],
                  "services": [
                    "rgw",
                    "rgw"
                  ],
                  "see_also": [],
                  "min": 30,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_reshard_max_aio",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Maximum number of outstanding asynchronous I/O operations to allow at a time during resharding",
                  "long_desc": "",
                  "default": 128,
                  "daemon_default": "",
                  "tags": [
                    "performance"
                  ],
                  "services": [
                    "rgw",
                    "rgw"
                  ],
                  "see_also": [],
                  "min": 16,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_reshard_num_logs",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 16,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw",
                    "rgw"
                  ],
                  "see_also": [],
                  "min": 1,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_reshard_thread_interval",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Number of seconds between processing of reshard log entries",
                  "long_desc": "",
                  "default": 600,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": 600,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_resolve_cname",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Support vanity domain names via CNAME",
                  "long_desc": "If true, RGW will query DNS when detecting that it's serving a request that was sent to a host in another domain. If a CNAME record is configured for that domain it will use it instead. This gives user to have the ability of creating a unique domain of their own to point at data in their bucket.",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_rest_getusage_op_compat",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "REST GetUsage request backward compatibility",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_run_sync_thread",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Should run sync thread",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_s3_auth_order",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Authentication strategy order to use for s3 authentication",
                  "long_desc": "Order of authentication strategies to try for s3 authentication, the allowed options are a comma separated list of engines external, local. The default order is to try all the externally configured engines before attempting local rados based authentication",
                  "default": "sts, external, local",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_s3_auth_use_keystone",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Should S3 authentication use Keystone.",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_s3_auth_use_ldap",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Should S3 authentication use LDAP.",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_s3_auth_use_rados",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Should S3 authentication use credentials stored in RADOS backend.",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_s3_auth_use_sts",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Should S3 authentication use STS.",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_s3_success_create_obj_status",
                  "type": "int",
                  "level": "advanced",
                  "desc": "HTTP return code override for object creation",
                  "long_desc": "If not zero, this is the HTTP return code that will be returned on a successful S3 object creation.",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_safe_max_objects_per_shard",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Safe number of objects per shard",
                  "long_desc": "This is the max number of objects per bucket index shard that RGW considers safe. RGW will warn if it identifies a bucket where its per-shard count is higher than a percentage of this number.",
                  "default": 102400,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_shard_warning_threshold"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_script_uri",
                  "type": "str",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_service_provider_name",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Service provider name which is contained in http response headers",
                  "long_desc": "As S3 or other cloud storage providers do, http response headers should contain the name of the provider. This name will be placed in http header 'Server'.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_shard_warning_threshold",
                  "type": "float",
                  "level": "advanced",
                  "desc": "Warn about max objects per shard",
                  "long_desc": "Warn if number of objects per shard in a specific bucket passed this percentage of the safe number.",
                  "default": 90,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_safe_max_objects_per_shard"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_socket_path",
                  "type": "str",
                  "level": "advanced",
                  "desc": "RGW FastCGI socket path (for FastCGI over Unix domain sockets).",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_fcgi_socket_backlog"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_sts_entry",
                  "type": "str",
                  "level": "advanced",
                  "desc": "STS URL prefix",
                  "long_desc": "URL path prefix for internal STS requests.",
                  "default": "sts",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_sts_key",
                  "type": "str",
                  "level": "advanced",
                  "desc": "STS Key",
                  "long_desc": "Key used for encrypting/ decrypting session token.",
                  "default": "sts",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_sts_max_session_duration",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Session token max duration",
                  "long_desc": "Max duration in seconds for which the session token is valid.",
                  "default": 43200,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_swift_account_in_url",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Swift account encoded in URL",
                  "long_desc": "Whether the swift account is encoded in the uri path (AUTH_<account>).",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_swift_tenant_name"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_swift_auth_entry",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Swift auth URL prefix",
                  "long_desc": "URL path prefix for internal swift auth requests.",
                  "default": "auth",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_swift_url"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_swift_auth_url",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Swift auth URL",
                  "long_desc": "Default url to which RGW connects and verifies tokens for v1 auth (if not using internal swift auth).",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_swift_custom_header",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Enable swift custom header",
                  "long_desc": "If not empty, specifies a name of HTTP header that can include custom data. When uploading an object, if this header is passed RGW will store this header info and it will be available when listing the bucket.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_swift_enforce_content_length",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Send content length when listing containers (Swift)",
                  "long_desc": "Whether content length header is needed when listing containers. When this is set to false, RGW will send extra info for each entry in the response.",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_swift_need_stats",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Enable stats on bucket listing in Swift",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_swift_tenant_name",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Swift tenant name",
                  "long_desc": "Tenant name that is used when constructing the swift path.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_swift_account_in_url"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_swift_token_expiration",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Expiration time (in seconds) for token generated through RGW Swift auth.",
                  "long_desc": "",
                  "default": 86400,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_swift_url",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Swift-auth storage URL",
                  "long_desc": "Used in conjunction with rgw internal swift authentication. This affects the X-Storage-Url response header value.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_swift_auth_entry"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_swift_url_prefix",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Swift URL prefix",
                  "long_desc": "The URL path prefix for swift requests.",
                  "default": "swift",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_swift_versioning_enabled",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Enable Swift versioning",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_sync_data_inject_err_probability",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_sync_lease_period",
                  "type": "int",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 120,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_sync_log_trim_concurrent_buckets",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Maximum number of buckets to trim in parallel",
                  "long_desc": "",
                  "default": 4,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_sync_log_trim_interval",
                    "rgw_sync_log_trim_max_buckets",
                    "rgw_sync_log_trim_min_cold_buckets"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_sync_log_trim_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Sync log trim interval",
                  "long_desc": "Time in seconds between attempts to trim sync logs.",
                  "default": 1200,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_sync_log_trim_max_buckets",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Maximum number of buckets to trim per interval",
                  "long_desc": "The maximum number of buckets to consider for bucket index log trimming each trim interval, regardless of the number of bucket index shards. Priority is given to buckets with the most sync activity over the last trim interval.",
                  "default": 16,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_sync_log_trim_interval",
                    "rgw_sync_log_trim_min_cold_buckets",
                    "rgw_sync_log_trim_concurrent_buckets"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_sync_log_trim_min_cold_buckets",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Minimum number of cold buckets to trim per interval",
                  "long_desc": "Of the `rgw_sync_log_trim_max_buckets` selected for bucket index log trimming each trim interval, at least this many of them must be 'cold' buckets. These buckets are selected in order from the list of all bucket instances, to guarantee that all buckets will be visited eventually.",
                  "default": 4,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_sync_log_trim_interval",
                    "rgw_sync_log_trim_max_buckets",
                    "rgw_sync_log_trim_concurrent_buckets"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_sync_meta_inject_err_probability",
                  "type": "float",
                  "level": "dev",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_sync_trace_history_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "Sync trace history size",
                  "long_desc": "Maximum number of complete sync trace entries to keep.",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "4096"
                },
                {
                  "name": "rgw_sync_trace_per_node_log_size",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Sync trace per-node log size",
                  "long_desc": "The number of log entries to keep per sync-trace node.",
                  "default": 32,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_sync_trace_servicemap_update_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Sync-trace service-map update interval",
                  "long_desc": "Number of seconds between service-map updates of sync-trace events.",
                  "default": 10,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_thread_pool_size",
                  "type": "int",
                  "level": "basic",
                  "desc": "RGW requests handling thread pool size.",
                  "long_desc": "This parameter determines the number of concurrent requests RGW can process when using either the civetweb, or the fastcgi frontends. The higher this number is, RGW will be able to deal with more concurrent requests at the cost of more resource utilization.",
                  "default": 512,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_torrent_comment",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Torrent field comment",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_torrent_createby",
                  "type": "str",
                  "level": "advanced",
                  "desc": "torrent field created by",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_torrent_encoding",
                  "type": "str",
                  "level": "advanced",
                  "desc": "torrent field encoding",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_torrent_flag",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "When true, uploaded objects will calculate and store a SHA256 hash of object data so the object can be retrieved as a torrent file",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_torrent_origin",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Torrent origin",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_torrent_sha_unit",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "524288"
                },
                {
                  "name": "rgw_torrent_tracker",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Torrent field announce and announce list",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_trust_forwarded_https",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Trust Forwarded and X-Forwarded-Proto headers",
                  "long_desc": "When a proxy in front of radosgw is used for ssl termination, radosgw does not know whether incoming http connections are secure. Enable this option to trust the Forwarded and X-Forwarded-Proto headers sent by the proxy when determining whether the connection is secure. This is required for some features, such as server side encryption.",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_crypt_require_ssl"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_usage_log_flush_threshold",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Number of entries in usage log before flushing",
                  "long_desc": "This is the max number of entries that will be held in the usage log, before it will be flushed to the backend. Note that the usage log is periodically flushed, even if number of entries does not reach this threshold. A usage log entry corresponds to one or more operations on a single bucket.i",
                  "default": 1024,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_enable_usage_log",
                    "rgw_usage_log_tick_interval"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_usage_log_tick_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Number of seconds between usage log flush cycles",
                  "long_desc": "The number of seconds between consecutive usage log flushes. The usage log will also flush itself to the backend if the number of pending entries reaches a certain threshold.",
                  "default": 30,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_enable_usage_log",
                    "rgw_usage_log_flush_threshold"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_usage_max_shards",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Number of shards for usage log.",
                  "long_desc": "The number of RADOS objects that RGW will use in order to store the usage log data.",
                  "default": 32,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_enable_usage_log"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_usage_max_user_shards",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Number of shards for single user in usage log",
                  "long_desc": "The number of shards that a single user will span over in the usage log.",
                  "default": 1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_enable_usage_log"
                  ],
                  "min": 1,
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_use_opa_authz",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Should OPA be used to authorize client requests.",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_user_default_quota_max_objects",
                  "type": "int",
                  "level": "basic",
                  "desc": "User quota max objects",
                  "long_desc": "The default quota configuration for total number of objects for a single user. A negative number means 'unlimited'.",
                  "default": -1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_user_default_quota_max_size",
                  "type": "int",
                  "level": "basic",
                  "desc": "User quota max size",
                  "long_desc": "The default quota configuration for total size of objects for a single user. A negative number means 'unlimited'.",
                  "default": -1,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_user_max_buckets",
                  "type": "int",
                  "level": "basic",
                  "desc": "Max number of buckets per user",
                  "long_desc": "A user can create this many buckets. Zero means unlimmited, negative number means user cannot create any buckets (although user will retain buckets already created.",
                  "default": 1000,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_user_quota_bucket_sync_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "User quota bucket sync interval",
                  "long_desc": "Time period for accumulating modified buckets before syncing these stats.",
                  "default": 180,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_user_quota_sync_idle_users",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Should sync idle users quota",
                  "long_desc": "Whether stats for idle users be fully synced.",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_user_quota_sync_interval",
                  "type": "int",
                  "level": "advanced",
                  "desc": "User quota sync interval",
                  "long_desc": "Time period for accumulating modified buckets before syncing entire user stats.",
                  "default": 86400,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_user_quota_sync_wait_time",
                  "type": "int",
                  "level": "advanced",
                  "desc": "User quota full-sync wait time",
                  "long_desc": "Minimum time between two full stats sync for non-idle users.",
                  "default": 86400,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_verify_ssl",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "Should RGW verify SSL when connecing to a remote HTTP server",
                  "long_desc": "RGW can send requests to other RGW servers (e.g., in multi-site sync work). This configurable selects whether RGW should verify the certificate for the remote peer and host.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_keystone_verify_ssl"
                  ],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_website_routing_rules_max_num",
                  "type": "int",
                  "level": "advanced",
                  "desc": "Max number of website routing rules in a single request",
                  "long_desc": "",
                  "default": 50,
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rgw_zone",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Zone name",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_zonegroup",
                    "rgw_realm"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_zone_root_pool",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Zone root pool name",
                  "long_desc": "The zone root pool, is the pool where the RGW zone configuration located.",
                  "default": ".rgw.root",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_zonegroup_root_pool",
                    "rgw_realm_root_pool",
                    "rgw_period_root_pool"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_zonegroup",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Zonegroup name",
                  "long_desc": "",
                  "default": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_zone",
                    "rgw_realm"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rgw_zonegroup_root_pool",
                  "type": "str",
                  "level": "advanced",
                  "desc": "Zonegroup root pool",
                  "long_desc": "The zonegroup root pool, is the pool where the RGW zonegroup configuration located.",
                  "default": ".rgw.root",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "rgw"
                  ],
                  "see_also": [
                    "rgw_zone_root_pool",
                    "rgw_realm_root_pool",
                    "rgw_period_root_pool"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rocksdb_block_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "4096"
                },
                {
                  "name": "rocksdb_bloom_bits_per_key",
                  "type": "uint",
                  "level": "advanced",
                  "desc": "Number of bits per key to use for RocksDB's bloom filters.",
                  "long_desc": "RocksDB bloom filters can be used to quickly answer the question of whether or not a key may exist or definitely does not exist in a given RocksDB SST file without having to read all keys into memory.  Using a higher bit value decreases the likelihood of false positives at the expense of additional disk space and memory consumption when the filter is loaded into RAM.  The current default value of 20 was found to provide significant performance gains when getattr calls are made (such as during new object creation in bluestore) without significant memory overhead or cache pollution when combined with rocksdb partitioned index filters.  See: https://github.com/facebook/rocksdb/wiki/Partitioned-Index-Filters for more information.",
                  "default": 20,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rocksdb_cache_index_and_filter_blocks",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Whether to cache indices and filters in block cache",
                  "long_desc": "By default RocksDB will load an SST file's index and bloom filters into memory when it is opened and remove them from memory when an SST file is closed.  Thus, memory consumption by indices and bloom filters is directly tied to the number of concurrent SST files allowed to be kept open.  This option instead stores cached indicies and filters in the block cache where they directly compete with other cached data.  By default we set this option to true to better account for and bound rocksdb memory usage and keep filters in memory even when an SST file is closed.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rocksdb_cache_index_and_filter_blocks_with_high_priority",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Whether to cache indices and filters in the block cache with high priority",
                  "long_desc": "A downside of setting rocksdb_cache_index_and_filter_blocks to true is that regular data can push indices and filters out of memory.  Setting this option to true means they are cached with higher priority than other data and should typically stay in the block cache.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rocksdb_cache_row_ratio",
                  "type": "float",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 0,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rocksdb_cache_shard_bits",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 4,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rocksdb_cache_size",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "536870912"
                },
                {
                  "name": "rocksdb_cache_type",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "binned_lru",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rocksdb_collect_compaction_stats",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rocksdb_collect_extended_stats",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rocksdb_collect_memory_stats",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rocksdb_enable_rmrange",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rocksdb_index_type",
                  "type": "str",
                  "level": "dev",
                  "desc": "Type of index for SST files: binary_search, hash_search, two_level",
                  "long_desc": "This option controls the table index type.  binary_search is a space efficient index block that is optimized for block-search-based index. hash_search may improve prefix lookup performance at the expense of higher disk and memory usage and potentially slower compactions.  two_level is an experimental index type that uses two binary search indexes and works in conjunction with partition filters.  See: http://rocksdb.org/blog/2017/05/12/partitioned-index-filter.html",
                  "default": "binary_search",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "rocksdb_log_to_ceph_log",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rocksdb_metadata_block_size",
                  "type": "size",
                  "level": "dev",
                  "desc": "The block size for index partitions. (0 = rocksdb default)",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "4096"
                },
                {
                  "name": "rocksdb_partition_filters",
                  "type": "bool",
                  "level": "dev",
                  "desc": "(experimental) partition SST index/filters into smaller blocks",
                  "long_desc": "This is an experimental option for rocksdb that works in conjunction with two_level indices to avoid having to keep the entire filter/index in cache when cache_index_and_filter_blocks is true.  The idea is to keep a much smaller top-level index in heap/cache and then opportunistically cache the lower level indices.  See: https://github.com/facebook/rocksdb/wiki/Partitioned-Index-Filters",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rocksdb_perf",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "rocksdb_pin_l0_filter_and_index_blocks_in_cache",
                  "type": "bool",
                  "level": "dev",
                  "desc": "Whether to pin Level 0 indices and bloom filters in the block cache",
                  "long_desc": "A downside of setting rocksdb_cache_index_and_filter_blocks to true is that regular data can push indices and filters out of memory.  Setting this option to true means that level 0 SST files will always have their indices and filters pinned in the block cache.",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "run_dir",
                  "type": "str",
                  "level": "advanced",
                  "desc": "path for the 'run' directory for storing pid and socket files",
                  "long_desc": "",
                  "default": "/var/run/ceph",
                  "daemon_default": "",
                  "tags": [],
                  "services": [
                    "common"
                  ],
                  "see_also": [
                    "admin_socket"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "setgroup",
                  "type": "str",
                  "level": "advanced",
                  "desc": "gid or group name to switch to on startup",
                  "long_desc": "This is normally specified by the systemd unit file.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [
                    "service"
                  ],
                  "services": [
                    "mon",
                    "mgr",
                    "osd",
                    "mds"
                  ],
                  "see_also": [
                    "setuser"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "setuser",
                  "type": "str",
                  "level": "advanced",
                  "desc": "uid or user name to switch to on startup",
                  "long_desc": "This is normally specified by the systemd unit file.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [
                    "service"
                  ],
                  "services": [
                    "mon",
                    "mgr",
                    "osd",
                    "mds"
                  ],
                  "see_also": [
                    "setgroup"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "setuser_match_path",
                  "type": "str",
                  "level": "advanced",
                  "desc": "if set, setuser/setgroup is condition on this path matching ownership",
                  "long_desc": "If setuser or setgroup are specified, and this option is non-empty, then the uid/gid of the daemon will only be changed if the file or directory specified by this option has a matching uid and/or gid.  This exists primarily to allow switching to user ceph for OSDs to be conditional on whether the osd data contents have also been chowned after an upgrade.  This is normally specified by the systemd unit file.",
                  "default": "",
                  "daemon_default": "",
                  "tags": [
                    "service"
                  ],
                  "services": [
                    "mon",
                    "mgr",
                    "osd",
                    "mds"
                  ],
                  "see_also": [
                    "setuser",
                    "setgroup"
                  ],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                },
                {
                  "name": "target_max_misplaced_ratio",
                  "type": "float",
                  "level": "basic",
                  "desc": "Max ratio of misplaced objects to target when throttling data rebalancing activity",
                  "long_desc": "",
                  "default": 0.05,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "threadpool_default_timeout",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 60,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "threadpool_empty_queue_max_wait",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "throttler_perf_counter",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": true,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "xio_max_conns_per_portal",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 32,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "xio_max_send_inline",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "512"
                },
                {
                  "name": "xio_mp_max_1k",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "8192"
                },
                {
                  "name": "xio_mp_max_256",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "8192"
                },
                {
                  "name": "xio_mp_max_64",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "65536"
                },
                {
                  "name": "xio_mp_max_hint",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "4096"
                },
                {
                  "name": "xio_mp_max_page",
                  "type": "size",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": [],
                  "default": "4096"
                },
                {
                  "name": "xio_mp_min",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 128,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "xio_portal_threads",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 2,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "xio_queue_depth",
                  "type": "int",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": 128,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "xio_trace_mempool",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "xio_trace_msgcnt",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "xio_trace_xcon",
                  "type": "bool",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": false,
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": true,
                  "flags": []
                },
                {
                  "name": "xio_transport_type",
                  "type": "str",
                  "level": "advanced",
                  "desc": "",
                  "long_desc": "",
                  "default": "rdma",
                  "daemon_default": "",
                  "tags": [],
                  "services": [],
                  "see_also": [],
                  "enum_values": [],
                  "min": "",
                  "max": "",
                  "can_update_at_runtime": false,
                  "flags": []
                }
              ]
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "summary": "cluster config | 集群设置参数信息",
        "operationId": "CLUSTER_CONFIG",
        "tags": [
          "cluster"
        ],
        "description": "Return all configs about the Ceph cluster.\n\n---\n\n返回集群所有相关参数设定。"
      }
    },
    "/summary": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "health_status": {
                  "type": "string"
                },
                "mgr_id": {
                  "type": "string"
                },
                "have_mon_connection": {
                  "type": "boolean"
                },
                "executing_tasks": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "finished_tasks": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "version": {
                  "type": "string"
                },
                "rbd_mirroring": {
                  "type": "object",
                  "properties": {
                    "warnings": {
                      "type": "integer"
                    },
                    "errors": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "health_status": "HEALTH_OK",
                "mgr_id": "x",
                "have_mon_connection": true,
                "executing_tasks": [],
                "finished_tasks": [],
                "version": "ceph version 14.0.1-2176-g41d266b9b9 (41d266b9b957e35f90c4844823d540791a948d1c) nautilus (dev)",
                "rbd_mirroring": {
                  "warnings": 0,
                  "errors": 0
                }
              }
            }
          }
        },
        "summary": "cluster summary | 集群整体状态信息",
        "operationId": "CLUSTER_SUMMARY",
        "tags": [
          "cluster"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/rgw/status": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "available": {
                  "type": "boolean"
                },
                "message": {
                  "type": "null"
                }
              }
            },
            "examples": {
              "application/json": {
                "available": true,
                "message": null
              }
            }
          }
        },
        "summary": "rgw status | RGW整体状态信息",
        "operationId": "RGW_STATUS",
        "tags": [
          "rgw"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/rgw/daemon": {
      "get": {
        "summary": "rgw daemon info",
        "responses": {
          "200": {
            "description": "",
            "examples": {
              "application/json": [
                {
                  "id": "rgw",
                  "version": "ceph version 14.0.1-2176-g41d266b9b9 (41d266b9b957e35f90c4844823d540791a948d1c) nautilus (dev)",
                  "server_hostname": "ceph-dev"
                }
              ]
            },
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  },
                  "server_hostname": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "operationId": "RGW_DAEMON_INFO",
        "tags": [
          "rgw"
        ]
      }
    },
    "/rgw/daemon/{daemon_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "rgw_metadata": {
                  "type": "object",
                  "properties": {
                    "hostname": {
                      "type": "string"
                    },
                    "arch": {
                      "type": "string"
                    },
                    "ceph_release": {
                      "type": "string"
                    },
                    "ceph_version": {
                      "type": "string"
                    },
                    "ceph_version_short": {
                      "type": "string"
                    },
                    "cpu": {
                      "type": "string"
                    },
                    "distro": {
                      "type": "string"
                    },
                    "distro_description": {
                      "type": "string"
                    },
                    "distro_version": {
                      "type": "string"
                    },
                    "frontend_config#0": {
                      "type": "string"
                    },
                    "frontend_type#0": {
                      "type": "string"
                    },
                    "kernel_description": {
                      "type": "string"
                    },
                    "kernel_version": {
                      "type": "string"
                    },
                    "mem_swap_kb": {
                      "type": "string"
                    },
                    "mem_total_kb": {
                      "type": "string"
                    },
                    "num_handles": {
                      "type": "string"
                    },
                    "os": {
                      "type": "string"
                    },
                    "pid": {
                      "type": "string"
                    },
                    "zone_id": {
                      "type": "string"
                    },
                    "zone_name": {
                      "type": "string"
                    },
                    "zonegroup_id": {
                      "type": "string"
                    },
                    "zonegroup_name": {
                      "type": "string"
                    }
                  }
                },
                "rgw_id": {
                  "type": "string"
                },
                "rgw_status": {
                  "type": "object",
                  "properties": {
                    "current_sync": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "rgw_metadata": {
                  "hostname": "ceph-dev",
                  "arch": "x86_64",
                  "ceph_release": "nautilus",
                  "ceph_version": "ceph version 14.0.1-2176-g41d266b9b9 (41d266b9b957e35f90c4844823d540791a948d1c) nautilus (dev)",
                  "ceph_version_short": "14.0.1-2176-g41d266b9b9",
                  "cpu": "Intel(R) Core(TM) i5-5200U CPU @ 2.20GHz",
                  "distro": "opensuse-tumbleweed",
                  "distro_description": "openSUSE Tumbleweed",
                  "distro_version": "20181224",
                  "frontend_config#0": "civetweb port=8000",
                  "frontend_type#0": "civetweb",
                  "kernel_description": "#1 SMP Mon Dec 3 16:46:15 UTC 2018 (b91289f)",
                  "kernel_version": "4.12.14-lp150.12.28-default",
                  "mem_swap_kb": "0",
                  "mem_total_kb": "11982896",
                  "num_handles": "1",
                  "os": "Linux",
                  "pid": "2700",
                  "zone_id": "f921eb2a-8873-4692-a351-62dc1eca43e7",
                  "zone_name": "default",
                  "zonegroup_id": "ae093ce9-8cb8-4337-83fc-f8c5e8918161",
                  "zonegroup_name": "default"
                },
                "rgw_id": "rgw",
                "rgw_status": {
                  "current_sync": "[]"
                }
              }
            }
          }
        },
        "summary": "rgw daemon detail",
        "operationId": "RGW_DAEMON_DETAIL",
        "tags": [
          "rgw"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      },
      "parameters": [
        {
          "name": "daemon_id",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    },
    "/rgw/user": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "application/json": [
                "56789abcdef0123456789abcdef0123456789abcdef0123456789abcdef01234",
                "testx$9876543210abcdef0123456789abcdef0123456789abcdef0123456789abcdef",
                "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef",
                "test",
                "testid",
                "dev"
              ]
            }
          }
        },
        "summary": "rgw user list",
        "operationId": "RGW_USER_LIST",
        "tags": [
          "rgw"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "tenant": {
                  "type": "string"
                },
                "user_id": {
                  "type": "string"
                },
                "display_name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "suspended": {
                  "type": "integer"
                },
                "max_buckets": {
                  "type": "integer"
                },
                "system": {
                  "type": "boolean"
                },
                "op_mask": {
                  "type": "string"
                },
                "subusers": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "keys": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "user": {
                        "type": "string"
                      },
                      "access_key": {
                        "type": "string"
                      },
                      "secret_key": {
                        "type": "string"
                      }
                    }
                  }
                },
                "swift_keys": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "caps": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "uid": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "application/json": {
                "tenant": "",
                "user_id": "tt",
                "display_name": "tof9we",
                "email": "",
                "suspended": 0,
                "max_buckets": 1000,
                "system": false,
                "op_mask": "read, write, delete",
                "subusers": [],
                "keys": [
                  {
                    "user": "tt",
                    "access_key": "3UM94V046X39099FHJ2C",
                    "secret_key": "8oCnOR0lyR5nwM68Zc8ZO0O0PDZPFesdYdDPDfbt"
                  }
                ],
                "swift_keys": [],
                "caps": [],
                "uid": "tt"
              }
            }
          }
        },
        "summary": "rgw user create",
        "operationId": "RGW_USER_CREATE",
        "tags": [
          "rgw"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "uid",
            "type": "string"
          },
          {
            "in": "query",
            "name": "display_name",
            "type": "string"
          },
          {
            "in": "query",
            "name": "suspended",
            "type": "boolean",
            "default": false
          },
          {
            "in": "query",
            "name": "email",
            "type": "string",
            "format": "email"
          },
          {
            "in": "query",
            "name": "max_buckets",
            "type": "integer",
            "default": 1000
          },
          {
            "in": "query",
            "name": "generate_key",
            "type": "boolean",
            "default": true
          },
          {
            "in": "query",
            "name": "access_key",
            "type": "string"
          },
          {
            "in": "query",
            "name": "secret_key",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/rgw/user/{user_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "tenant": {
                  "type": "string"
                },
                "user_id": {
                  "type": "string"
                },
                "display_name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "suspended": {
                  "type": "integer"
                },
                "max_buckets": {
                  "type": "integer"
                },
                "system": {
                  "type": "boolean"
                },
                "op_mask": {
                  "type": "string"
                },
                "subusers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "permissions": {
                        "type": "string"
                      }
                    }
                  }
                },
                "keys": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "swift_keys": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "user": {
                        "type": "string"
                      },
                      "secret_key": {
                        "type": "string"
                      }
                    }
                  }
                },
                "caps": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "uid": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "application/json": {
                "tenant": "",
                "user_id": "test",
                "display_name": "Tester-Subuser",
                "email": "",
                "suspended": 0,
                "max_buckets": 1000,
                "system": false,
                "op_mask": "read, write, delete",
                "subusers": [
                  {
                    "id": "test:tester",
                    "permissions": "full-control"
                  }
                ],
                "keys": [],
                "swift_keys": [
                  {
                    "user": "test:tester",
                    "secret_key": "testing"
                  }
                ],
                "caps": [],
                "uid": "test"
              }
            }
          }
        },
        "operationId": "RGW_USER_DETAIL",
        "summary": "rgw user detail",
        "tags": [
          "rgw"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      },
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "type": "string",
          "required": true
        }
      ],
      "delete": {
        "responses": {
          "204": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "summary": "rgw user delete",
        "operationId": "RGW_USER_DELETE",
        "tags": [
          "rgw"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/rgw/user/{user_id}/quota": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "bucket_quota": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean"
                    },
                    "check_on_raw": {
                      "type": "boolean"
                    },
                    "max_size": {
                      "type": "integer"
                    },
                    "max_size_kb": {
                      "type": "integer"
                    },
                    "max_objects": {
                      "type": "integer"
                    }
                  }
                },
                "user_quota": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean"
                    },
                    "check_on_raw": {
                      "type": "boolean"
                    },
                    "max_size": {
                      "type": "integer"
                    },
                    "max_size_kb": {
                      "type": "integer"
                    },
                    "max_objects": {
                      "type": "integer"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "bucket_quota": {
                  "enabled": false,
                  "check_on_raw": false,
                  "max_size": -1,
                  "max_size_kb": 0,
                  "max_objects": -1
                },
                "user_quota": {
                  "enabled": false,
                  "check_on_raw": false,
                  "max_size": -1,
                  "max_size_kb": 0,
                  "max_objects": -1
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "tags": [
          "rgw"
        ],
        "summary": "rgw user quota",
        "operationId": "RGW_USER_QUOTA"
      },
      "parameters": [
        {
          "name": "user_id",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    },
    "/rgw/bucket": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {
              "application/json": [
                "test"
              ]
            }
          }
        },
        "summary": "rgw bucket list",
        "operationId": "RGW_BUCKET_LIST",
        "tags": [
          "rgw"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "summary": "rgw bucket create",
        "operationId": "RGW_BUCKET_CREATE",
        "tags": [
          "rgw"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "bucket",
            "type": "string",
            "required": true
          },
          {
            "in": "query",
            "name": "uid",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/rgw/bucket/{bucket_name}": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "bucket": {
                  "type": "string"
                },
                "tenant": {
                  "type": "string"
                },
                "zonegroup": {
                  "type": "string"
                },
                "placement_rule": {
                  "type": "string"
                },
                "explicit_placement": {
                  "type": "object",
                  "properties": {
                    "data_pool": {
                      "type": "string"
                    },
                    "data_extra_pool": {
                      "type": "string"
                    },
                    "index_pool": {
                      "type": "string"
                    }
                  }
                },
                "id": {
                  "type": "string"
                },
                "marker": {
                  "type": "string"
                },
                "index_type": {
                  "type": "string"
                },
                "owner": {
                  "type": "string"
                },
                "ver": {
                  "type": "string"
                },
                "master_ver": {
                  "type": "string"
                },
                "mtime": {
                  "type": "string"
                },
                "max_marker": {
                  "type": "string"
                },
                "usage": {
                  "type": "object"
                },
                "bucket_quota": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean"
                    },
                    "check_on_raw": {
                      "type": "boolean"
                    },
                    "max_size": {
                      "type": "integer"
                    },
                    "max_size_kb": {
                      "type": "integer"
                    },
                    "max_objects": {
                      "type": "integer"
                    }
                  }
                },
                "bid": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "application/json": {
                "bucket": "test",
                "tenant": "",
                "zonegroup": "0899224d-0753-4435-945c-a8df6ad6d349",
                "placement_rule": "default-placement",
                "explicit_placement": {
                  "data_pool": "",
                  "data_extra_pool": "",
                  "index_pool": ""
                },
                "id": "80a83936-c218-443a-9682-df71985048af.34241.1",
                "marker": "80a83936-c218-443a-9682-df71985048af.34241.1",
                "index_type": "Normal",
                "owner": "dev",
                "ver": "0#1",
                "master_ver": "0#0",
                "mtime": "2019-01-08 08:58:17.878844",
                "max_marker": "0#",
                "usage": {},
                "bucket_quota": {
                  "enabled": false,
                  "check_on_raw": false,
                  "max_size": -1,
                  "max_size_kb": 0,
                  "max_objects": -1
                },
                "bid": "test"
              }
            }
          }
        },
        "summary": "rgw bucket detail",
        "operationId": "RGW_BUCKET_DETAIL",
        "tags": [
          "rgw"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      },
      "parameters": [
        {
          "name": "bucket_name",
          "in": "path",
          "type": "string",
          "required": true
        }
      ],
      "post": {
        "responses": {
          "200": {
            "description": ""
          }
        },
        "summary": "rgw bucket change owner",
        "operationId": "RGW_BUCKET_CHANGE_OWNER",
        "tags": [
          "rgw"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "bucket_id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "uid",
            "type": "string"
          },
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "summary": "rgw bucket delete",
        "operationId": "RGW_BUCKET_DELETE",
        "tags": [
          "rgw"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "in": "query",
            "name": "purge_objects",
            "type": "boolean",
            "default": true,
            "required": true
          }
        ]
      }
    },
    "/cephfs": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "mdsmap": {
                    "type": "object",
                    "properties": {
                      "epoch": {
                        "type": "integer"
                      },
                      "flags": {
                        "type": "integer"
                      },
                      "ever_allowed_features": {
                        "type": "integer"
                      },
                      "explicitly_allowed_features": {
                        "type": "integer"
                      },
                      "tableserver": {
                        "type": "integer"
                      },
                      "root": {
                        "type": "integer"
                      },
                      "session_timeout": {
                        "type": "integer"
                      },
                      "session_autoclose": {
                        "type": "integer"
                      },
                      "max_file_size": {
                        "type": "integer"
                      },
                      "last_failure": {
                        "type": "integer"
                      },
                      "last_failure_osd_epoch": {
                        "type": "integer"
                      },
                      "compat": {
                        "type": "object",
                        "properties": {
                          "compat": {
                            "type": "object"
                          },
                          "ro_compat": {
                            "type": "object"
                          },
                          "incompat": {
                            "type": "object",
                            "properties": {
                              "feature_1": {
                                "type": "string"
                              },
                              "feature_2": {
                                "type": "string"
                              },
                              "feature_3": {
                                "type": "string"
                              },
                              "feature_4": {
                                "type": "string"
                              },
                              "feature_5": {
                                "type": "string"
                              },
                              "feature_6": {
                                "type": "string"
                              },
                              "feature_8": {
                                "type": "string"
                              },
                              "feature_9": {
                                "type": "string"
                              },
                              "feature_10": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "max_mds": {
                        "type": "integer"
                      },
                      "in": {
                        "type": "array",
                        "items": {
                          "type": "integer"
                        }
                      },
                      "up": {
                        "type": "object",
                        "properties": {
                          "mds_0": {
                            "type": "integer"
                          }
                        }
                      },
                      "failed": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "damaged": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "stopped": {
                        "type": "array",
                        "items": {
                          "type": "object"
                        }
                      },
                      "info": {
                        "type": "object",
                        "properties": {
                          "gid_34163": {
                            "type": "object",
                            "properties": {
                              "gid": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "rank": {
                                "type": "integer"
                              },
                              "incarnation": {
                                "type": "integer"
                              },
                              "state_seq": {
                                "type": "integer"
                              },
                              "addrs": {
                                "type": "object",
                                "properties": {
                                  "addrvec": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string"
                                        },
                                        "nonce": {
                                          "type": "integer"
                                        },
                                        "addr": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "standby_for_rank": {
                                "type": "integer"
                              },
                              "standby_for_fscid": {
                                "type": "integer"
                              },
                              "standby_for_name": {
                                "type": "string"
                              },
                              "standby_replay": {
                                "type": "boolean"
                              },
                              "export_targets": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "features": {
                                "type": "integer"
                              },
                              "state": {
                                "type": "string"
                              },
                              "addr": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "data_pools": {
                        "type": "array",
                        "items": {
                          "type": "integer"
                        }
                      },
                      "metadata_pool": {
                        "type": "integer"
                      },
                      "enabled": {
                        "type": "boolean"
                      },
                      "fs_name": {
                        "type": "string"
                      },
                      "balancer": {
                        "type": "string"
                      },
                      "standby_count_wanted": {
                        "type": "integer"
                      },
                      "created": {
                        "type": "string"
                      },
                      "modified": {
                        "type": "string"
                      },
                      "min_compat_client": {
                        "type": "string"
                      }
                    }
                  },
                  "id": {
                    "type": "integer"
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "mdsmap": {
                    "epoch": 6,
                    "flags": 18,
                    "ever_allowed_features": 0,
                    "explicitly_allowed_features": 0,
                    "tableserver": 0,
                    "root": 0,
                    "session_timeout": 60,
                    "session_autoclose": 300,
                    "max_file_size": 1099511627776,
                    "last_failure": 0,
                    "last_failure_osd_epoch": 0,
                    "compat": {
                      "compat": {},
                      "ro_compat": {},
                      "incompat": {
                        "feature_1": "base v0.20",
                        "feature_2": "client writeable ranges",
                        "feature_3": "default file layouts on dirs",
                        "feature_4": "dir inode in separate object",
                        "feature_5": "mds uses versioned encoding",
                        "feature_6": "dirfrag is stored in omap",
                        "feature_8": "no anchor table",
                        "feature_9": "file layout v2",
                        "feature_10": "snaprealm v2"
                      }
                    },
                    "max_mds": 1,
                    "in": [
                      0
                    ],
                    "up": {
                      "mds_0": 34163
                    },
                    "failed": [],
                    "damaged": [],
                    "stopped": [],
                    "info": {
                      "gid_34163": {
                        "gid": 34163,
                        "name": "a",
                        "rank": 0,
                        "incarnation": 5,
                        "state_seq": 4,
                        "addrs": {
                          "addrvec": [
                            {
                              "type": "legacy",
                              "nonce": 2648213537,
                              "addr": "10.42.0.1:6813"
                            }
                          ]
                        },
                        "standby_for_rank": -1,
                        "standby_for_fscid": -1,
                        "standby_for_name": "",
                        "standby_replay": false,
                        "export_targets": [],
                        "features": 4611087854031143000,
                        "state": "up:active",
                        "addr": "10.42.0.1:6813/2648213537"
                      }
                    },
                    "data_pools": [
                      2
                    ],
                    "metadata_pool": 1,
                    "enabled": true,
                    "fs_name": "a",
                    "balancer": "",
                    "standby_count_wanted": 1,
                    "created": "2019-01-08 07:53:05.350960",
                    "modified": "2019-01-08 07:53:06.694651",
                    "min_compat_client": "-1 (unspecified)"
                  },
                  "id": 1
                }
              ]
            }
          }
        },
        "summary": "cephfs info",
        "operationId": "CEPHFS_INFO",
        "tags": [
          "cephfs"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/cephfs/{cephfs_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "cephfs": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "client_count": {
                      "type": "integer"
                    },
                    "ranks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "rank": {
                            "type": "integer"
                          },
                          "state": {
                            "type": "string"
                          },
                          "mds": {
                            "type": "string"
                          },
                          "activity": {
                            "type": "integer"
                          },
                          "dns": {
                            "type": "integer"
                          },
                          "inos": {
                            "type": "integer"
                          }
                        }
                      }
                    },
                    "pools": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "pool": {
                            "type": "string"
                          },
                          "type": {
                            "type": "string"
                          },
                          "used": {
                            "type": "integer"
                          },
                          "avail": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                },
                "standbys": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                },
                "versions": {
                  "type": "object",
                  "properties": {
                    "ceph version 14.0.1-2176-g41d266b9b9 (41d266b9b957e35f90c4844823d540791a948d1c) nautilus (dev)": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": "{\n    \"cephfs\": {\n        \"id\": 1,\n        \"name\": \"a\",\n        \"client_count\": 0,\n        \"ranks\": [\n            {\n                \"rank\": 0,\n                \"state\": \"active\",\n                \"mds\": \"a\",\n                \"activity\": 0,\n                \"dns\": 10,\n                \"inos\": 13\n            }\n        ],\n        \"pools\": [\n            {\n                \"pool\": \"cephfs.a.meta\",\n                \"type\": \"metadata\",\n                \"used\": 1572864,\n                \"avail\": 9546390528\n            },\n            {\n                \"pool\": \"cephfs.a.data\",\n                \"type\": \"data\",\n                \"used\": 0,\n                \"avail\": 9546390528\n            }\n        ]\n    },\n    \"standbys\": [\n        {\n            \"name\": \"c\"\n        },\n        {\n            \"name\": \"b\"\n        }\n    ],\n    \"versions\": {\n        \"ceph version 14.0.1-2176-g41d266b9b9 (41d266b9b957e35f90c4844823d540791a948d1c) nautilus (dev)\": [\n            \"a\",\n            \"c\",\n            \"b\"\n        ]\n    }\n}{}"
            }
          }
        },
        "summary": "cephfs detail",
        "operationId": "CEPHFS_DETAIL",
        "tags": [
          "cephfs"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      },
      "parameters": [
        {
          "name": "cephfs_id",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    },
    "/cephfs/{cephfs_id}/clients": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer"
                },
                "data": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 0,
                "data": []
              }
            }
          }
        },
        "summary": "cephfs clients info",
        "operationId": "CEPHFS_CLIENTS_INFO",
        "tags": [
          "cephfs"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      },
      "parameters": [
        {
          "name": "cephfs_id",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    },
    "/cephfs/{cephfs_id}/mds_counters": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "a": {
                  "type": "object",
                  "properties": {
                    "mds_server.handle_client_request": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "mds_log.ev": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "mds_cache.num_strays": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "mds.exported": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "mds.exported_inodes": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "mds.imported": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "mds.imported_inodes": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "mds.inodes": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "mds.caps": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    },
                    "mds.subtrees": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "a": {
                  "mds_server.handle_client_request": [
                    [
                      1546937212,
                      0
                    ],
                    [
                      1546937217,
                      0
                    ],
                    [
                      1546937222,
                      0
                    ],
                    [
                      1546937227,
                      0
                    ],
                    [
                      1546937232,
                      0
                    ],
                    [
                      1546937237,
                      0
                    ],
                    [
                      1546937242,
                      0
                    ],
                    [
                      1546937247,
                      0
                    ],
                    [
                      1546937252,
                      0
                    ],
                    [
                      1546937257,
                      0
                    ],
                    [
                      1546937262,
                      0
                    ],
                    [
                      1546937267,
                      0
                    ],
                    [
                      1546937272,
                      0
                    ],
                    [
                      1546937277,
                      0
                    ],
                    [
                      1546937282,
                      0
                    ],
                    [
                      1546937287,
                      0
                    ],
                    [
                      1546937292,
                      0
                    ],
                    [
                      1546937297,
                      0
                    ],
                    [
                      1546937302,
                      0
                    ],
                    [
                      1546937307,
                      0
                    ]
                  ],
                  "mds_log.ev": [
                    [
                      1546937212,
                      1
                    ],
                    [
                      1546937217,
                      1
                    ],
                    [
                      1546937222,
                      1
                    ],
                    [
                      1546937227,
                      1
                    ],
                    [
                      1546937232,
                      1
                    ],
                    [
                      1546937237,
                      1
                    ],
                    [
                      1546937242,
                      1
                    ],
                    [
                      1546937247,
                      1
                    ],
                    [
                      1546937252,
                      1
                    ],
                    [
                      1546937257,
                      1
                    ],
                    [
                      1546937262,
                      1
                    ],
                    [
                      1546937267,
                      1
                    ],
                    [
                      1546937272,
                      1
                    ],
                    [
                      1546937277,
                      1
                    ],
                    [
                      1546937282,
                      1
                    ],
                    [
                      1546937287,
                      1
                    ],
                    [
                      1546937292,
                      1
                    ],
                    [
                      1546937297,
                      1
                    ],
                    [
                      1546937302,
                      1
                    ],
                    [
                      1546937307,
                      1
                    ]
                  ],
                  "mds_cache.num_strays": [
                    [
                      1546937212,
                      0
                    ],
                    [
                      1546937217,
                      0
                    ],
                    [
                      1546937222,
                      0
                    ],
                    [
                      1546937227,
                      0
                    ],
                    [
                      1546937232,
                      0
                    ],
                    [
                      1546937237,
                      0
                    ],
                    [
                      1546937242,
                      0
                    ],
                    [
                      1546937247,
                      0
                    ],
                    [
                      1546937252,
                      0
                    ],
                    [
                      1546937257,
                      0
                    ],
                    [
                      1546937262,
                      0
                    ],
                    [
                      1546937267,
                      0
                    ],
                    [
                      1546937272,
                      0
                    ],
                    [
                      1546937277,
                      0
                    ],
                    [
                      1546937282,
                      0
                    ],
                    [
                      1546937287,
                      0
                    ],
                    [
                      1546937292,
                      0
                    ],
                    [
                      1546937297,
                      0
                    ],
                    [
                      1546937302,
                      0
                    ],
                    [
                      1546937307,
                      0
                    ]
                  ],
                  "mds.exported": [],
                  "mds.exported_inodes": [
                    [
                      1546937212,
                      0
                    ],
                    [
                      1546937217,
                      0
                    ],
                    [
                      1546937222,
                      0
                    ],
                    [
                      1546937227,
                      0
                    ],
                    [
                      1546937232,
                      0
                    ],
                    [
                      1546937237,
                      0
                    ],
                    [
                      1546937242,
                      0
                    ],
                    [
                      1546937247,
                      0
                    ],
                    [
                      1546937252,
                      0
                    ],
                    [
                      1546937257,
                      0
                    ],
                    [
                      1546937262,
                      0
                    ],
                    [
                      1546937267,
                      0
                    ],
                    [
                      1546937272,
                      0
                    ],
                    [
                      1546937277,
                      0
                    ],
                    [
                      1546937282,
                      0
                    ],
                    [
                      1546937287,
                      0
                    ],
                    [
                      1546937292,
                      0
                    ],
                    [
                      1546937297,
                      0
                    ],
                    [
                      1546937302,
                      0
                    ],
                    [
                      1546937307,
                      0
                    ]
                  ],
                  "mds.imported": [],
                  "mds.imported_inodes": [
                    [
                      1546937212,
                      0
                    ],
                    [
                      1546937217,
                      0
                    ],
                    [
                      1546937222,
                      0
                    ],
                    [
                      1546937227,
                      0
                    ],
                    [
                      1546937232,
                      0
                    ],
                    [
                      1546937237,
                      0
                    ],
                    [
                      1546937242,
                      0
                    ],
                    [
                      1546937247,
                      0
                    ],
                    [
                      1546937252,
                      0
                    ],
                    [
                      1546937257,
                      0
                    ],
                    [
                      1546937262,
                      0
                    ],
                    [
                      1546937267,
                      0
                    ],
                    [
                      1546937272,
                      0
                    ],
                    [
                      1546937277,
                      0
                    ],
                    [
                      1546937282,
                      0
                    ],
                    [
                      1546937287,
                      0
                    ],
                    [
                      1546937292,
                      0
                    ],
                    [
                      1546937297,
                      0
                    ],
                    [
                      1546937302,
                      0
                    ],
                    [
                      1546937307,
                      0
                    ]
                  ],
                  "mds.inodes": [
                    [
                      1546937212,
                      10
                    ],
                    [
                      1546937217,
                      10
                    ],
                    [
                      1546937222,
                      10
                    ],
                    [
                      1546937227,
                      10
                    ],
                    [
                      1546937232,
                      10
                    ],
                    [
                      1546937237,
                      10
                    ],
                    [
                      1546937242,
                      10
                    ],
                    [
                      1546937247,
                      10
                    ],
                    [
                      1546937252,
                      10
                    ],
                    [
                      1546937257,
                      10
                    ],
                    [
                      1546937262,
                      10
                    ],
                    [
                      1546937267,
                      10
                    ],
                    [
                      1546937272,
                      10
                    ],
                    [
                      1546937277,
                      10
                    ],
                    [
                      1546937282,
                      10
                    ],
                    [
                      1546937287,
                      10
                    ],
                    [
                      1546937292,
                      10
                    ],
                    [
                      1546937297,
                      10
                    ],
                    [
                      1546937302,
                      10
                    ],
                    [
                      1546937307,
                      10
                    ]
                  ],
                  "mds.caps": [
                    [
                      1546937212,
                      0
                    ],
                    [
                      1546937217,
                      0
                    ],
                    [
                      1546937222,
                      0
                    ],
                    [
                      1546937227,
                      0
                    ],
                    [
                      1546937232,
                      0
                    ],
                    [
                      1546937237,
                      0
                    ],
                    [
                      1546937242,
                      0
                    ],
                    [
                      1546937247,
                      0
                    ],
                    [
                      1546937252,
                      0
                    ],
                    [
                      1546937257,
                      0
                    ],
                    [
                      1546937262,
                      0
                    ],
                    [
                      1546937267,
                      0
                    ],
                    [
                      1546937272,
                      0
                    ],
                    [
                      1546937277,
                      0
                    ],
                    [
                      1546937282,
                      0
                    ],
                    [
                      1546937287,
                      0
                    ],
                    [
                      1546937292,
                      0
                    ],
                    [
                      1546937297,
                      0
                    ],
                    [
                      1546937302,
                      0
                    ],
                    [
                      1546937307,
                      0
                    ]
                  ],
                  "mds.subtrees": [
                    [
                      1546937212,
                      2
                    ],
                    [
                      1546937217,
                      2
                    ],
                    [
                      1546937222,
                      2
                    ],
                    [
                      1546937227,
                      2
                    ],
                    [
                      1546937232,
                      2
                    ],
                    [
                      1546937237,
                      2
                    ],
                    [
                      1546937242,
                      2
                    ],
                    [
                      1546937247,
                      2
                    ],
                    [
                      1546937252,
                      2
                    ],
                    [
                      1546937257,
                      2
                    ],
                    [
                      1546937262,
                      2
                    ],
                    [
                      1546937267,
                      2
                    ],
                    [
                      1546937272,
                      2
                    ],
                    [
                      1546937277,
                      2
                    ],
                    [
                      1546937282,
                      2
                    ],
                    [
                      1546937287,
                      2
                    ],
                    [
                      1546937292,
                      2
                    ],
                    [
                      1546937297,
                      2
                    ],
                    [
                      1546937302,
                      2
                    ],
                    [
                      1546937307,
                      2
                    ]
                  ]
                }
              }
            }
          }
        },
        "summary": "cephfs counter",
        "operationId": "CEPHFS_COUNTER",
        "tags": [
          "cephfs"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      },
      "parameters": [
        {
          "name": "cephfs_id",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    },
    "/perf_counters/{service_type}/{service_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "service": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    }
                  }
                },
                "counters": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "value": {
                        "type": "integer"
                      },
                      "unit": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "performance mgr": {
                "service": {
                  "type": "mgr",
                  "id": "x"
                },
                "counters": [
                  {
                    "name": "objecter-0x555e395570c0.op_active",
                    "description": "Operations active",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "objecter-0x555e395570c0.op_r",
                    "description": "Read operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "objecter-0x555e395570c0.op_rmw",
                    "description": "Read-modify-write operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "objecter-0x555e395570c0.op_w",
                    "description": "Write operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "objecter.op_active",
                    "description": "Operations active",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "objecter.op_r",
                    "description": "Read operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "objecter.op_rmw",
                    "description": "Read-modify-write operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "objecter.op_w",
                    "description": "Write operations",
                    "value": 0,
                    "unit": "/s"
                  }
                ]
              },
              "performance rgw": {
                "service": {
                  "type": "rgw",
                  "id": "rgw"
                },
                "counters": [
                  {
                    "name": "objecter-0x558237c9a080.op_active",
                    "description": "Operations active",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "objecter-0x558237c9a080.op_r",
                    "description": "Read operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "objecter-0x558237c9a080.op_rmw",
                    "description": "Read-modify-write operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "objecter-0x558237c9a080.op_w",
                    "description": "Write operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "objecter.op_active",
                    "description": "Operations active",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "objecter.op_r",
                    "description": "Read operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "objecter.op_rmw",
                    "description": "Read-modify-write operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "objecter.op_w",
                    "description": "Write operations",
                    "value": 1.6,
                    "unit": "/s"
                  },
                  {
                    "name": "rgw.cache_hit",
                    "description": "Cache hits",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rgw.cache_miss",
                    "description": "Cache miss",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rgw.failed_req",
                    "description": "Aborted requests",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rgw.get",
                    "description": "Gets",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rgw.get_b",
                    "description": "Size of gets",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rgw.get_initial_lat",
                    "description": "Get latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rgw.keystone_token_cache_hit",
                    "description": "Keystone token cache hits",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rgw.keystone_token_cache_miss",
                    "description": "Keystone token cache miss",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rgw.put",
                    "description": "Puts",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rgw.put_b",
                    "description": "Size of puts",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rgw.put_initial_lat",
                    "description": "Put latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rgw.qactive",
                    "description": "Active requests queue",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "rgw.qlen",
                    "description": "Queue length",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "rgw.req",
                    "description": "Requests",
                    "value": 0,
                    "unit": "/s"
                  }
                ]
              },
              "performance mds": {
                "service": {
                  "type": "mds",
                  "id": "a"
                },
                "counters": [
                  {
                    "name": "mds.caps",
                    "description": "Capabilities",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds.dir_commit",
                    "description": "Directory commit",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds.dir_fetch",
                    "description": "Directory fetch",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds.dir_merge",
                    "description": "Directory merge",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds.dir_split",
                    "description": "Directory split",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds.exported_inodes",
                    "description": "Exported inodes",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds.forward",
                    "description": "Forwarding request",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds.imported_inodes",
                    "description": "Imported inodes",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds.inode_max",
                    "description": "Max inodes, cache size",
                    "value": 2147483647,
                    "unit": ""
                  },
                  {
                    "name": "mds.inodes",
                    "description": "Inodes",
                    "value": 10,
                    "unit": ""
                  },
                  {
                    "name": "mds.inodes_expired",
                    "description": "Inodes expired",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds.inodes_pinned",
                    "description": "Inodes pinned",
                    "value": 10,
                    "unit": ""
                  },
                  {
                    "name": "mds.inodes_with_caps",
                    "description": "Inodes with capabilities",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds.load_cent",
                    "description": "Load per cent",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds.openino_dir_fetch",
                    "description": "OpenIno incomplete directory fetchings",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds.reply_latency",
                    "description": "Reply latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds.request",
                    "description": "Requests",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds.subtrees",
                    "description": "Subtrees",
                    "value": 2,
                    "unit": ""
                  },
                  {
                    "name": "mds_cache.ireq_enqueue_scrub",
                    "description": "Internal Request type enqueue scrub",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_cache.ireq_exportdir",
                    "description": "Internal Request type export dir",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_cache.ireq_flush",
                    "description": "Internal Request type flush",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_cache.ireq_fragmentdir",
                    "description": "Internal Request type fragmentdir",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_cache.ireq_fragstats",
                    "description": "Internal Request type frag stats",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_cache.ireq_inodestats",
                    "description": "Internal Request type inode stats",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_cache.num_recovering_enqueued",
                    "description": "Files waiting for recovery",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds_cache.num_recovering_prioritized",
                    "description": "Files waiting for recovery with elevated priority",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds_cache.num_recovering_processing",
                    "description": "Files currently being recovered",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds_cache.num_strays",
                    "description": "Stray dentries",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds_cache.num_strays_delayed",
                    "description": "Stray dentries delayed",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds_cache.num_strays_enqueuing",
                    "description": "Stray dentries enqueuing for purge",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds_cache.recovery_completed",
                    "description": "File recoveries completed",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_cache.recovery_started",
                    "description": "File recoveries started",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_cache.strays_created",
                    "description": "Stray dentries created",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_cache.strays_enqueued",
                    "description": "Stray dentries enqueued for purge",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_cache.strays_migrated",
                    "description": "Stray dentries migrated",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_cache.strays_reintegrated",
                    "description": "Stray dentries reintegrated",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_log.ev",
                    "description": "Events",
                    "value": 1,
                    "unit": ""
                  },
                  {
                    "name": "mds_log.evadd",
                    "description": "Events submitted",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_log.evex",
                    "description": "Total expired events",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_log.evexd",
                    "description": "Current expired events",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds_log.evexg",
                    "description": "Expiring events",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds_log.evtrm",
                    "description": "Trimmed events",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_log.jlat",
                    "description": "Journaler flush latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_log.replayed",
                    "description": "Events replayed",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_log.seg",
                    "description": "Segments",
                    "value": 1,
                    "unit": ""
                  },
                  {
                    "name": "mds_log.segadd",
                    "description": "Segments added",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_log.segex",
                    "description": "Total expired segments",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_log.segexd",
                    "description": "Current expired segments",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds_log.segexg",
                    "description": "Expiring segments",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds_log.segtrm",
                    "description": "Trimmed segments",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_mem.cap",
                    "description": "Capabilities",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds_mem.cap+",
                    "description": "Capabilities added",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_mem.cap-",
                    "description": "Capabilities removed",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_mem.dir",
                    "description": "Directories",
                    "value": 12,
                    "unit": ""
                  },
                  {
                    "name": "mds_mem.dir+",
                    "description": "Directories opened",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_mem.dir-",
                    "description": "Directories closed",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_mem.dn",
                    "description": "Dentries",
                    "value": 10,
                    "unit": ""
                  },
                  {
                    "name": "mds_mem.dn+",
                    "description": "Dentries opened",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_mem.dn-",
                    "description": "Dentries closed",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_mem.heap",
                    "description": "Heap size",
                    "value": 305972,
                    "unit": ""
                  },
                  {
                    "name": "mds_mem.ino",
                    "description": "Inodes",
                    "value": 13,
                    "unit": ""
                  },
                  {
                    "name": "mds_mem.ino+",
                    "description": "Inodes opened",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_mem.ino-",
                    "description": "Inodes closed",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.cap_revoke_eviction",
                    "description": "Cap Revoke Client Eviction",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.handle_client_request",
                    "description": "Client requests",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.handle_client_session",
                    "description": "Client session messages",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.handle_slave_request",
                    "description": "Slave requests",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_create_latency",
                    "description": "Request type create latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_getattr_latency",
                    "description": "Request type get attribute latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_getfilelock_latency",
                    "description": "Request type get file lock latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_link_latency",
                    "description": "Request type link latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_lookup_latency",
                    "description": "Request type lookup latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_lookuphash_latency",
                    "description": "Request type lookup hash of inode latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_lookupino_latency",
                    "description": "Request type lookup inode latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_lookupname_latency",
                    "description": "Request type lookup name latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_lookupparent_latency",
                    "description": "Request type lookup parent latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_lookupsnap_latency",
                    "description": "Request type lookup snapshot latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_lssnap_latency",
                    "description": "Request type list snapshot latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_mkdir_latency",
                    "description": "Request type make directory latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_mknod_latency",
                    "description": "Request type make node latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_mksnap_latency",
                    "description": "Request type make snapshot latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_open_latency",
                    "description": "Request type open latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_readdir_latency",
                    "description": "Request type read directory latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_rename_latency",
                    "description": "Request type rename latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_renamesnap_latency",
                    "description": "Request type rename snapshot latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_rmdir_latency",
                    "description": "Request type remove directory latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_rmsnap_latency",
                    "description": "Request type remove snapshot latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_rmxattr_latency",
                    "description": "Request type remove extended attribute latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_setattr_latency",
                    "description": "Request type set attribute latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_setdirlayout_latency",
                    "description": "Request type set directory layout latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_setfilelock_latency",
                    "description": "Request type set file lock latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_setlayout_latency",
                    "description": "Request type set file layout latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_setxattr_latency",
                    "description": "Request type set extended attribute latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_symlink_latency",
                    "description": "Request type symbolic link latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_server.req_unlink_latency",
                    "description": "Request type unlink latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_sessions.average_load",
                    "description": "Average Load",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds_sessions.avg_session_uptime",
                    "description": "Average session uptime",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds_sessions.session_add",
                    "description": "Sessions added",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_sessions.session_count",
                    "description": "Session count",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds_sessions.session_remove",
                    "description": "Sessions removed",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mds_sessions.sessions_open",
                    "description": "Sessions currently open",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds_sessions.sessions_stale",
                    "description": "Sessions currently stale",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "mds_sessions.total_load",
                    "description": "Total Load",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "objecter.op_active",
                    "description": "Operations active",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "objecter.op_r",
                    "description": "Read operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "objecter.op_rmw",
                    "description": "Read-modify-write operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "objecter.op_w",
                    "description": "Write operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "purge_queue.pq_executed",
                    "description": "Purge queue tasks executed",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "purge_queue.pq_executing",
                    "description": "Purge queue tasks in flight",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "purge_queue.pq_executing_ops",
                    "description": "Purge queue ops in flight",
                    "value": 0,
                    "unit": ""
                  }
                ]
              },
              "performance osd": {
                "service": {
                  "type": "osd",
                  "id": "0"
                },
                "counters": [
                  {
                    "name": "bluefs.bytes_written_slow",
                    "description": "Bytes written to WAL/SSTs at slow device",
                    "value": 0,
                    "unit": "B/s"
                  },
                  {
                    "name": "bluefs.bytes_written_sst",
                    "description": "Bytes written to SSTs",
                    "value": 0,
                    "unit": "B/s"
                  },
                  {
                    "name": "bluefs.bytes_written_wal",
                    "description": "Bytes written to WAL",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "bluefs.db_total_bytes",
                    "description": "Total bytes (main db device)",
                    "value": 67100672,
                    "unit": ""
                  },
                  {
                    "name": "bluefs.db_used_bytes",
                    "description": "Used bytes (main db device)",
                    "value": 8380416,
                    "unit": ""
                  },
                  {
                    "name": "bluefs.log_bytes",
                    "description": "Size of the metadata log",
                    "value": 4005888,
                    "unit": ""
                  },
                  {
                    "name": "bluefs.logged_bytes",
                    "description": "Bytes written to the metadata log",
                    "value": 0,
                    "unit": "B/s"
                  },
                  {
                    "name": "bluefs.num_files",
                    "description": "File count",
                    "value": 10,
                    "unit": ""
                  },
                  {
                    "name": "bluefs.slow_total_bytes",
                    "description": "Total bytes (slow device)",
                    "value": 1073741824,
                    "unit": ""
                  },
                  {
                    "name": "bluefs.slow_used_bytes",
                    "description": "Used bytes (slow device)",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "bluefs.wal_total_bytes",
                    "description": "Total bytes (wal device)",
                    "value": 1048571904,
                    "unit": ""
                  },
                  {
                    "name": "bluefs.wal_used_bytes",
                    "description": "Used bytes (wal device)",
                    "value": 11530240,
                    "unit": ""
                  },
                  {
                    "name": "bluestore.commit_lat",
                    "description": "Average commit latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "bluestore.kv_final_lat",
                    "description": "Average kv_finalize thread latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "bluestore.kv_flush_lat",
                    "description": "Average kv_thread flush latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "bluestore.kv_sync_lat",
                    "description": "Average kv_sync thread latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "bluestore.read_lat",
                    "description": "Average read latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "bluestore.state_aio_wait_lat",
                    "description": "Average aio_wait state latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "bluestore.submit_lat",
                    "description": "Average submit latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "bluestore.throttle_lat",
                    "description": "Average submit throttle latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "objecter.op_active",
                    "description": "Operations active",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "objecter.op_r",
                    "description": "Read operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "objecter.op_rmw",
                    "description": "Read-modify-write operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "objecter.op_w",
                    "description": "Write operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.numpg",
                    "description": "Placement groups",
                    "value": 48,
                    "unit": ""
                  },
                  {
                    "name": "osd.numpg_removing",
                    "description": "Placement groups queued for local deletion",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "osd.op",
                    "description": "Client operations",
                    "value": 0.6,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_in_bytes",
                    "description": "Client operations total write size",
                    "value": 0,
                    "unit": "B/s"
                  },
                  {
                    "name": "osd.op_latency",
                    "description": "Latency of client operations (including queue time)",
                    "value": 1621339,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_out_bytes",
                    "description": "Client operations total read size",
                    "value": 0,
                    "unit": "B/s"
                  },
                  {
                    "name": "osd.op_prepare_latency",
                    "description": "Latency of client operations (excluding queue time and wait for finished)",
                    "value": 664260.4,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_process_latency",
                    "description": "Latency of client operations (excluding queue time)",
                    "value": 551571.4,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_r",
                    "description": "Client read operations",
                    "value": 0.6,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_r_latency",
                    "description": "Latency of read operation (including queue time)",
                    "value": 1621339,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_r_latency_out_bytes_histogram",
                    "description": "Histogram of operation latency (including queue time) + data read",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "osd.op_r_out_bytes",
                    "description": "Client data read",
                    "value": 0,
                    "unit": "B/s"
                  },
                  {
                    "name": "osd.op_r_prepare_latency",
                    "description": "Latency of read operations (excluding queue time and wait for finished)",
                    "value": 664260.4,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_r_process_latency",
                    "description": "Latency of read operation (excluding queue time)",
                    "value": 551571.4,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_rw",
                    "description": "Client read-modify-write operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_rw_in_bytes",
                    "description": "Client read-modify-write operations write in",
                    "value": 0,
                    "unit": "B/s"
                  },
                  {
                    "name": "osd.op_rw_latency",
                    "description": "Latency of read-modify-write operation (including queue time)",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_rw_latency_in_bytes_histogram",
                    "description": "Histogram of rw operation latency (including queue time) + data written",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "osd.op_rw_latency_out_bytes_histogram",
                    "description": "Histogram of rw operation latency (including queue time) + data read",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "osd.op_rw_out_bytes",
                    "description": "Client read-modify-write operations read out ",
                    "value": 0,
                    "unit": "B/s"
                  },
                  {
                    "name": "osd.op_rw_prepare_latency",
                    "description": "Latency of read-modify-write operations (excluding queue time and wait for finished)",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_rw_process_latency",
                    "description": "Latency of read-modify-write operation (excluding queue time)",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_w",
                    "description": "Client write operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_w_in_bytes",
                    "description": "Client data written",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_w_latency",
                    "description": "Latency of write operation (including queue time)",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_w_latency_in_bytes_histogram",
                    "description": "Histogram of operation latency (including queue time) + data written",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "osd.op_w_prepare_latency",
                    "description": "Latency of write operations (excluding queue time and wait for finished)",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_w_process_latency",
                    "description": "Latency of write operation (excluding queue time)",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.op_wip",
                    "description": "Replication operations currently being processed (primary)",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "osd.recovery_bytes",
                    "description": "recovery bytes",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.recovery_ops",
                    "description": "Started recovery operations",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "osd.stat_bytes",
                    "description": "OSD size",
                    "value": 10804518912,
                    "unit": ""
                  },
                  {
                    "name": "osd.stat_bytes_used",
                    "description": "Used space",
                    "value": 1145954304,
                    "unit": ""
                  }
                ]
              },
              "performance mon": {
                "service": {
                  "type": "mon",
                  "id": "a"
                },
                "counters": [
                  {
                    "name": "mon.election_call",
                    "description": "Elections started",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mon.election_lose",
                    "description": "Elections lost",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mon.election_win",
                    "description": "Elections won",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mon.num_elections",
                    "description": "Elections participated in",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mon.num_sessions",
                    "description": "Open sessions",
                    "value": 8,
                    "unit": ""
                  },
                  {
                    "name": "mon.session_add",
                    "description": "Created sessions",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mon.session_rm",
                    "description": "Removed sessions",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "mon.session_trim",
                    "description": "Trimmed sessions",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.accept_timeout",
                    "description": "Accept timeouts",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.begin",
                    "description": "Started and handled begins",
                    "value": 0.4,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.begin_bytes",
                    "description": "Data in transaction on begin",
                    "value": 3183.2,
                    "unit": "B/s"
                  },
                  {
                    "name": "paxos.begin_keys",
                    "description": "Keys in transaction on begin",
                    "value": 1.2,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.begin_latency",
                    "description": "Latency of begin operation",
                    "value": 799998,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.collect",
                    "description": "Peon collects",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.collect_bytes",
                    "description": "Data in transaction on peon collect",
                    "value": 0,
                    "unit": "B/s"
                  },
                  {
                    "name": "paxos.collect_keys",
                    "description": "Keys in transaction on peon collect",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.collect_latency",
                    "description": "Peon collect latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.collect_timeout",
                    "description": "Collect timeouts",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.collect_uncommitted",
                    "description": "Uncommitted values in started and handled collects",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.commit",
                    "description": "Commits",
                    "value": 0.4,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.commit_bytes",
                    "description": "Data in transaction on commit",
                    "value": 3134.8,
                    "unit": "B/s"
                  },
                  {
                    "name": "paxos.commit_keys",
                    "description": "Keys in transaction on commit",
                    "value": 1.6,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.commit_latency",
                    "description": "Commit latency",
                    "value": 436242.4,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.lease_ack_timeout",
                    "description": "Lease acknowledgement timeouts",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.lease_timeout",
                    "description": "Lease timeouts",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.new_pn",
                    "description": "New proposal number queries",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.new_pn_latency",
                    "description": "New proposal number getting latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.refresh",
                    "description": "Refreshes",
                    "value": 0.4,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.refresh_latency",
                    "description": "Refresh latency",
                    "value": 3199991.4,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.restart",
                    "description": "Restarts",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.share_state",
                    "description": "Sharings of state",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.share_state_bytes",
                    "description": "Data in shared state",
                    "value": 0,
                    "unit": "B/s"
                  },
                  {
                    "name": "paxos.share_state_keys",
                    "description": "Keys in shared state",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.start_leader",
                    "description": "Starts in leader role",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.start_peon",
                    "description": "Starts in peon role",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.store_state",
                    "description": "Store a shared state on disk",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.store_state_bytes",
                    "description": "Data in transaction in stored state",
                    "value": 0,
                    "unit": "B/s"
                  },
                  {
                    "name": "paxos.store_state_keys",
                    "description": "Keys in transaction in stored state",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "paxos.store_state_latency",
                    "description": "Storing state latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rocksdb.compact",
                    "description": "Compactions",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rocksdb.compact_queue_len",
                    "description": "Length of compaction queue",
                    "value": 0,
                    "unit": ""
                  },
                  {
                    "name": "rocksdb.compact_queue_merge",
                    "description": "Mergings of ranges in compaction queue",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rocksdb.compact_range",
                    "description": "Compactions by range",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rocksdb.get",
                    "description": "Gets",
                    "value": 15.2,
                    "unit": "/s"
                  },
                  {
                    "name": "rocksdb.get_latency",
                    "description": "Get latency",
                    "value": 451621.2,
                    "unit": "/s"
                  },
                  {
                    "name": "rocksdb.rocksdb_write_delay_time",
                    "description": "Rocksdb write delay time",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rocksdb.rocksdb_write_memtable_time",
                    "description": "Rocksdb write memtable time",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rocksdb.rocksdb_write_pre_and_post_time",
                    "description": "total time spent on writing a record, excluding write process",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rocksdb.rocksdb_write_wal_time",
                    "description": "Rocksdb write wal time",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rocksdb.submit_latency",
                    "description": "Submit Latency",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rocksdb.submit_sync_latency",
                    "description": "Submit Sync Latency",
                    "value": 1123167.6,
                    "unit": "/s"
                  },
                  {
                    "name": "rocksdb.submit_transaction",
                    "description": "Submit transactions",
                    "value": 0,
                    "unit": "/s"
                  },
                  {
                    "name": "rocksdb.submit_transaction_sync",
                    "description": "Submit transactions sync",
                    "value": 0.8,
                    "unit": "/s"
                  }
                ]
              }
            }
          }
        },
        "summary": "performance info",
        "operationId": "PERFORMANCE_INFO",
        "tags": [
          "performance"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      },
      "parameters": [
        {
          "name": "service_type",
          "in": "path",
          "type": "string",
          "required": true,
          "description": "- mon\n- mds\n- osd\n- mgr\n- rgw"
        },
        {
          "name": "service_id",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    },
    "/logs/all": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "clog": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "rank": {
                        "type": "string"
                      },
                      "addrs": {
                        "type": "object",
                        "properties": {
                          "addrvec": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string"
                                },
                                "addr": {
                                  "type": "string"
                                },
                                "nonce": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      },
                      "stamp": {
                        "type": "string"
                      },
                      "seq": {
                        "type": "integer"
                      },
                      "channel": {
                        "type": "string"
                      },
                      "priority": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                },
                "audit_log": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      },
                      "rank": {
                        "type": "string"
                      },
                      "addrs": {
                        "type": "object",
                        "properties": {
                          "addrvec": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string"
                                },
                                "addr": {
                                  "type": "string"
                                },
                                "nonce": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      },
                      "stamp": {
                        "type": "string"
                      },
                      "seq": {
                        "type": "integer"
                      },
                      "channel": {
                        "type": "string"
                      },
                      "priority": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "clog": [
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 08:00:00.000564",
                    "seq": 193,
                    "channel": "cluster",
                    "priority": "[INF]",
                    "message": "overall HEALTH_OK"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:53:05.707158",
                    "seq": 130,
                    "channel": "cluster",
                    "priority": "[INF]",
                    "message": "daemon mds.a is now active in filesystem a as rank 0"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:53:05.351016",
                    "seq": 126,
                    "channel": "cluster",
                    "priority": "[INF]",
                    "message": "daemon mds.a assigned to filesystem a as rank 0"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:52:57.032943",
                    "seq": 100,
                    "channel": "cluster",
                    "priority": "[INF]",
                    "message": "osd.2 10.42.0.1:6809/12126 boot"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:52:48.337734",
                    "seq": 78,
                    "channel": "cluster",
                    "priority": "[INF]",
                    "message": "osd.1 10.42.0.1:6805/11817 boot"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:52:39.431569",
                    "seq": 62,
                    "channel": "cluster",
                    "priority": "[INF]",
                    "message": "osd.0 10.42.0.1:6801/11508 boot"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:52:27.699400",
                    "seq": 31,
                    "channel": "cluster",
                    "priority": "[INF]",
                    "message": "Manager daemon x is now available"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:52:27.648045",
                    "seq": 27,
                    "channel": "cluster",
                    "priority": "[INF]",
                    "message": "Activating manager daemon x"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:52:23.601443",
                    "seq": 22,
                    "channel": "cluster",
                    "priority": "[INF]",
                    "message": "overall HEALTH_OK"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:52:23.581619",
                    "seq": 17,
                    "channel": "cluster",
                    "priority": "[INF]",
                    "message": "mon.a is new leader, mons a,b,c in quorum (ranks 0,1,2)"
                  }
                ],
                "audit_log": [
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:58:36.395402",
                    "seq": 174,
                    "channel": "audit",
                    "priority": "[INF]",
                    "message": "from='mgr.34100 10.42.0.1:43650/11128' entity='mgr.x' cmd='[{\"prefix\":\"config-key set\",\"key\":\"mgr/dashboard/jwt_token_black_list\",\"val\":\"{\\\"d6c8199f-4bb8-4e5a-8062-204cf217862d\\\": 1546963039}\"}]': finished"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:58:36.366041",
                    "seq": 173,
                    "channel": "audit",
                    "priority": "[INF]",
                    "message": "from='mgr.34100 10.42.0.1:43650/11128' entity='mgr.x' cmd=[{\"prefix\":\"config-key set\",\"key\":\"mgr/dashboard/jwt_token_black_list\",\"val\":\"{\\\"d6c8199f-4bb8-4e5a-8062-204cf217862d\\\": 1546963039}\"}]: dispatch"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:57:15.497172",
                    "seq": 160,
                    "channel": "audit",
                    "priority": "[INF]",
                    "message": "from='mgr.34100 10.42.0.1:43650/11128' entity='mgr.x' cmd='[{\"prefix\":\"config-key set\",\"key\":\"mgr/dashboard/jwt_secret\",\"val\":\"ex4AbzUiaOct2TmN1UYXqw==\"}]': finished"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:57:15.477571",
                    "seq": 159,
                    "channel": "audit",
                    "priority": "[INF]",
                    "message": "from='mgr.34100 10.42.0.1:43650/11128' entity='mgr.x' cmd=[{\"prefix\":\"config-key set\",\"key\":\"mgr/dashboard/jwt_secret\",\"val\":\"ex4AbzUiaOct2TmN1UYXqw==\"}]: dispatch"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:53:20.851187",
                    "seq": 158,
                    "channel": "audit",
                    "priority": "[INF]",
                    "message": "from='mgr.34100 10.42.0.1:43650/11128' entity='mgr.x' cmd='[{\"prefix\":\"config set\",\"who\":\"mgr\",\"name\":\"mgr/dashboard/RGW_API_SECRET_KEY\",\"value\":\"pcOToUROuEMXDLisfLgmcPRPAtLkkawV1dOVctVW\"}]': finished"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:53:20.819711",
                    "seq": 157,
                    "channel": "audit",
                    "priority": "[INF]",
                    "message": "from='mgr.34100 10.42.0.1:43650/11128' entity='mgr.x' cmd=[{\"prefix\":\"config set\",\"who\":\"mgr\",\"name\":\"mgr/dashboard/RGW_API_SECRET_KEY\",\"value\":\"pcOToUROuEMXDLisfLgmcPRPAtLkkawV1dOVctVW\"}]: dispatch"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:53:19.776744",
                    "seq": 156,
                    "channel": "audit",
                    "priority": "[INF]",
                    "message": "from='mgr.34100 10.42.0.1:43650/11128' entity='mgr.x' cmd='[{\"prefix\":\"config set\",\"who\":\"mgr\",\"name\":\"mgr/dashboard/RGW_API_ACCESS_KEY\",\"value\":\"X5WVAOJFW718AZWZNEDQ\"}]': finished"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:53:19.752397",
                    "seq": 155,
                    "channel": "audit",
                    "priority": "[INF]",
                    "message": "from='mgr.34100 10.42.0.1:43650/11128' entity='mgr.x' cmd=[{\"prefix\":\"config set\",\"who\":\"mgr\",\"name\":\"mgr/dashboard/RGW_API_ACCESS_KEY\",\"value\":\"X5WVAOJFW718AZWZNEDQ\"}]: dispatch"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:53:18.562320",
                    "seq": 154,
                    "channel": "audit",
                    "priority": "[INF]",
                    "message": "from='mgr.34100 10.42.0.1:43650/11128' entity='mgr.x' cmd='[{\"prefix\":\"config set\",\"who\":\"mgr\",\"name\":\"mgr/dashboard/RGW_API_USER_ID\",\"value\":\"dev\"}]': finished"
                  },
                  {
                    "name": "mon.a",
                    "rank": "mon.0",
                    "addrs": {
                      "addrvec": [
                        {
                          "type": "legacy",
                          "addr": "10.42.0.1:40413",
                          "nonce": 0
                        }
                      ]
                    },
                    "stamp": "2019-01-08 07:53:18.528773",
                    "seq": 153,
                    "channel": "audit",
                    "priority": "[INF]",
                    "message": "from='mgr.34100 10.42.0.1:43650/11128' entity='mgr.x' cmd=[{\"prefix\":\"config set\",\"who\":\"mgr\",\"name\":\"mgr/dashboard/RGW_API_USER_ID\",\"value\":\"dev\"}]: dispatch"
                  }
                ]
              }
            }
          }
        },
        "summary": "logs all | 日志记录",
        "operationId": "LOGS_ALL",
        "tags": [
          "logs"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/pool": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "pool": {
                    "type": "integer"
                  },
                  "pool_name": {
                    "type": "string"
                  },
                  "flags": {
                    "type": "integer"
                  },
                  "flags_names": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "size": {
                    "type": "integer"
                  },
                  "min_size": {
                    "type": "integer"
                  },
                  "crush_rule": {
                    "type": "string"
                  },
                  "object_hash": {
                    "type": "integer"
                  },
                  "pg_autoscale_mode": {
                    "type": "string"
                  },
                  "pg_num": {
                    "type": "integer"
                  },
                  "pg_placement_num": {
                    "type": "integer"
                  },
                  "pg_placement_num_target": {
                    "type": "integer"
                  },
                  "pg_num_target": {
                    "type": "integer"
                  },
                  "pg_num_pending": {
                    "type": "integer"
                  },
                  "pg_num_dec_last_epoch_started": {
                    "type": "integer"
                  },
                  "pg_num_dec_last_epoch_clean": {
                    "type": "integer"
                  },
                  "auid": {
                    "type": "integer"
                  },
                  "snap_mode": {
                    "type": "string"
                  },
                  "snap_seq": {
                    "type": "integer"
                  },
                  "snap_epoch": {
                    "type": "integer"
                  },
                  "pool_snaps": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "quota_max_bytes": {
                    "type": "integer"
                  },
                  "quota_max_objects": {
                    "type": "integer"
                  },
                  "tiers": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "tier_of": {
                    "type": "integer"
                  },
                  "read_tier": {
                    "type": "integer"
                  },
                  "write_tier": {
                    "type": "integer"
                  },
                  "cache_mode": {
                    "type": "string"
                  },
                  "target_max_bytes": {
                    "type": "integer"
                  },
                  "target_max_objects": {
                    "type": "integer"
                  },
                  "cache_target_dirty_ratio_micro": {
                    "type": "integer"
                  },
                  "cache_target_dirty_high_ratio_micro": {
                    "type": "integer"
                  },
                  "cache_target_full_ratio_micro": {
                    "type": "integer"
                  },
                  "cache_min_flush_age": {
                    "type": "integer"
                  },
                  "cache_min_evict_age": {
                    "type": "integer"
                  },
                  "erasure_code_profile": {
                    "type": "string"
                  },
                  "hit_set_params": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      }
                    }
                  },
                  "hit_set_period": {
                    "type": "integer"
                  },
                  "hit_set_count": {
                    "type": "integer"
                  },
                  "use_gmt_hitset": {
                    "type": "boolean"
                  },
                  "min_read_recency_for_promote": {
                    "type": "integer"
                  },
                  "min_write_recency_for_promote": {
                    "type": "integer"
                  },
                  "hit_set_grade_decay_rate": {
                    "type": "integer"
                  },
                  "hit_set_search_last_n": {
                    "type": "integer"
                  },
                  "grade_table": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "stripe_width": {
                    "type": "integer"
                  },
                  "expected_num_objects": {
                    "type": "integer"
                  },
                  "fast_read": {
                    "type": "boolean"
                  },
                  "options": {
                    "type": "object"
                  },
                  "application_metadata": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "create_time": {
                    "type": "string"
                  },
                  "last_change": {
                    "type": "string"
                  },
                  "last_force_op_resend": {
                    "type": "string"
                  },
                  "last_force_op_resend_prenautilus": {
                    "type": "string"
                  },
                  "last_force_op_resend_preluminous": {
                    "type": "string"
                  },
                  "removed_snaps": {
                    "type": "string"
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "pool": 1,
                  "pool_name": "cephfs.a.meta",
                  "flags": 1,
                  "flags_names": "hashpspool",
                  "type": "replicated",
                  "size": 3,
                  "min_size": 1,
                  "crush_rule": "replicated_rule",
                  "object_hash": 2,
                  "pg_autoscale_mode": "warn",
                  "pg_num": 8,
                  "pg_placement_num": 8,
                  "pg_placement_num_target": 8,
                  "pg_num_target": 8,
                  "pg_num_pending": 8,
                  "pg_num_dec_last_epoch_started": 0,
                  "pg_num_dec_last_epoch_clean": 0,
                  "auid": 0,
                  "snap_mode": "selfmanaged",
                  "snap_seq": 0,
                  "snap_epoch": 0,
                  "pool_snaps": [],
                  "quota_max_bytes": 0,
                  "quota_max_objects": 0,
                  "tiers": [],
                  "tier_of": -1,
                  "read_tier": -1,
                  "write_tier": -1,
                  "cache_mode": "none",
                  "target_max_bytes": 0,
                  "target_max_objects": 0,
                  "cache_target_dirty_ratio_micro": 400000,
                  "cache_target_dirty_high_ratio_micro": 600000,
                  "cache_target_full_ratio_micro": 800000,
                  "cache_min_flush_age": 0,
                  "cache_min_evict_age": 0,
                  "erasure_code_profile": "",
                  "hit_set_params": {
                    "type": "none"
                  },
                  "hit_set_period": 0,
                  "hit_set_count": 0,
                  "use_gmt_hitset": true,
                  "min_read_recency_for_promote": 0,
                  "min_write_recency_for_promote": 0,
                  "hit_set_grade_decay_rate": 0,
                  "hit_set_search_last_n": 0,
                  "grade_table": [],
                  "stripe_width": 0,
                  "expected_num_objects": 0,
                  "fast_read": false,
                  "options": {},
                  "application_metadata": [
                    "cephfs"
                  ],
                  "create_time": "2019-01-08 09:59:08.509726",
                  "last_change": "15",
                  "last_force_op_resend": "0",
                  "last_force_op_resend_prenautilus": "0",
                  "last_force_op_resend_preluminous": "0",
                  "removed_snaps": "[]"
                },
                {
                  "pool": 2,
                  "pool_name": "cephfs.a.data",
                  "flags": 1,
                  "flags_names": "hashpspool",
                  "type": "replicated",
                  "size": 3,
                  "min_size": 1,
                  "crush_rule": "replicated_rule",
                  "object_hash": 2,
                  "pg_autoscale_mode": "warn",
                  "pg_num": 8,
                  "pg_placement_num": 8,
                  "pg_placement_num_target": 8,
                  "pg_num_target": 8,
                  "pg_num_pending": 8,
                  "pg_num_dec_last_epoch_started": 0,
                  "pg_num_dec_last_epoch_clean": 0,
                  "auid": 0,
                  "snap_mode": "selfmanaged",
                  "snap_seq": 0,
                  "snap_epoch": 0,
                  "pool_snaps": [],
                  "quota_max_bytes": 0,
                  "quota_max_objects": 0,
                  "tiers": [],
                  "tier_of": -1,
                  "read_tier": -1,
                  "write_tier": -1,
                  "cache_mode": "none",
                  "target_max_bytes": 0,
                  "target_max_objects": 0,
                  "cache_target_dirty_ratio_micro": 400000,
                  "cache_target_dirty_high_ratio_micro": 600000,
                  "cache_target_full_ratio_micro": 800000,
                  "cache_min_flush_age": 0,
                  "cache_min_evict_age": 0,
                  "erasure_code_profile": "",
                  "hit_set_params": {
                    "type": "none"
                  },
                  "hit_set_period": 0,
                  "hit_set_count": 0,
                  "use_gmt_hitset": true,
                  "min_read_recency_for_promote": 0,
                  "min_write_recency_for_promote": 0,
                  "hit_set_grade_decay_rate": 0,
                  "hit_set_search_last_n": 0,
                  "grade_table": [],
                  "stripe_width": 0,
                  "expected_num_objects": 0,
                  "fast_read": false,
                  "options": {},
                  "application_metadata": [
                    "cephfs"
                  ],
                  "create_time": "2019-01-08 09:59:09.169541",
                  "last_change": "16",
                  "last_force_op_resend": "0",
                  "last_force_op_resend_prenautilus": "0",
                  "last_force_op_resend_preluminous": "0",
                  "removed_snaps": "[]"
                },
                {
                  "pool": 3,
                  "pool_name": ".rgw.root",
                  "flags": 1,
                  "flags_names": "hashpspool",
                  "type": "replicated",
                  "size": 3,
                  "min_size": 1,
                  "crush_rule": "replicated_rule",
                  "object_hash": 2,
                  "pg_autoscale_mode": "warn",
                  "pg_num": 8,
                  "pg_placement_num": 8,
                  "pg_placement_num_target": 8,
                  "pg_num_target": 8,
                  "pg_num_pending": 8,
                  "pg_num_dec_last_epoch_started": 0,
                  "pg_num_dec_last_epoch_clean": 0,
                  "auid": 0,
                  "snap_mode": "selfmanaged",
                  "snap_seq": 0,
                  "snap_epoch": 0,
                  "pool_snaps": [],
                  "quota_max_bytes": 0,
                  "quota_max_objects": 0,
                  "tiers": [],
                  "tier_of": -1,
                  "read_tier": -1,
                  "write_tier": -1,
                  "cache_mode": "none",
                  "target_max_bytes": 0,
                  "target_max_objects": 0,
                  "cache_target_dirty_ratio_micro": 400000,
                  "cache_target_dirty_high_ratio_micro": 600000,
                  "cache_target_full_ratio_micro": 800000,
                  "cache_min_flush_age": 0,
                  "cache_min_evict_age": 0,
                  "erasure_code_profile": "",
                  "hit_set_params": {
                    "type": "none"
                  },
                  "hit_set_period": 0,
                  "hit_set_count": 0,
                  "use_gmt_hitset": true,
                  "min_read_recency_for_promote": 0,
                  "min_write_recency_for_promote": 0,
                  "hit_set_grade_decay_rate": 0,
                  "hit_set_search_last_n": 0,
                  "grade_table": [],
                  "stripe_width": 0,
                  "expected_num_objects": 0,
                  "fast_read": false,
                  "options": {},
                  "application_metadata": [
                    "rgw"
                  ],
                  "create_time": "2019-01-08 09:59:11.058803",
                  "last_change": "17",
                  "last_force_op_resend": "0",
                  "last_force_op_resend_prenautilus": "0",
                  "last_force_op_resend_preluminous": "0",
                  "removed_snaps": "[]"
                },
                {
                  "pool": 4,
                  "pool_name": "default.rgw.control",
                  "flags": 1,
                  "flags_names": "hashpspool",
                  "type": "replicated",
                  "size": 3,
                  "min_size": 1,
                  "crush_rule": "replicated_rule",
                  "object_hash": 2,
                  "pg_autoscale_mode": "warn",
                  "pg_num": 8,
                  "pg_placement_num": 8,
                  "pg_placement_num_target": 8,
                  "pg_num_target": 8,
                  "pg_num_pending": 8,
                  "pg_num_dec_last_epoch_started": 0,
                  "pg_num_dec_last_epoch_clean": 0,
                  "auid": 0,
                  "snap_mode": "selfmanaged",
                  "snap_seq": 0,
                  "snap_epoch": 0,
                  "pool_snaps": [],
                  "quota_max_bytes": 0,
                  "quota_max_objects": 0,
                  "tiers": [],
                  "tier_of": -1,
                  "read_tier": -1,
                  "write_tier": -1,
                  "cache_mode": "none",
                  "target_max_bytes": 0,
                  "target_max_objects": 0,
                  "cache_target_dirty_ratio_micro": 400000,
                  "cache_target_dirty_high_ratio_micro": 600000,
                  "cache_target_full_ratio_micro": 800000,
                  "cache_min_flush_age": 0,
                  "cache_min_evict_age": 0,
                  "erasure_code_profile": "",
                  "hit_set_params": {
                    "type": "none"
                  },
                  "hit_set_period": 0,
                  "hit_set_count": 0,
                  "use_gmt_hitset": true,
                  "min_read_recency_for_promote": 0,
                  "min_write_recency_for_promote": 0,
                  "hit_set_grade_decay_rate": 0,
                  "hit_set_search_last_n": 0,
                  "grade_table": [],
                  "stripe_width": 0,
                  "expected_num_objects": 0,
                  "fast_read": false,
                  "options": {},
                  "application_metadata": [
                    "rgw"
                  ],
                  "create_time": "2019-01-08 09:59:12.762467",
                  "last_change": "19",
                  "last_force_op_resend": "0",
                  "last_force_op_resend_prenautilus": "0",
                  "last_force_op_resend_preluminous": "0",
                  "removed_snaps": "[]"
                },
                {
                  "pool": 5,
                  "pool_name": "default.rgw.meta",
                  "flags": 1,
                  "flags_names": "hashpspool",
                  "type": "replicated",
                  "size": 3,
                  "min_size": 1,
                  "crush_rule": "replicated_rule",
                  "object_hash": 2,
                  "pg_autoscale_mode": "warn",
                  "pg_num": 8,
                  "pg_placement_num": 8,
                  "pg_placement_num_target": 8,
                  "pg_num_target": 8,
                  "pg_num_pending": 8,
                  "pg_num_dec_last_epoch_started": 0,
                  "pg_num_dec_last_epoch_clean": 0,
                  "auid": 0,
                  "snap_mode": "selfmanaged",
                  "snap_seq": 0,
                  "snap_epoch": 0,
                  "pool_snaps": [],
                  "quota_max_bytes": 0,
                  "quota_max_objects": 0,
                  "tiers": [],
                  "tier_of": -1,
                  "read_tier": -1,
                  "write_tier": -1,
                  "cache_mode": "none",
                  "target_max_bytes": 0,
                  "target_max_objects": 0,
                  "cache_target_dirty_ratio_micro": 400000,
                  "cache_target_dirty_high_ratio_micro": 600000,
                  "cache_target_full_ratio_micro": 800000,
                  "cache_min_flush_age": 0,
                  "cache_min_evict_age": 0,
                  "erasure_code_profile": "",
                  "hit_set_params": {
                    "type": "none"
                  },
                  "hit_set_period": 0,
                  "hit_set_count": 0,
                  "use_gmt_hitset": true,
                  "min_read_recency_for_promote": 0,
                  "min_write_recency_for_promote": 0,
                  "hit_set_grade_decay_rate": 0,
                  "hit_set_search_last_n": 0,
                  "grade_table": [],
                  "stripe_width": 0,
                  "expected_num_objects": 0,
                  "fast_read": false,
                  "options": {},
                  "application_metadata": [
                    "rgw"
                  ],
                  "create_time": "2019-01-08 09:59:14.894627",
                  "last_change": "21",
                  "last_force_op_resend": "0",
                  "last_force_op_resend_prenautilus": "0",
                  "last_force_op_resend_preluminous": "0",
                  "removed_snaps": "[]"
                },
                {
                  "pool": 6,
                  "pool_name": "default.rgw.log",
                  "flags": 1,
                  "flags_names": "hashpspool",
                  "type": "replicated",
                  "size": 3,
                  "min_size": 1,
                  "crush_rule": "replicated_rule",
                  "object_hash": 2,
                  "pg_autoscale_mode": "warn",
                  "pg_num": 8,
                  "pg_placement_num": 8,
                  "pg_placement_num_target": 8,
                  "pg_num_target": 8,
                  "pg_num_pending": 8,
                  "pg_num_dec_last_epoch_started": 0,
                  "pg_num_dec_last_epoch_clean": 0,
                  "auid": 0,
                  "snap_mode": "selfmanaged",
                  "snap_seq": 0,
                  "snap_epoch": 0,
                  "pool_snaps": [],
                  "quota_max_bytes": 0,
                  "quota_max_objects": 0,
                  "tiers": [],
                  "tier_of": -1,
                  "read_tier": -1,
                  "write_tier": -1,
                  "cache_mode": "none",
                  "target_max_bytes": 0,
                  "target_max_objects": 0,
                  "cache_target_dirty_ratio_micro": 400000,
                  "cache_target_dirty_high_ratio_micro": 600000,
                  "cache_target_full_ratio_micro": 800000,
                  "cache_min_flush_age": 0,
                  "cache_min_evict_age": 0,
                  "erasure_code_profile": "",
                  "hit_set_params": {
                    "type": "none"
                  },
                  "hit_set_period": 0,
                  "hit_set_count": 0,
                  "use_gmt_hitset": true,
                  "min_read_recency_for_promote": 0,
                  "min_write_recency_for_promote": 0,
                  "hit_set_grade_decay_rate": 0,
                  "hit_set_search_last_n": 0,
                  "grade_table": [],
                  "stripe_width": 0,
                  "expected_num_objects": 0,
                  "fast_read": false,
                  "options": {},
                  "application_metadata": [
                    "rgw"
                  ],
                  "create_time": "2019-01-08 09:59:16.810709",
                  "last_change": "23",
                  "last_force_op_resend": "0",
                  "last_force_op_resend_prenautilus": "0",
                  "last_force_op_resend_preluminous": "0",
                  "removed_snaps": "[]"
                },
                {
                  "pool": 7,
                  "pool_name": "default.rgw.buckets.index",
                  "flags": 1,
                  "flags_names": "hashpspool",
                  "type": "replicated",
                  "size": 3,
                  "min_size": 1,
                  "crush_rule": "replicated_rule",
                  "object_hash": 2,
                  "pg_autoscale_mode": "warn",
                  "pg_num": 8,
                  "pg_placement_num": 8,
                  "pg_placement_num_target": 8,
                  "pg_num_target": 8,
                  "pg_num_pending": 8,
                  "pg_num_dec_last_epoch_started": 0,
                  "pg_num_dec_last_epoch_clean": 0,
                  "auid": 0,
                  "snap_mode": "selfmanaged",
                  "snap_seq": 0,
                  "snap_epoch": 0,
                  "pool_snaps": [],
                  "quota_max_bytes": 0,
                  "quota_max_objects": 0,
                  "tiers": [],
                  "tier_of": -1,
                  "read_tier": -1,
                  "write_tier": -1,
                  "cache_mode": "none",
                  "target_max_bytes": 0,
                  "target_max_objects": 0,
                  "cache_target_dirty_ratio_micro": 400000,
                  "cache_target_dirty_high_ratio_micro": 600000,
                  "cache_target_full_ratio_micro": 800000,
                  "cache_min_flush_age": 0,
                  "cache_min_evict_age": 0,
                  "erasure_code_profile": "",
                  "hit_set_params": {
                    "type": "none"
                  },
                  "hit_set_period": 0,
                  "hit_set_count": 0,
                  "use_gmt_hitset": true,
                  "min_read_recency_for_promote": 0,
                  "min_write_recency_for_promote": 0,
                  "hit_set_grade_decay_rate": 0,
                  "hit_set_search_last_n": 0,
                  "grade_table": [],
                  "stripe_width": 0,
                  "expected_num_objects": 0,
                  "fast_read": false,
                  "options": {},
                  "application_metadata": [
                    "rgw"
                  ],
                  "create_time": "2019-01-08 10:04:24.199696",
                  "last_change": "26",
                  "last_force_op_resend": "0",
                  "last_force_op_resend_prenautilus": "0",
                  "last_force_op_resend_preluminous": "0",
                  "removed_snaps": "[]"
                }
              ]
            }
          }
        },
        "summary": "pools info | 查看所有存储池",
        "operationId": "POOLS_INFO",
        "tags": [
          "pool"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "pool": {
                  "type": "string"
                },
                "pool_type": {
                  "type": "string"
                },
                "pg_num": {
                  "type": "integer"
                },
                "erasure_code_profile": {
                  "type": "string"
                }
              }
            },
            "x-examples": {
              "application/json": {
                "pool": "test",
                "pool_type": "erasure",
                "pg_num": 128,
                "erasure_code_profile": "default"
              }
            }
          },
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "$ref": "#/parameters/Content-Type"
          }
        ],
        "summary": "pool create | 创建存储池",
        "operationId": "POOL_CREATE",
        "tags": [
          "pool"
        ]
      }
    },
    "/pool/{pool_name}": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "pool": {
                  "type": "integer"
                },
                "pool_name": {
                  "type": "string"
                },
                "flags": {
                  "type": "integer"
                },
                "flags_names": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "size": {
                  "type": "integer"
                },
                "min_size": {
                  "type": "integer"
                },
                "crush_rule": {
                  "type": "string"
                },
                "object_hash": {
                  "type": "integer"
                },
                "pg_autoscale_mode": {
                  "type": "string"
                },
                "pg_num": {
                  "type": "integer"
                },
                "pg_placement_num": {
                  "type": "integer"
                },
                "pg_placement_num_target": {
                  "type": "integer"
                },
                "pg_num_target": {
                  "type": "integer"
                },
                "pg_num_pending": {
                  "type": "integer"
                },
                "pg_num_dec_last_epoch_started": {
                  "type": "integer"
                },
                "pg_num_dec_last_epoch_clean": {
                  "type": "integer"
                },
                "auid": {
                  "type": "integer"
                },
                "snap_mode": {
                  "type": "string"
                },
                "snap_seq": {
                  "type": "integer"
                },
                "snap_epoch": {
                  "type": "integer"
                },
                "pool_snaps": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "quota_max_bytes": {
                  "type": "integer"
                },
                "quota_max_objects": {
                  "type": "integer"
                },
                "tiers": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "tier_of": {
                  "type": "integer"
                },
                "read_tier": {
                  "type": "integer"
                },
                "write_tier": {
                  "type": "integer"
                },
                "cache_mode": {
                  "type": "string"
                },
                "target_max_bytes": {
                  "type": "integer"
                },
                "target_max_objects": {
                  "type": "integer"
                },
                "cache_target_dirty_ratio_micro": {
                  "type": "integer"
                },
                "cache_target_dirty_high_ratio_micro": {
                  "type": "integer"
                },
                "cache_target_full_ratio_micro": {
                  "type": "integer"
                },
                "cache_min_flush_age": {
                  "type": "integer"
                },
                "cache_min_evict_age": {
                  "type": "integer"
                },
                "erasure_code_profile": {
                  "type": "string"
                },
                "hit_set_params": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    }
                  }
                },
                "hit_set_period": {
                  "type": "integer"
                },
                "hit_set_count": {
                  "type": "integer"
                },
                "use_gmt_hitset": {
                  "type": "boolean"
                },
                "min_read_recency_for_promote": {
                  "type": "integer"
                },
                "min_write_recency_for_promote": {
                  "type": "integer"
                },
                "hit_set_grade_decay_rate": {
                  "type": "integer"
                },
                "hit_set_search_last_n": {
                  "type": "integer"
                },
                "grade_table": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "stripe_width": {
                  "type": "integer"
                },
                "expected_num_objects": {
                  "type": "integer"
                },
                "fast_read": {
                  "type": "boolean"
                },
                "options": {
                  "type": "object"
                },
                "application_metadata": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "create_time": {
                  "type": "string"
                },
                "last_change": {
                  "type": "string"
                },
                "last_force_op_resend": {
                  "type": "string"
                },
                "last_force_op_resend_prenautilus": {
                  "type": "string"
                },
                "last_force_op_resend_preluminous": {
                  "type": "string"
                },
                "removed_snaps": {
                  "type": "string"
                }
              }
            },
            "examples": {
              "application/json": {
                "pool": 2,
                "pool_name": "cephfs.a.data",
                "flags": 1,
                "flags_names": "hashpspool",
                "type": "replicated",
                "size": 3,
                "min_size": 1,
                "crush_rule": "replicated_rule",
                "object_hash": 2,
                "pg_autoscale_mode": "warn",
                "pg_num": 8,
                "pg_placement_num": 8,
                "pg_placement_num_target": 8,
                "pg_num_target": 8,
                "pg_num_pending": 8,
                "pg_num_dec_last_epoch_started": 0,
                "pg_num_dec_last_epoch_clean": 0,
                "auid": 0,
                "snap_mode": "selfmanaged",
                "snap_seq": 0,
                "snap_epoch": 0,
                "pool_snaps": [],
                "quota_max_bytes": 0,
                "quota_max_objects": 0,
                "tiers": [],
                "tier_of": -1,
                "read_tier": -1,
                "write_tier": -1,
                "cache_mode": "none",
                "target_max_bytes": 0,
                "target_max_objects": 0,
                "cache_target_dirty_ratio_micro": 400000,
                "cache_target_dirty_high_ratio_micro": 600000,
                "cache_target_full_ratio_micro": 800000,
                "cache_min_flush_age": 0,
                "cache_min_evict_age": 0,
                "erasure_code_profile": "",
                "hit_set_params": {
                  "type": "none"
                },
                "hit_set_period": 0,
                "hit_set_count": 0,
                "use_gmt_hitset": true,
                "min_read_recency_for_promote": 0,
                "min_write_recency_for_promote": 0,
                "hit_set_grade_decay_rate": 0,
                "hit_set_search_last_n": 0,
                "grade_table": [],
                "stripe_width": 0,
                "expected_num_objects": 0,
                "fast_read": false,
                "options": {},
                "application_metadata": [
                  "cephfs"
                ],
                "create_time": "2019-01-08 09:59:09.169541",
                "last_change": "16",
                "last_force_op_resend": "0",
                "last_force_op_resend_prenautilus": "0",
                "last_force_op_resend_preluminous": "0",
                "removed_snaps": "[]"
              }
            }
          }
        },
        "summary": "pool detail | 查看指定存储池",
        "operationId": "POOL_DETAIL",
        "tags": [
          "pool"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      },
      "parameters": [
        {
          "name": "pool_name",
          "in": "path",
          "type": "string",
          "required": true
        }
      ],
      "put": {
        "responses": {
          "202": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "pool_name": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "name": "pool/edit",
                "metadata": {
                  "pool_name": "test"
                }
              }
            }
          }
        },
        "summary": "pool update | 编辑存储池",
        "operationId": "POOL_UPDATE",
        "tags": [
          "pool"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "pg_num": {
                  "type": "integer"
                },
                "compression_mode": {
                  "type": "string"
                },
                "application_metadata": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "x-examples": {
              "application/json": {
                "pg_num": 128,
                "compression_mode": "aggressive",
                "application_metadata": [
                  "rbd"
                ]
              }
            }
          },
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "$ref": "#/parameters/Content-Type"
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "summary": "pool delete |  删除存储池",
        "operationId": "POOL_DELETE",
        "tags": [
          "pool"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/block/image": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer"
                  },
                  "value": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "size": {
                          "type": "integer"
                        },
                        "obj_size": {
                          "type": "integer"
                        },
                        "num_objs": {
                          "type": "integer"
                        },
                        "order": {
                          "type": "integer"
                        },
                        "block_name_prefix": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "pool_name": {
                          "type": "string"
                        },
                        "features": {
                          "type": "integer"
                        },
                        "features_name": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "timestamp": {
                          "type": "string"
                        },
                        "stripe_count": {
                          "type": "integer"
                        },
                        "stripe_unit": {
                          "type": "integer"
                        },
                        "data_pool": {
                          "type": "null"
                        },
                        "parent": {
                          "type": "null"
                        },
                        "snapshots": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        },
                        "total_disk_usage": {
                          "type": "integer"
                        },
                        "disk_usage": {
                          "type": "integer"
                        }
                      }
                    }
                  },
                  "pool_name": {
                    "type": "string"
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "status": 0,
                  "value": [
                    {
                      "size": 536870912,
                      "obj_size": 4194304,
                      "num_objs": 128,
                      "order": 22,
                      "block_name_prefix": "rbd_data.10dac67df212",
                      "name": "test-block",
                      "id": "10dac67df212",
                      "pool_name": "test",
                      "features": 61,
                      "features_name": [
                        "deep-flatten",
                        "exclusive-lock",
                        "fast-diff",
                        "layering",
                        "object-map"
                      ],
                      "timestamp": "2019-01-08T08:25:19Z",
                      "stripe_count": 1,
                      "stripe_unit": 4194304,
                      "data_pool": null,
                      "parent": null,
                      "snapshots": [],
                      "total_disk_usage": 0,
                      "disk_usage": 0
                    }
                  ],
                  "pool_name": "test"
                }
              ]
            }
          }
        },
        "summary": "images info | 查看所有卷",
        "operationId": "IMAGES_INFO",
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "tags": [
          "rbd"
        ],
        "description": "List all rbd images' info.\n\n--- \n\n返回所有卷信息"
      },
      "post": {
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "features": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "pool_name": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "size": {
                  "type": "integer"
                },
                "obj_size": {
                  "type": "integer"
                },
                "stripe_unit": {
                  "type": "null"
                },
                "stripe_count": {
                  "type": "null"
                },
                "data_pool": {
                  "type": "null"
                }
              },
              "required": [
                "size"
              ]
            },
            "x-examples": {
              "application/json": {
                "features": [
                  "deep-flatten",
                  "layering",
                  "exclusive-lock",
                  "object-map",
                  "fast-diff"
                ],
                "pool_name": "test",
                "name": "test-block",
                "size": 536870912,
                "obj_size": 4194304,
                "stripe_unit": null,
                "stripe_count": null,
                "data_pool": null
              }
            },
            "description": "You must also specify the size via –size. The –stripe-unit and –stripe-count arguments are optional, but must be used together."
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "summary": "image create | 创建卷",
        "operationId": "IMAGE_CREATE",
        "tags": [
          "rbd"
        ],
        "description": "Create a new rbd image. \n\n---\n\n创建卷"
      }
    },
    "/block/image/trash": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "integer"
                  },
                  "value": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "pool_name": {
                    "type": "string"
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "status": 0,
                  "value": [],
                  "pool_name": "test"
                }
              ]
            }
          }
        },
        "summary": "image trash info | 查看所有删除卷",
        "operationId": "IMAGE_TRASH_INFO",
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "tags": [
          "rbd"
        ],
        "description": "List all entries from trash.\n\n---\n\n返回所有删除的卷"
      }
    },
    "/block/image/{pool_name}/{image_name}/snap": {
      "post": {
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "snapshot_name": {
                  "type": "string"
                }
              },
              "required": [
                "snapshot_name"
              ]
            },
            "x-examples": {
              "application/json": {
                "snapshot_name": "test-block-snap1"
              }
            }
          }
        ],
        "summary": "snapshot create | 创建快照",
        "operationId": "SNAPSHOT_CREATE",
        "tags": [
          "snapshot"
        ],
        "description": "Create a new snapshot. Requires the snapshot name parameter specified.\n\n---\n\n创建快照。须提供快照名。"
      },
      "parameters": [
        {
          "name": "pool_name",
          "in": "path",
          "type": "string",
          "required": true
        },
        {
          "name": "image_name",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    },
    "/block/image/{pool_name}/{image_name}/snap/{snapshot_name}/clone": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "summary": "image from snapshot clone | 使用快照链接卷",
        "tags": [
          "snapshot",
          "rbd"
        ],
        "operationId": "IMAGE_FROM_SNAPSHOT_CLONE",
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "features": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "child_pool_name": {
                  "type": "string"
                },
                "child_image_name": {
                  "type": "string"
                },
                "obj_size": {
                  "type": "integer"
                },
                "stripe_unit": {
                  "type": "integer"
                },
                "stripe_count": {
                  "type": "integer"
                },
                "data_pool": {
                  "type": "null"
                }
              }
            },
            "x-examples": {
              "application/json": {
                "features": [
                  "deep-flatten",
                  "layering",
                  "exclusive-lock",
                  "object-map",
                  "fast-diff"
                ],
                "child_pool_name": "test",
                "child_image_name": "test-block-snap3-clone1",
                "obj_size": 4194304,
                "stripe_unit": 4194304,
                "stripe_count": 1,
                "data_pool": null
              }
            }
          }
        ],
        "description": "Create a clone (copy-on-write child) of the parent snapshot.\n\n---\n\n使用快照链接创建卷。"
      },
      "parameters": [
        {
          "name": "pool_name",
          "in": "path",
          "type": "string",
          "required": true
        },
        {
          "name": "image_name",
          "in": "path",
          "type": "string",
          "required": true
        },
        {
          "name": "snapshot_name",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    },
    "/block/image/{pool_name}/{image_name}/copy": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "summary": "image from snapshot copy | 使用快照复制生成卷",
        "operationId": "IMAGE_FROM_SNAPSHOT_COPY",
        "tags": [
          "snapshot",
          "rbd"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "features": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "snapshot_name": {
                  "type": "string"
                },
                "dest_pool_name": {
                  "type": "string"
                },
                "dest_image_name": {
                  "type": "string"
                },
                "obj_size": {
                  "type": "integer"
                },
                "stripe_unit": {
                  "type": "integer"
                },
                "stripe_count": {
                  "type": "integer"
                },
                "data_pool": {
                  "type": "null"
                }
              }
            },
            "x-examples": {
              "application/json": {
                "features": [
                  "deep-flatten",
                  "layering",
                  "exclusive-lock",
                  "object-map",
                  "fast-diff"
                ],
                "snapshot_name": "test-block-snap3",
                "dest_pool_name": "test",
                "dest_image_name": "test-block-snap3-copy1",
                "obj_size": 4194304,
                "stripe_unit": 4194304,
                "stripe_count": 1,
                "data_pool": null
              }
            }
          }
        ]
      },
      "parameters": [
        {
          "name": "pool_name",
          "in": "path",
          "type": "string",
          "required": true
        },
        {
          "name": "image_name",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    },
    "/block/image/{pool_name}/{image_name}/snap/{snapshot_name}": {
      "put": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "summary": "snapshot update | 快照编辑（保护/重命名）",
        "operationId": "SNAPSHOT_UPDATE",
        "parameters": [
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "is_protected": {
                  "type": "boolean"
                },
                "new_snap_name": {
                  "type": "string"
                }
              }
            },
            "x-examples": {
              "snapshot rename": "{\n  \"new_snap_name\": \"test-block-snap3\"\n}",
              "snapshot protect": "{\n  \"is_protected\": true\n}"
            }
          }
        ],
        "tags": [
          "snapshot",
          "rbd"
        ],
        "description": "You have two options:\n- Protect a snapshot from deletion, so that clones can be made of it. Or \"de-protect\"\n- Rename a snapshot.\nSpecify one by indicating 'is_protected' or 'new_snap_name' value in the request body.\n\n---\n\n重命名快照，或者保护快照不被删除， 或者解除快照保护。\n具体要在请求中指定is_protected或new_snap_name属性。\nis_protected属性与快照保护状态有关，new_snap_name属性与重命名快照有关。"
      },
      "parameters": [
        {
          "name": "pool_name",
          "in": "path",
          "type": "string",
          "required": true
        },
        {
          "name": "image_name",
          "in": "path",
          "type": "string",
          "required": true
        },
        {
          "name": "snapshot_name",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    },
    "/block/image/{pool_name}/{image_name}/snap/{snapshot_name}/rollback": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "summary": "image rollback from snapshot | 使用快照恢复卷",
        "operationId": "IMAGE_ROLLBACK_FROM SNAPSHOT",
        "tags": [
          "snapshot",
          "rbd"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "description": "Rollback image content to snapshot. This will iterate through the entire blocks array and update the data head content to the snapshotted version.\n\n---\n\n使用快照恢复卷。"
      },
      "parameters": [
        {
          "name": "pool_name",
          "in": "path",
          "type": "string",
          "required": true
        },
        {
          "name": "image_name",
          "in": "path",
          "type": "string",
          "required": true
        },
        {
          "name": "snapshot_name",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    },
    "/block/image/{pool_name}/{image_name}": {
      "delete": {
        "responses": {
          "204": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "summary": "image delete | 删除卷",
        "operationId": "IMAGE_DELETE",
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "tags": [
          "rbd"
        ],
        "description": "Delete an rbd image (including all data blocks).\n\n---\n\n删除卷"
      },
      "parameters": [
        {
          "name": "pool_name",
          "in": "path",
          "type": "string",
          "required": true
        },
        {
          "name": "image_name",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    },
    "/block/image/{pool_name}/{image_name}/move_trash": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "summary": "image move to trash",
        "operationId": "IMAGE_MOVE_TO_TRASH",
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "delay": {
                  "type": "number"
                }
              }
            },
            "x-examples": {
              "application/json": {
                "delay": 0
              }
            }
          }
        ],
        "tags": [
          "rbd"
        ],
        "description": "Move an image to the trash.\n\n---\n\n"
      },
      "parameters": [
        {
          "name": "pool_name",
          "in": "path",
          "type": "string",
          "required": true
        },
        {
          "name": "image_name",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    },
    "/block/image/trash/{pool_name}/{image_trash_id}/restore": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "summary": "image trash restore",
        "operationId": "IMAGE_TRASH_RESTORE",
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "new_image_name": {
                  "type": "string"
                }
              }
            },
            "x-examples": {
              "application/json": {
                "new_image_name": "test-block-snap3-clone0"
              }
            }
          }
        ],
        "tags": [
          "rbd"
        ],
        "description": "Restore an image from trash.\n\n---\n\n恢复删除卷"
      },
      "parameters": [
        {
          "name": "pool_name",
          "in": "path",
          "type": "string",
          "required": true
        },
        {
          "name": "image_trash_id",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    },
    "/block/image/{pool_name}/{cloned_image_name}/flatten": {
      "post": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "summary": "image flatten | 使用快照创建独立卷",
        "operationId": "IMAGE_FLATTEN",
        "tags": [
          "snapshot",
          "rbd"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "description": "If image is a clone, copy all shared blocks from the parent snapshot and make the child independent of the parent, severing the link between parent snap and child. The parent snapshot can be unprotected and deleted if it has no further dependent clones.\n\n---\n\n全克隆卷"
      },
      "parameters": [
        {
          "name": "pool_name",
          "in": "path",
          "type": "string",
          "required": true
        },
        {
          "name": "cloned_image_name",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    },
    "/rbdmirror": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer"
                },
                "content_data": {
                  "type": "object",
                  "properties": {
                    "daemons": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "pools": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "image_error": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "image_syncing": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "image_ready": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "status": 0,
                "content_data": {
                  "daemons": [],
                  "pools": [],
                  "image_error": [],
                  "image_syncing": [],
                  "image_ready": []
                }
              }
            }
          }
        },
        "summary": "rbd mirror info",
        "operationId": "RBD_MIRROR_INFO",
        "tags": [
          "rbd"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/tcmuiscsi": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "daemons": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                },
                "images": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            },
            "examples": {
              "application/json": {
                "daemons": [],
                "images": []
              }
            }
          }
        },
        "summary": "iSCSI info | 查看所有iSCSI targets信息",
        "operationId": "ISCSI_INFO",
        "tags": [
          "iscsi"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/user": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "email": {
                    "type": [
                      "null",
                      "string"
                    ]
                  },
                  "lastUpdate": {
                    "type": "integer"
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "username": "admin",
                  "roles": [
                    "administrator"
                  ],
                  "name": null,
                  "email": null,
                  "lastUpdate": 1546933949
                },
                {
                  "username": "test",
                  "roles": [
                    "read-only"
                  ],
                  "name": "ttodk",
                  "email": "hap@gmail.com",
                  "lastUpdate": 1546938183
                }
              ]
            }
          }
        },
        "summary": "user info | 查看所有用户",
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "operationId": "USER_INFO",
        "tags": [
          "user"
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "lastUpdate": {
                  "type": "integer"
                }
              }
            },
            "examples": {
              "application/json": {
                "username": "test1",
                "roles": [
                  "read-only"
                ],
                "name": "ttodk1",
                "email": "hap@gmail1.com",
                "lastUpdate": 1546938231
              }
            }
          }
        },
        "summary": "user create | 创建用户",
        "operationId": "USER_CREATE",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "x-examples": {
              "application/json": {
                "username": "test1",
                "password": "test1",
                "name": "ttodk1",
                "email": "hap@gmail1.com",
                "roles": [
                  "read-only"
                ]
              }
            }
          }
        ]
      }
    },
    "/user/{user_name}": {
      "put": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "lastUpdate": {
                  "type": "integer"
                }
              }
            },
            "examples": {
              "application/json": {
                "username": "test1",
                "roles": [
                  "pool-manager"
                ],
                "name": "tt",
                "email": "hap@gm.com",
                "lastUpdate": 1546938281
              }
            }
          }
        },
        "summary": "user update | 编辑用户",
        "operationId": "USER_UPDATE",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "x-examples": {
              "application/json": {
                "username": "test1",
                "password": "",
                "name": "tt",
                "email": "hap@gm.com",
                "roles": [
                  "pool-manager"
                ]
              }
            }
          }
        ]
      },
      "parameters": [
        {
          "name": "user_name",
          "in": "path",
          "type": "string",
          "required": true
        }
      ],
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string"
                },
                "roles": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "lastUpdate": {
                  "type": "integer"
                }
              }
            },
            "examples": {
              "application/json": {
                "username": "test1",
                "roles": [
                  "pool-manager"
                ],
                "name": "tt",
                "email": "hap@gm.com",
                "lastUpdate": 1546938281
              }
            }
          }
        },
        "summary": "user detail | 查看指定用户",
        "operationId": "USER_DETAIL",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      },
      "delete": {
        "responses": {
          "204": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "summary": "user delete | 删除用户",
        "operationId": "USER_DELETE",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      }
    },
    "/role": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "scopes_permissions": {
                    "type": "object",
                    "properties": {
                      "cephfs": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "config-opt": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "dashboard-settings": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "grafana": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "hosts": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "iscsi": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "log": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "manager": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "monitor": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "osd": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "pool": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "rbd-image": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "rbd-mirroring": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "rgw": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "user": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "system": {
                    "type": "boolean"
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "name": "administrator",
                  "description": "Administrator",
                  "scopes_permissions": {
                    "cephfs": [
                      "create",
                      "delete",
                      "read",
                      "update"
                    ],
                    "config-opt": [
                      "create",
                      "delete",
                      "read",
                      "update"
                    ],
                    "dashboard-settings": [
                      "create",
                      "delete",
                      "read",
                      "update"
                    ],
                    "grafana": [
                      "create",
                      "delete",
                      "read",
                      "update"
                    ],
                    "hosts": [
                      "create",
                      "delete",
                      "read",
                      "update"
                    ],
                    "iscsi": [
                      "create",
                      "delete",
                      "read",
                      "update"
                    ],
                    "log": [
                      "create",
                      "delete",
                      "read",
                      "update"
                    ],
                    "manager": [
                      "create",
                      "delete",
                      "read",
                      "update"
                    ],
                    "monitor": [
                      "create",
                      "delete",
                      "read",
                      "update"
                    ],
                    "osd": [
                      "create",
                      "delete",
                      "read",
                      "update"
                    ],
                    "pool": [
                      "create",
                      "delete",
                      "read",
                      "update"
                    ],
                    "rbd-image": [
                      "create",
                      "delete",
                      "read",
                      "update"
                    ],
                    "rbd-mirroring": [
                      "create",
                      "delete",
                      "read",
                      "update"
                    ],
                    "rgw": [
                      "create",
                      "delete",
                      "read",
                      "update"
                    ],
                    "user": [
                      "create",
                      "delete",
                      "read",
                      "update"
                    ]
                  },
                  "system": true
                },
                {
                  "name": "block-manager",
                  "description": "Block Manager",
                  "scopes_permissions": {
                    "rbd-image": [
                      "read",
                      "create",
                      "update",
                      "delete"
                    ],
                    "pool": [
                      "read"
                    ],
                    "iscsi": [
                      "read",
                      "create",
                      "update",
                      "delete"
                    ],
                    "rbd-mirroring": [
                      "read",
                      "create",
                      "update",
                      "delete"
                    ]
                  },
                  "system": true
                },
                {
                  "name": "cephfs-manager",
                  "description": "CephFS Manager",
                  "scopes_permissions": {
                    "cephfs": [
                      "read",
                      "create",
                      "update",
                      "delete"
                    ],
                    "config-opt": [
                      "read"
                    ]
                  },
                  "system": true
                },
                {
                  "name": "cluster-manager",
                  "description": "Cluster Manager",
                  "scopes_permissions": {
                    "hosts": [
                      "read",
                      "create",
                      "update",
                      "delete"
                    ],
                    "osd": [
                      "read",
                      "create",
                      "update",
                      "delete"
                    ],
                    "monitor": [
                      "read",
                      "create",
                      "update",
                      "delete"
                    ],
                    "manager": [
                      "read",
                      "create",
                      "update",
                      "delete"
                    ],
                    "config-opt": [
                      "read",
                      "create",
                      "update",
                      "delete"
                    ],
                    "log": [
                      "read",
                      "create",
                      "update",
                      "delete"
                    ]
                  },
                  "system": true
                },
                {
                  "name": "pool-manager",
                  "description": "Pool Manager",
                  "scopes_permissions": {
                    "pool": [
                      "read",
                      "create",
                      "update",
                      "delete"
                    ],
                    "config-opt": [
                      "read"
                    ]
                  },
                  "system": true
                },
                {
                  "name": "read-only",
                  "description": "Read-Only",
                  "scopes_permissions": {
                    "cephfs": [
                      "read"
                    ],
                    "config-opt": [
                      "read"
                    ],
                    "grafana": [
                      "read"
                    ],
                    "hosts": [
                      "read"
                    ],
                    "iscsi": [
                      "read"
                    ],
                    "log": [
                      "read"
                    ],
                    "manager": [
                      "read"
                    ],
                    "monitor": [
                      "read"
                    ],
                    "osd": [
                      "read"
                    ],
                    "pool": [
                      "read"
                    ],
                    "rbd-image": [
                      "read"
                    ],
                    "rbd-mirroring": [
                      "read"
                    ],
                    "rgw": [
                      "read"
                    ],
                    "user": [
                      "read"
                    ]
                  },
                  "system": true
                },
                {
                  "name": "rgw-manager",
                  "description": "RGW Manager",
                  "scopes_permissions": {
                    "rgw": [
                      "read",
                      "create",
                      "update",
                      "delete"
                    ],
                    "config-opt": [
                      "read"
                    ]
                  },
                  "system": true
                }
              ]
            }
          }
        },
        "summary": "role info",
        "operationId": "ROLE_INFO",
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "tags": [
          "role"
        ]
      },
      "post": {
        "responses": {
          "201": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "scopes_permissions": {
                  "type": "object",
                  "properties": {
                    "config-opt": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "hosts": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "system": {
                  "type": "boolean"
                }
              }
            },
            "examples": {
              "application/json": {
                "name": "test-role",
                "description": "",
                "scopes_permissions": {
                  "config-opt": [
                    "delete",
                    "read",
                    "update"
                  ],
                  "hosts": [
                    "create",
                    "delete",
                    "read"
                  ]
                },
                "system": false
              }
            }
          }
        },
        "summary": "role create",
        "operationId": "ROLE_CREATE",
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "scopes_permissions": {
                  "type": "object",
                  "properties": {
                    "config-opt": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "hosts": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "x-examples": {
              "application/json": {
                "name": "test-role",
                "description": "",
                "scopes_permissions": {
                  "config-opt": [
                    "read",
                    "update",
                    "delete"
                  ],
                  "hosts": [
                    "read",
                    "create",
                    "delete"
                  ]
                }
              }
            }
          }
        ],
        "tags": [
          "role"
        ]
      }
    },
    "/role/{role_name}": {
      "delete": {
        "responses": {
          "204": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "operationId": "ROLE_DELETE",
        "summary": "role delete",
        "tags": [
          "role"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ]
      },
      "parameters": [
        {
          "name": "role_name",
          "in": "path",
          "type": "string",
          "required": true
        }
      ],
      "put": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "scopes_permissions": {
                  "type": "object",
                  "properties": {
                    "dashboard-settings": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "monitor": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "config-opt": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "system": {
                  "type": "boolean"
                }
              }
            },
            "examples": {
              "application/json": {
                "name": "test-role",
                "description": "",
                "scopes_permissions": {
                  "dashboard-settings": [
                    "delete",
                    "read"
                  ],
                  "monitor": [
                    "delete",
                    "update"
                  ],
                  "config-opt": [
                    "create"
                  ]
                },
                "system": false
              }
            }
          }
        },
        "summary": "role update",
        "operationId": "ROLE_UPDATE",
        "tags": [
          "role"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          },
          {
            "$ref": "#/parameters/Content-Type"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "scopes_permissions": {
                  "type": "object",
                  "properties": {
                    "dashboard-settings": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "monitor": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "config-opt": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "x-examples": {
              "application/json": {
                "name": "test-role",
                "description": "",
                "scopes_permissions": {
                  "dashboard-settings": [
                    "delete",
                    "read"
                  ],
                  "monitor": [
                    "delete",
                    "update"
                  ],
                  "config-opt": [
                    "create"
                  ]
                }
              }
            }
          }
        ]
      }
    },
    "/erasure_code_profile": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "crush-failure-domain": {
                    "type": "string"
                  },
                  "k": {
                    "type": "integer"
                  },
                  "m": {
                    "type": "integer"
                  },
                  "plugin": {
                    "type": "string"
                  },
                  "technique": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              }
            },
            "examples": {
              "application/json": [
                {
                  "crush-failure-domain": "osd",
                  "k": 2,
                  "m": 1,
                  "plugin": "jerasure",
                  "technique": "reed_sol_van",
                  "name": "default"
                }
              ]
            }
          }
        },
        "summary": "erasure code profile",
        "operationId": "ERASURE_CODE_PROFILE",
        "parameters": [
          {
            "$ref": "#/parameters/Authorization"
          }
        ],
        "description": "List infos of all erasure code profiles.\n\nReference: \n[Erasure code profiles](http://docs.ceph.com/docs/mimic/rados/operations/erasure-code-profile/)"
      }
    }
  },
  "parameters": {
    "Accept": {
      "in": "header",
      "type": "string",
      "default": "application/json, text/plain, */*",
      "name": "Accept"
    },
    "Origin": {
      "name": "Origin",
      "in": "header",
      "type": "string"
    },
    "User-Agent": {
      "name": "User-Agent",
      "in": "header",
      "type": "string"
    },
    "Content-Type": {
      "name": "Content-Type",
      "in": "header",
      "type": "string",
      "default": "application/json"
    },
    "Referer": {
      "name": "Referer",
      "in": "header",
      "type": "string"
    },
    "Accept-Encoding": {
      "name": "Accept-Encoding",
      "in": "header",
      "type": "string",
      "default": "gzip, deflate, br"
    },
    "Accept-Language": {
      "name": "Accept-Language",
      "in": "header",
      "type": "string",
      "default": "en-US,en;q=0.9"
    },
    "Authorization": {
      "in": "header",
      "type": "string",
      "description": "首次登录时返回的token，作为后续API请求的安全验证方法。",
      "name": "Authorization"
    }
  },
  "definitions": {},
  "tags": [
    {
      "name": "auth"
    },
    {
      "name": "monitor"
    },
    {
      "name": "host"
    },
    {
      "name": "osd"
    },
    {
      "name": "cluster"
    },
    {
      "name": "rgw"
    },
    {
      "name": "cephfs"
    },
    {
      "name": "performance"
    },
    {
      "name": "logs"
    },
    {
      "name": "pool"
    },
    {
      "name": "snapshot",
      "description": "Snapshot knowledge (快照相关知识)：\n[Snapshots](http://docs.ceph.com/docs/mimic/rbd/rbd-snapshot/)"
    },
    {
      "name": "rbd",
      "description": "Command reference: \n[rbd – manage rados block device (RBD) images](http://docs.ceph.com/docs/mimic/man/8/rbd/)"
    },
    {
      "name": "iscsi"
    },
    {
      "name": "user"
    },
    {
      "name": "role"
    }
  ],
  "responses": {},
  "basePath": "http://localhost:4200/api"
}
